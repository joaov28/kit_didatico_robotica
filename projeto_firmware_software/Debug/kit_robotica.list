
kit_robotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006bc0  08006bc0  00016bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000010c  20000000  08006d38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ec  20000110  08006e44  00020110  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200003fc  08006e44  000203fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ed7a  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a40  00000000  00000000  0003eeaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a27c  00000000  00000000  000428ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c50  00000000  00000000  0004cb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001178  00000000  00000000  0004d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008584  00000000  00000000  0004e938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000049e4  00000000  00000000  00056ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b8a0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f84  00000000  00000000  0005b91c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ba4 	.word	0x08006ba4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	08006ba4 	.word	0x08006ba4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2f>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a28:	bf24      	itt	cs
 8000a2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a32:	d90d      	bls.n	8000a50 <__aeabi_d2f+0x30>
 8000a34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a48:	bf08      	it	eq
 8000a4a:	f020 0001 	biceq.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a54:	d121      	bne.n	8000a9a <__aeabi_d2f+0x7a>
 8000a56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5a:	bfbc      	itt	lt
 8000a5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	4770      	bxlt	lr
 8000a62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6a:	f1c2 0218 	rsb	r2, r2, #24
 8000a6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a76:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	f040 0001 	orrne.w	r0, r0, #1
 8000a80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a8c:	ea40 000c 	orr.w	r0, r0, ip
 8000a90:	fa23 f302 	lsr.w	r3, r3, r2
 8000a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a98:	e7cc      	b.n	8000a34 <__aeabi_d2f+0x14>
 8000a9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9e:	d107      	bne.n	8000ab0 <__aeabi_d2f+0x90>
 8000aa0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aaa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aae:	4770      	bxne	lr
 8000ab0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_frsub>:
 8000ac0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	e002      	b.n	8000acc <__addsf3>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_fsub>:
 8000ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000acc <__addsf3>:
 8000acc:	0042      	lsls	r2, r0, #1
 8000ace:	bf1f      	itttt	ne
 8000ad0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad4:	ea92 0f03 	teqne	r2, r3
 8000ad8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000adc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae0:	d06a      	beq.n	8000bb8 <__addsf3+0xec>
 8000ae2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aea:	bfc1      	itttt	gt
 8000aec:	18d2      	addgt	r2, r2, r3
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	4048      	eorgt	r0, r1
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	2b19      	cmp	r3, #25
 8000afa:	bf88      	it	hi
 8000afc:	4770      	bxhi	lr
 8000afe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4249      	negne	r1, r1
 8000b1e:	ea92 0f03 	teq	r2, r3
 8000b22:	d03f      	beq.n	8000ba4 <__addsf3+0xd8>
 8000b24:	f1a2 0201 	sub.w	r2, r2, #1
 8000b28:	fa41 fc03 	asr.w	ip, r1, r3
 8000b2c:	eb10 000c 	adds.w	r0, r0, ip
 8000b30:	f1c3 0320 	rsb	r3, r3, #32
 8000b34:	fa01 f103 	lsl.w	r1, r1, r3
 8000b38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	d502      	bpl.n	8000b44 <__addsf3+0x78>
 8000b3e:	4249      	negs	r1, r1
 8000b40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b48:	d313      	bcc.n	8000b72 <__addsf3+0xa6>
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4e:	d306      	bcc.n	8000b5e <__addsf3+0x92>
 8000b50:	0840      	lsrs	r0, r0, #1
 8000b52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b56:	f102 0201 	add.w	r2, r2, #1
 8000b5a:	2afe      	cmp	r2, #254	; 0xfe
 8000b5c:	d251      	bcs.n	8000c02 <__addsf3+0x136>
 8000b5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	ea40 0003 	orr.w	r0, r0, r3
 8000b70:	4770      	bx	lr
 8000b72:	0049      	lsls	r1, r1, #1
 8000b74:	eb40 0000 	adc.w	r0, r0, r0
 8000b78:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	d1ed      	bne.n	8000b5e <__addsf3+0x92>
 8000b82:	fab0 fc80 	clz	ip, r0
 8000b86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b92:	bfaa      	itet	ge
 8000b94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b98:	4252      	neglt	r2, r2
 8000b9a:	4318      	orrge	r0, r3
 8000b9c:	bfbc      	itt	lt
 8000b9e:	40d0      	lsrlt	r0, r2
 8000ba0:	4318      	orrlt	r0, r3
 8000ba2:	4770      	bx	lr
 8000ba4:	f092 0f00 	teq	r2, #0
 8000ba8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bac:	bf06      	itte	eq
 8000bae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb2:	3201      	addeq	r2, #1
 8000bb4:	3b01      	subne	r3, #1
 8000bb6:	e7b5      	b.n	8000b24 <__addsf3+0x58>
 8000bb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc6:	d021      	beq.n	8000c0c <__addsf3+0x140>
 8000bc8:	ea92 0f03 	teq	r2, r3
 8000bcc:	d004      	beq.n	8000bd8 <__addsf3+0x10c>
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	4608      	moveq	r0, r1
 8000bd6:	4770      	bx	lr
 8000bd8:	ea90 0f01 	teq	r0, r1
 8000bdc:	bf1c      	itt	ne
 8000bde:	2000      	movne	r0, #0
 8000be0:	4770      	bxne	lr
 8000be2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be6:	d104      	bne.n	8000bf2 <__addsf3+0x126>
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	bf28      	it	cs
 8000bec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	4770      	bx	lr
 8000bf2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf6:	bf3c      	itt	cc
 8000bf8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bxcc	lr
 8000bfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c10:	bf16      	itet	ne
 8000c12:	4608      	movne	r0, r1
 8000c14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c18:	4601      	movne	r1, r0
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	bf06      	itte	eq
 8000c1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c22:	ea90 0f01 	teqeq	r0, r1
 8000c26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_ui2f>:
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e004      	b.n	8000c3c <__aeabi_i2f+0x8>
 8000c32:	bf00      	nop

08000c34 <__aeabi_i2f>:
 8000c34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c38:	bf48      	it	mi
 8000c3a:	4240      	negmi	r0, r0
 8000c3c:	ea5f 0c00 	movs.w	ip, r0
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	e01c      	b.n	8000c8a <__aeabi_l2f+0x2a>

08000c50 <__aeabi_ul2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e00a      	b.n	8000c74 <__aeabi_l2f+0x14>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_l2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__aeabi_l2f+0x14>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	ea5f 0c01 	movs.w	ip, r1
 8000c78:	bf02      	ittt	eq
 8000c7a:	4684      	moveq	ip, r0
 8000c7c:	4601      	moveq	r1, r0
 8000c7e:	2000      	moveq	r0, #0
 8000c80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c84:	bf08      	it	eq
 8000c86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8e:	fabc f28c 	clz	r2, ip
 8000c92:	3a08      	subs	r2, #8
 8000c94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c98:	db10      	blt.n	8000cbc <__aeabi_l2f+0x5c>
 8000c9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca4:	f1c2 0220 	rsb	r2, r2, #32
 8000ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cac:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb0:	eb43 0002 	adc.w	r0, r3, r2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f102 0220 	add.w	r2, r2, #32
 8000cc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc4:	f1c2 0220 	rsb	r2, r2, #32
 8000cc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ccc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd0:	eb43 0002 	adc.w	r0, r3, r2
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_fmul>:
 8000cdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cea:	ea92 0f0c 	teqne	r2, ip
 8000cee:	ea93 0f0c 	teqne	r3, ip
 8000cf2:	d06f      	beq.n	8000dd4 <__aeabi_fmul+0xf8>
 8000cf4:	441a      	add	r2, r3
 8000cf6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfa:	0240      	lsls	r0, r0, #9
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d02:	d01e      	beq.n	8000d42 <__aeabi_fmul+0x66>
 8000d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d10:	fba0 3101 	umull	r3, r1, r0, r1
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d1c:	bf3e      	ittt	cc
 8000d1e:	0049      	lslcc	r1, r1, #1
 8000d20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d24:	005b      	lslcc	r3, r3, #1
 8000d26:	ea40 0001 	orr.w	r0, r0, r1
 8000d2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2e:	2afd      	cmp	r2, #253	; 0xfd
 8000d30:	d81d      	bhi.n	8000d6e <__aeabi_fmul+0x92>
 8000d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	4770      	bx	lr
 8000d42:	f090 0f00 	teq	r0, #0
 8000d46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4a:	bf08      	it	eq
 8000d4c:	0249      	lsleq	r1, r1, #9
 8000d4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d56:	3a7f      	subs	r2, #127	; 0x7f
 8000d58:	bfc2      	ittt	gt
 8000d5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d62:	4770      	bxgt	lr
 8000d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	dc5d      	bgt.n	8000e2c <__aeabi_fmul+0x150>
 8000d70:	f112 0f19 	cmn.w	r2, #25
 8000d74:	bfdc      	itt	le
 8000d76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7a:	4770      	bxle	lr
 8000d7c:	f1c2 0200 	rsb	r2, r2, #0
 8000d80:	0041      	lsls	r1, r0, #1
 8000d82:	fa21 f102 	lsr.w	r1, r1, r2
 8000d86:	f1c2 0220 	rsb	r2, r2, #32
 8000d8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d92:	f140 0000 	adc.w	r0, r0, #0
 8000d96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9a:	bf08      	it	eq
 8000d9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da0:	4770      	bx	lr
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0040      	lsleq	r0, r0, #1
 8000dae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db2:	3a01      	subeq	r2, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xce>
 8000db6:	ea40 000c 	orr.w	r0, r0, ip
 8000dba:	f093 0f00 	teq	r3, #0
 8000dbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0049      	lsleq	r1, r1, #1
 8000dc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dca:	3b01      	subeq	r3, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xe6>
 8000dce:	ea41 010c 	orr.w	r1, r1, ip
 8000dd2:	e78f      	b.n	8000cf4 <__aeabi_fmul+0x18>
 8000dd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	bf18      	it	ne
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d00a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	d1d8      	bne.n	8000da2 <__aeabi_fmul+0xc6>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	bf17      	itett	ne
 8000e00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e04:	4608      	moveq	r0, r1
 8000e06:	f091 0f00 	teqne	r1, #0
 8000e0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0e:	d014      	beq.n	8000e3a <__aeabi_fmul+0x15e>
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d101      	bne.n	8000e1a <__aeabi_fmul+0x13e>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d10f      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e1a:	ea93 0f0c 	teq	r3, ip
 8000e1e:	d103      	bne.n	8000e28 <__aeabi_fmul+0x14c>
 8000e20:	024b      	lsls	r3, r1, #9
 8000e22:	bf18      	it	ne
 8000e24:	4608      	movne	r0, r1
 8000e26:	d108      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e38:	4770      	bx	lr
 8000e3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_fdiv>:
 8000e44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e4c:	bf1e      	ittt	ne
 8000e4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e52:	ea92 0f0c 	teqne	r2, ip
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d069      	beq.n	8000f30 <__aeabi_fdiv+0xec>
 8000e5c:	eba2 0203 	sub.w	r2, r2, r3
 8000e60:	ea80 0c01 	eor.w	ip, r0, r1
 8000e64:	0249      	lsls	r1, r1, #9
 8000e66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6a:	d037      	beq.n	8000edc <__aeabi_fdiv+0x98>
 8000e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	bf38      	it	cc
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	bf24      	itt	cs
 8000e8e:	1a5b      	subcs	r3, r3, r1
 8000e90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e98:	bf24      	itt	cs
 8000e9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea6:	bf24      	itt	cs
 8000ea8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	bf18      	it	ne
 8000ec2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec6:	d1e0      	bne.n	8000e8a <__aeabi_fdiv+0x46>
 8000ec8:	2afd      	cmp	r2, #253	; 0xfd
 8000eca:	f63f af50 	bhi.w	8000d6e <__aeabi_fmul+0x92>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed4:	bf08      	it	eq
 8000ed6:	f020 0001 	biceq.w	r0, r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee4:	327f      	adds	r2, #127	; 0x7f
 8000ee6:	bfc2      	ittt	gt
 8000ee8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef0:	4770      	bxgt	lr
 8000ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	3a01      	subs	r2, #1
 8000efc:	e737      	b.n	8000d6e <__aeabi_fmul+0x92>
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xc2>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xda>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e795      	b.n	8000e5c <__aeabi_fdiv+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	d108      	bne.n	8000f4c <__aeabi_fdiv+0x108>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	f47f af7d 	bne.w	8000e3a <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	f47f af70 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e776      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	d104      	bne.n	8000f5c <__aeabi_fdiv+0x118>
 8000f52:	024b      	lsls	r3, r1, #9
 8000f54:	f43f af4c 	beq.w	8000df0 <__aeabi_fmul+0x114>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e76e      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1ca      	bne.n	8000efe <__aeabi_fdiv+0xba>
 8000f68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f6c:	f47f af5c 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f74:	f47f af3c 	bne.w	8000df0 <__aeabi_fmul+0x114>
 8000f78:	e75f      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f7a:	bf00      	nop

08000f7c <__gesf2>:
 8000f7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f80:	e006      	b.n	8000f90 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__lesf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	e002      	b.n	8000f90 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__cmpsf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa0:	bf18      	it	ne
 8000fa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fa6:	d011      	beq.n	8000fcc <__cmpsf2+0x40>
 8000fa8:	b001      	add	sp, #4
 8000faa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fae:	bf18      	it	ne
 8000fb0:	ea90 0f01 	teqne	r0, r1
 8000fb4:	bf58      	it	pl
 8000fb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fba:	bf88      	it	hi
 8000fbc:	17c8      	asrhi	r0, r1, #31
 8000fbe:	bf38      	it	cc
 8000fc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc4:	bf18      	it	ne
 8000fc6:	f040 0001 	orrne.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd0:	d102      	bne.n	8000fd8 <__cmpsf2+0x4c>
 8000fd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fd6:	d105      	bne.n	8000fe4 <__cmpsf2+0x58>
 8000fd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fdc:	d1e4      	bne.n	8000fa8 <__cmpsf2+0x1c>
 8000fde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe2:	d0e1      	beq.n	8000fa8 <__cmpsf2+0x1c>
 8000fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <__aeabi_cfrcmple>:
 8000fec:	4684      	mov	ip, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4661      	mov	r1, ip
 8000ff2:	e7ff      	b.n	8000ff4 <__aeabi_cfcmpeq>

08000ff4 <__aeabi_cfcmpeq>:
 8000ff4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ff6:	f7ff ffc9 	bl	8000f8c <__cmpsf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	bf48      	it	mi
 8000ffe:	f110 0f00 	cmnmi.w	r0, #0
 8001002:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001004 <__aeabi_fcmpeq>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff fff4 	bl	8000ff4 <__aeabi_cfcmpeq>
 800100c:	bf0c      	ite	eq
 800100e:	2001      	moveq	r0, #1
 8001010:	2000      	movne	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmplt>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffea 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001020:	bf34      	ite	cc
 8001022:	2001      	movcc	r0, #1
 8001024:	2000      	movcs	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmple>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffe0 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001034:	bf94      	ite	ls
 8001036:	2001      	movls	r0, #1
 8001038:	2000      	movhi	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmpge>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffd2 	bl	8000fec <__aeabi_cfrcmple>
 8001048:	bf94      	ite	ls
 800104a:	2001      	movls	r0, #1
 800104c:	2000      	movhi	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmpgt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffc8 	bl	8000fec <__aeabi_cfrcmple>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_InitTick+0x3c>)
{
 80010b8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ba:	7818      	ldrb	r0, [r3, #0]
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_InitTick+0x40>)
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010cc:	f000 fb1a 	bl	8001704 <HAL_SYSTICK_Config>
 80010d0:	4604      	mov	r4, r0
 80010d2:	b958      	cbnz	r0, 80010ec <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	2d0f      	cmp	r5, #15
 80010d6:	d809      	bhi.n	80010ec <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	4602      	mov	r2, r0
 80010da:	4629      	mov	r1, r5
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 fad0 	bl	8001684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_InitTick+0x44>)
 80010e6:	4620      	mov	r0, r4
 80010e8:	601d      	str	r5, [r3, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010ec:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x20>)
{
 80010fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110a:	f000 faa9 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ffd0 	bl	80010b4 <HAL_InitTick>
  HAL_MspInit();
 8001114:	f003 f9c6 	bl	80044a4 <HAL_MspInit>
}
 8001118:	2000      	movs	r0, #0
 800111a:	bd08      	pop	{r3, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_IncTick+0x10>)
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_IncTick+0x14>)
 8001124:	6811      	ldr	r1, [r2, #0]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	440b      	add	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001a0 	.word	0x200001a0
 8001134:	20000000 	.word	0x20000000

08001138 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001138:	4b01      	ldr	r3, [pc, #4]	; (8001140 <HAL_GetTick+0x8>)
 800113a:	6818      	ldr	r0, [r3, #0]
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001a0 	.word	0x200001a0

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fff6 	bl	8001138 <HAL_GetTick>
 800114c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001150:	bf1e      	ittt	ne
 8001152:	4b04      	ldrne	r3, [pc, #16]	; (8001164 <HAL_Delay+0x20>)
 8001154:	781b      	ldrbne	r3, [r3, #0]
 8001156:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	1b40      	subs	r0, r0, r5
 800115e:	4284      	cmp	r4, r0
 8001160:	d8fa      	bhi.n	8001158 <HAL_Delay+0x14>
  {
  }
}
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	20000000 	.word	0x20000000

08001168 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800116a:	2600      	movs	r6, #0
{
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001170:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001172:	f7ff ffe1 	bl	8001138 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001176:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001178:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	05d2      	lsls	r2, r2, #23
 800117e:	d508      	bpl.n	8001192 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8001180:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001184:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800118e:	b003      	add	sp, #12
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	05d6      	lsls	r6, r2, #23
 8001196:	d403      	bmi.n	80011a0 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800119a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800119e:	d03b      	beq.n	8001218 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_ADC_PollForConversion+0x124>)
 80011a2:	2002      	movs	r0, #2
 80011a4:	681e      	ldr	r6, [r3, #0]
 80011a6:	f001 facd 	bl	8002744 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	4a38      	ldr	r2, [pc, #224]	; (8001290 <HAL_ADC_PollForConversion+0x128>)
 80011ae:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011b0:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011b4:	4211      	tst	r1, r2
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <HAL_ADC_PollForConversion+0x12c>)
 80011b8:	d14f      	bne.n	800125a <HAL_ADC_PollForConversion+0xf2>
 80011ba:	68de      	ldr	r6, [r3, #12]
 80011bc:	4936      	ldr	r1, [pc, #216]	; (8001298 <HAL_ADC_PollForConversion+0x130>)
 80011be:	420e      	tst	r6, r1
 80011c0:	d14b      	bne.n	800125a <HAL_ADC_PollForConversion+0xf2>
 80011c2:	6919      	ldr	r1, [r3, #16]
 80011c4:	4211      	tst	r1, r2
 80011c6:	d159      	bne.n	800127c <HAL_ADC_PollForConversion+0x114>
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_ADC_PollForConversion+0x134>)
 80011cc:	421a      	tst	r2, r3
 80011ce:	bf14      	ite	ne
 80011d0:	2329      	movne	r3, #41	; 0x29
 80011d2:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80011d4:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	429e      	cmp	r6, r3
 80011dc:	d920      	bls.n	8001220 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 80011de:	1c6b      	adds	r3, r5, #1
 80011e0:	d005      	beq.n	80011ee <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011e2:	b15d      	cbz	r5, 80011fc <HAL_ADC_PollForConversion+0x94>
 80011e4:	f7ff ffa8 	bl	8001138 <HAL_GetTick>
 80011e8:	1bc0      	subs	r0, r0, r7
 80011ea:	4285      	cmp	r5, r0
 80011ec:	d306      	bcc.n	80011fc <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	e7f0      	b.n	80011d8 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 80011f6:	1c68      	adds	r0, r5, #1
 80011f8:	d00f      	beq.n	800121a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011fa:	b945      	cbnz	r5, 800120e <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001206:	2300      	movs	r3, #0
 8001208:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800120c:	e7bf      	b.n	800118e <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800120e:	f7ff ff93 	bl	8001138 <HAL_GetTick>
 8001212:	1bc0      	subs	r0, r0, r7
 8001214:	4285      	cmp	r5, r0
 8001216:	d3f1      	bcc.n	80011fc <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	0799      	lsls	r1, r3, #30
 800121e:	d5ea      	bpl.n	80011f6 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001220:	f06f 0312 	mvn.w	r3, #18
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001230:	6893      	ldr	r3, [r2, #8]
 8001232:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001236:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800123a:	d125      	bne.n	8001288 <HAL_ADC_PollForConversion+0x120>
 800123c:	68e3      	ldr	r3, [r4, #12]
 800123e:	bb1b      	cbnz	r3, 8001288 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001246:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001248:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800124a:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800124e:	d11b      	bne.n	8001288 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	62a3      	str	r3, [r4, #40]	; 0x28
 8001258:	e799      	b.n	800118e <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800125a:	6919      	ldr	r1, [r3, #16]
 800125c:	4211      	tst	r1, r2
 800125e:	d103      	bne.n	8001268 <HAL_ADC_PollForConversion+0x100>
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_ADC_PollForConversion+0x134>)
 8001264:	4211      	tst	r1, r2
 8001266:	d00b      	beq.n	8001280 <HAL_ADC_PollForConversion+0x118>
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_ADC_PollForConversion+0x138>)
 800126c:	4211      	tst	r1, r2
 800126e:	d109      	bne.n	8001284 <HAL_ADC_PollForConversion+0x11c>
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4213      	tst	r3, r2
 8001274:	bf14      	ite	ne
 8001276:	23fc      	movne	r3, #252	; 0xfc
 8001278:	2354      	moveq	r3, #84	; 0x54
 800127a:	e7ab      	b.n	80011d4 <HAL_ADC_PollForConversion+0x6c>
 800127c:	2329      	movs	r3, #41	; 0x29
 800127e:	e7a9      	b.n	80011d4 <HAL_ADC_PollForConversion+0x6c>
 8001280:	2354      	movs	r3, #84	; 0x54
 8001282:	e7a7      	b.n	80011d4 <HAL_ADC_PollForConversion+0x6c>
 8001284:	23fc      	movs	r3, #252	; 0xfc
 8001286:	e7a5      	b.n	80011d4 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8001288:	2000      	movs	r0, #0
 800128a:	e780      	b.n	800118e <HAL_ADC_PollForConversion+0x26>
 800128c:	200000a0 	.word	0x200000a0
 8001290:	24924924 	.word	0x24924924
 8001294:	12492492 	.word	0x12492492
 8001298:	00924924 	.word	0x00924924
 800129c:	00492492 	.word	0x00492492
 80012a0:	00249249 	.word	0x00249249

080012a4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012a4:	6803      	ldr	r3, [r0, #0]
 80012a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80012ac:	2300      	movs	r3, #0
{ 
 80012ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80012b0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d074      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0xf8>
 80012ba:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012bc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80012be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80012c2:	2d06      	cmp	r5, #6
 80012c4:	6802      	ldr	r2, [r0, #0]
 80012c6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80012ca:	680c      	ldr	r4, [r1, #0]
 80012cc:	d825      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012ce:	442b      	add	r3, r5
 80012d0:	251f      	movs	r5, #31
 80012d2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80012d4:	3b05      	subs	r3, #5
 80012d6:	409d      	lsls	r5, r3
 80012d8:	ea26 0505 	bic.w	r5, r6, r5
 80012dc:	fa04 f303 	lsl.w	r3, r4, r3
 80012e0:	432b      	orrs	r3, r5
 80012e2:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e4:	2c09      	cmp	r4, #9
 80012e6:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80012ea:	688d      	ldr	r5, [r1, #8]
 80012ec:	d92f      	bls.n	800134e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012ee:	2607      	movs	r6, #7
 80012f0:	4423      	add	r3, r4
 80012f2:	68d1      	ldr	r1, [r2, #12]
 80012f4:	3b1e      	subs	r3, #30
 80012f6:	409e      	lsls	r6, r3
 80012f8:	ea21 0106 	bic.w	r1, r1, r6
 80012fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001300:	430b      	orrs	r3, r1
 8001302:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001304:	f1a4 0310 	sub.w	r3, r4, #16
 8001308:	2b01      	cmp	r3, #1
 800130a:	d92b      	bls.n	8001364 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800130e:	2200      	movs	r2, #0
 8001310:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001314:	4618      	mov	r0, r3
 8001316:	b002      	add	sp, #8
 8001318:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800131a:	2d0c      	cmp	r5, #12
 800131c:	d80b      	bhi.n	8001336 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800131e:	442b      	add	r3, r5
 8001320:	251f      	movs	r5, #31
 8001322:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001324:	3b23      	subs	r3, #35	; 0x23
 8001326:	409d      	lsls	r5, r3
 8001328:	ea26 0505 	bic.w	r5, r6, r5
 800132c:	fa04 f303 	lsl.w	r3, r4, r3
 8001330:	432b      	orrs	r3, r5
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	e7d6      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001336:	442b      	add	r3, r5
 8001338:	251f      	movs	r5, #31
 800133a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800133c:	3b41      	subs	r3, #65	; 0x41
 800133e:	409d      	lsls	r5, r3
 8001340:	ea26 0505 	bic.w	r5, r6, r5
 8001344:	fa04 f303 	lsl.w	r3, r4, r3
 8001348:	432b      	orrs	r3, r5
 800134a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800134c:	e7ca      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800134e:	2607      	movs	r6, #7
 8001350:	6911      	ldr	r1, [r2, #16]
 8001352:	4423      	add	r3, r4
 8001354:	409e      	lsls	r6, r3
 8001356:	ea21 0106 	bic.w	r1, r1, r6
 800135a:	fa05 f303 	lsl.w	r3, r5, r3
 800135e:	430b      	orrs	r3, r1
 8001360:	6113      	str	r3, [r2, #16]
 8001362:	e7cf      	b.n	8001304 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_ADC_ConfigChannel+0xfc>)
 8001366:	429a      	cmp	r2, r3
 8001368:	d116      	bne.n	8001398 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800136a:	6893      	ldr	r3, [r2, #8]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	d4cd      	bmi.n	800130c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001370:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001372:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001378:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800137a:	d1c7      	bne.n	800130c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_ADC_ConfigChannel+0x100>)
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_ADC_ConfigChannel+0x104>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	fbb3 f2f2 	udiv	r2, r3, r2
 8001386:	230a      	movs	r3, #10
 8001388:	4353      	muls	r3, r2
            wait_loop_index--;
 800138a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800138c:	9b01      	ldr	r3, [sp, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0bc      	beq.n	800130c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8001392:	9b01      	ldr	r3, [sp, #4]
 8001394:	3b01      	subs	r3, #1
 8001396:	e7f8      	b.n	800138a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001398:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e7b4      	b.n	800130e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80013a4:	2302      	movs	r3, #2
 80013a6:	e7b5      	b.n	8001314 <HAL_ADC_ConfigChannel+0x68>
 80013a8:	40012400 	.word	0x40012400
 80013ac:	200000a0 	.word	0x200000a0
 80013b0:	000f4240 	.word	0x000f4240

080013b4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80013b4:	2300      	movs	r3, #0
{
 80013b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80013b8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ba:	6803      	ldr	r3, [r0, #0]
{
 80013bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	07d2      	lsls	r2, r2, #31
 80013c2:	d502      	bpl.n	80013ca <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
}
 80013c6:	b002      	add	sp, #8
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <ADC_Enable+0x68>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <ADC_Enable+0x6c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80013dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80013de:	9b01      	ldr	r3, [sp, #4]
 80013e0:	b9c3      	cbnz	r3, 8001414 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80013e2:	f7ff fea9 	bl	8001138 <HAL_GetTick>
 80013e6:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	689d      	ldr	r5, [r3, #8]
 80013ec:	f015 0501 	ands.w	r5, r5, #1
 80013f0:	d1e8      	bne.n	80013c4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013f2:	f7ff fea1 	bl	8001138 <HAL_GetTick>
 80013f6:	1b80      	subs	r0, r0, r6
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f5      	bls.n	80013e8 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80013fe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800140a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001412:	e7d8      	b.n	80013c6 <ADC_Enable+0x12>
      wait_loop_index--;
 8001414:	9b01      	ldr	r3, [sp, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	e7e0      	b.n	80013dc <ADC_Enable+0x28>
 800141a:	bf00      	nop
 800141c:	200000a0 	.word	0x200000a0
 8001420:	000f4240 	.word	0x000f4240

08001424 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001424:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001428:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800142a:	2b01      	cmp	r3, #1
{
 800142c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800142e:	d054      	beq.n	80014da <HAL_ADC_Start+0xb6>
 8001430:	2301      	movs	r3, #1
 8001432:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001436:	f7ff ffbd 	bl	80013b4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800143a:	2800      	cmp	r0, #0
 800143c:	d149      	bne.n	80014d2 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800143e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	4293      	cmp	r3, r2
 8001454:	d104      	bne.n	8001460 <HAL_ADC_Start+0x3c>
 8001456:	4923      	ldr	r1, [pc, #140]	; (80014e4 <HAL_ADC_Start+0xc0>)
 8001458:	684a      	ldr	r2, [r1, #4]
 800145a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800145e:	d12e      	bne.n	80014be <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001462:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001466:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001468:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800146a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800146c:	bf41      	itttt	mi
 800146e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8001470:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001474:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001478:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800147a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800147c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001480:	bf1c      	itt	ne
 8001482:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001484:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001488:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800148a:	2200      	movs	r2, #0
 800148c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001490:	f06f 0202 	mvn.w	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800149c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80014a0:	d113      	bne.n	80014ca <HAL_ADC_Start+0xa6>
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_ADC_Start+0xbc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014a8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80014ac:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ae:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80014b2:	d10a      	bne.n	80014ca <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014c4:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014c6:	684a      	ldr	r2, [r1, #4]
 80014c8:	e7cf      	b.n	800146a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014d0:	e7f3      	b.n	80014ba <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80014d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80014da:	2002      	movs	r0, #2
}
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	bf00      	nop
 80014e0:	40012800 	.word	0x40012800
 80014e4:	40012400 	.word	0x40012400

080014e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014ea:	6803      	ldr	r3, [r0, #0]
{
 80014ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	07d2      	lsls	r2, r2, #31
 80014f2:	d401      	bmi.n	80014f8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001500:	f7ff fe1a 	bl	8001138 <HAL_GetTick>
 8001504:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	07db      	lsls	r3, r3, #31
 800150c:	d5f2      	bpl.n	80014f4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800150e:	f7ff fe13 	bl	8001138 <HAL_GetTick>
 8001512:	1b40      	subs	r0, r0, r5
 8001514:	2802      	cmp	r0, #2
 8001516:	d9f6      	bls.n	8001506 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800152a:	bd38      	pop	{r3, r4, r5, pc}

0800152c <HAL_ADC_Init>:
{
 800152c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800152e:	4604      	mov	r4, r0
 8001530:	2800      	cmp	r0, #0
 8001532:	d071      	beq.n	8001618 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001534:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001536:	b923      	cbnz	r3, 8001542 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001538:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800153a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800153e:	f003 f801 	bl	8004544 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff ffd0 	bl	80014e8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800154a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001550:	d164      	bne.n	800161c <HAL_ADC_Init+0xf0>
 8001552:	2800      	cmp	r0, #0
 8001554:	d162      	bne.n	800161c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001556:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800155c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	f023 0302 	bic.w	r3, r3, #2
 8001562:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001566:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001568:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800156c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800156e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001572:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001576:	d038      	beq.n	80015ea <HAL_ADC_Init+0xbe>
 8001578:	2901      	cmp	r1, #1
 800157a:	bf14      	ite	ne
 800157c:	4606      	movne	r6, r0
 800157e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001582:	6965      	ldr	r5, [r4, #20]
 8001584:	2d01      	cmp	r5, #1
 8001586:	d107      	bne.n	8001598 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001588:	2b00      	cmp	r3, #0
 800158a:	d130      	bne.n	80015ee <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800158c:	69a3      	ldr	r3, [r4, #24]
 800158e:	3b01      	subs	r3, #1
 8001590:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001594:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001598:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800159a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800159e:	685d      	ldr	r5, [r3, #4]
 80015a0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80015a4:	ea45 0506 	orr.w	r5, r5, r6
 80015a8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80015aa:	689e      	ldr	r6, [r3, #8]
 80015ac:	4d1d      	ldr	r5, [pc, #116]	; (8001624 <HAL_ADC_Init+0xf8>)
 80015ae:	ea05 0506 	and.w	r5, r5, r6
 80015b2:	ea45 0502 	orr.w	r5, r5, r2
 80015b6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015b8:	d001      	beq.n	80015be <HAL_ADC_Init+0x92>
 80015ba:	2901      	cmp	r1, #1
 80015bc:	d120      	bne.n	8001600 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015be:	6921      	ldr	r1, [r4, #16]
 80015c0:	3901      	subs	r1, #1
 80015c2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80015c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80015c6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80015ca:	4329      	orrs	r1, r5
 80015cc:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_ADC_Init+0xfc>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d115      	bne.n	8001604 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	2300      	movs	r3, #0
 80015da:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80015dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015ea:	460e      	mov	r6, r1
 80015ec:	e7c9      	b.n	8001582 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015fe:	e7cb      	b.n	8001598 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001600:	2100      	movs	r1, #0
 8001602:	e7df      	b.n	80015c4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001606:	f023 0312 	bic.w	r3, r3, #18
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
}
 800161a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	62a3      	str	r3, [r4, #40]	; 0x28
 8001622:	e7f9      	b.n	8001618 <HAL_ADC_Init+0xec>
 8001624:	ffe1f7fd 	.word	0xffe1f7fd
 8001628:	ff1f0efe 	.word	0xff1f0efe

0800162c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800162c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001630:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001632:	2b01      	cmp	r3, #1
{
 8001634:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001636:	d011      	beq.n	800165c <HAL_ADC_Stop+0x30>
 8001638:	2301      	movs	r3, #1
 800163a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800163e:	f7ff ff53 	bl	80014e8 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8001642:	b938      	cbnz	r0, 8001654 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001646:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001654:	2300      	movs	r3, #0
 8001656:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 800165a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800165c:	2002      	movs	r0, #2
}
 800165e:	bd10      	pop	{r4, pc}

08001660 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001662:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001666:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800167a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800167c:	60d3      	str	r3, [r2, #12]
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b530      	push	{r4, r5, lr}
 8001688:	68dc      	ldr	r4, [r3, #12]
 800168a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	2b04      	cmp	r3, #4
 8001696:	bf28      	it	cs
 8001698:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a0:	bf98      	it	ls
 80016a2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	fa05 f303 	lsl.w	r3, r5, r3
 80016a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ac:	bf88      	it	hi
 80016ae:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4019      	ands	r1, r3
 80016b2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	fa05 f404 	lsl.w	r4, r5, r4
 80016b8:	3c01      	subs	r4, #1
 80016ba:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016bc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016be:	ea42 0201 	orr.w	r2, r2, r1
 80016c2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	bfaf      	iteee	ge
 80016c8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	4b06      	ldrlt	r3, [pc, #24]	; (80016e8 <HAL_NVIC_SetPriority+0x64>)
 80016ce:	f000 000f 	andlt.w	r0, r0, #15
 80016d2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	bfa5      	ittet	ge
 80016d6:	b2d2      	uxtbge	r2, r2
 80016d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016e2:	bd30      	pop	{r4, r5, pc}
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	e000ed14 	.word	0xe000ed14

080016ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016ec:	2301      	movs	r3, #1
 80016ee:	0942      	lsrs	r2, r0, #5
 80016f0:	f000 001f 	and.w	r0, r0, #31
 80016f4:	fa03 f000 	lsl.w	r0, r3, r0
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <HAL_NVIC_EnableIRQ+0x14>)
 80016fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	3801      	subs	r0, #1
 8001706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800170a:	d20a      	bcs.n	8001722 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001732:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	bf0c      	ite	eq
 8001738:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800173c:	f022 0204 	bicne.w	r2, r2, #4
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	4770      	bx	lr
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001748:	4770      	bx	lr

0800174a <HAL_SYSTICK_IRQHandler>:
{
 800174a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800174c:	f7ff fffc 	bl	8001748 <HAL_SYSTICK_Callback>
 8001750:	bd08      	pop	{r3, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001758:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800175a:	4616      	mov	r6, r2
 800175c:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001904 <HAL_GPIO_Init+0x1b0>
 8001762:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001908 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001766:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800176c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001770:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001774:	45a0      	cmp	r8, r4
 8001776:	d17f      	bne.n	8001878 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001778:	684d      	ldr	r5, [r1, #4]
 800177a:	2d12      	cmp	r5, #18
 800177c:	f000 80af 	beq.w	80018de <HAL_GPIO_Init+0x18a>
 8001780:	f200 8088 	bhi.w	8001894 <HAL_GPIO_Init+0x140>
 8001784:	2d02      	cmp	r5, #2
 8001786:	f000 80a7 	beq.w	80018d8 <HAL_GPIO_Init+0x184>
 800178a:	d87c      	bhi.n	8001886 <HAL_GPIO_Init+0x132>
 800178c:	2d00      	cmp	r5, #0
 800178e:	f000 808e 	beq.w	80018ae <HAL_GPIO_Init+0x15a>
 8001792:	2d01      	cmp	r5, #1
 8001794:	f000 809e 	beq.w	80018d4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001798:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	2cff      	cmp	r4, #255	; 0xff
 800179e:	bf93      	iteet	ls
 80017a0:	4682      	movls	sl, r0
 80017a2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80017a6:	3d08      	subhi	r5, #8
 80017a8:	f8d0 b000 	ldrls.w	fp, [r0]
 80017ac:	bf92      	itee	ls
 80017ae:	00b5      	lslls	r5, r6, #2
 80017b0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80017b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b6:	fa09 f805 	lsl.w	r8, r9, r5
 80017ba:	ea2b 0808 	bic.w	r8, fp, r8
 80017be:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c2:	bf88      	it	hi
 80017c4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	ea48 0505 	orr.w	r5, r8, r5
 80017cc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80017d4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80017d8:	d04e      	beq.n	8001878 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017da:	4d47      	ldr	r5, [pc, #284]	; (80018f8 <HAL_GPIO_Init+0x1a4>)
 80017dc:	4f46      	ldr	r7, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x1a4>)
 80017de:	69ad      	ldr	r5, [r5, #24]
 80017e0:	f026 0803 	bic.w	r8, r6, #3
 80017e4:	f045 0501 	orr.w	r5, r5, #1
 80017e8:	61bd      	str	r5, [r7, #24]
 80017ea:	69bd      	ldr	r5, [r7, #24]
 80017ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80017f0:	f005 0501 	and.w	r5, r5, #1
 80017f4:	9501      	str	r5, [sp, #4]
 80017f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017fa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001800:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001804:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001808:	fa09 f90b 	lsl.w	r9, r9, fp
 800180c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001810:	4d3a      	ldr	r5, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x1a8>)
 8001812:	42a8      	cmp	r0, r5
 8001814:	d068      	beq.n	80018e8 <HAL_GPIO_Init+0x194>
 8001816:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800181a:	42a8      	cmp	r0, r5
 800181c:	d066      	beq.n	80018ec <HAL_GPIO_Init+0x198>
 800181e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001822:	42a8      	cmp	r0, r5
 8001824:	d064      	beq.n	80018f0 <HAL_GPIO_Init+0x19c>
 8001826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800182a:	42a8      	cmp	r0, r5
 800182c:	bf0c      	ite	eq
 800182e:	2503      	moveq	r5, #3
 8001830:	2504      	movne	r5, #4
 8001832:	fa05 f50b 	lsl.w	r5, r5, fp
 8001836:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800183a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001844:	bf14      	ite	ne
 8001846:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001848:	43a5      	biceq	r5, r4
 800184a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001852:	bf14      	ite	ne
 8001854:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001856:	43a5      	biceq	r5, r4
 8001858:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001860:	bf14      	ite	ne
 8001862:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001864:	43a5      	biceq	r5, r4
 8001866:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001868:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800186e:	bf14      	ite	ne
 8001870:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001872:	ea25 0404 	biceq.w	r4, r5, r4
 8001876:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001878:	3601      	adds	r6, #1
 800187a:	2e10      	cmp	r6, #16
 800187c:	f47f af73 	bne.w	8001766 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001880:	b003      	add	sp, #12
 8001882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001886:	2d03      	cmp	r5, #3
 8001888:	d022      	beq.n	80018d0 <HAL_GPIO_Init+0x17c>
 800188a:	2d11      	cmp	r5, #17
 800188c:	d184      	bne.n	8001798 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800188e:	68ca      	ldr	r2, [r1, #12]
 8001890:	3204      	adds	r2, #4
          break;
 8001892:	e781      	b.n	8001798 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001894:	4f1a      	ldr	r7, [pc, #104]	; (8001900 <HAL_GPIO_Init+0x1ac>)
 8001896:	42bd      	cmp	r5, r7
 8001898:	d009      	beq.n	80018ae <HAL_GPIO_Init+0x15a>
 800189a:	d812      	bhi.n	80018c2 <HAL_GPIO_Init+0x16e>
 800189c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800190c <HAL_GPIO_Init+0x1b8>
 80018a0:	454d      	cmp	r5, r9
 80018a2:	d004      	beq.n	80018ae <HAL_GPIO_Init+0x15a>
 80018a4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80018a8:	454d      	cmp	r5, r9
 80018aa:	f47f af75 	bne.w	8001798 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	688a      	ldr	r2, [r1, #8]
 80018b0:	b1c2      	cbz	r2, 80018e4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80018b4:	bf0c      	ite	eq
 80018b6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80018ba:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018be:	2208      	movs	r2, #8
 80018c0:	e76a      	b.n	8001798 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80018c2:	4575      	cmp	r5, lr
 80018c4:	d0f3      	beq.n	80018ae <HAL_GPIO_Init+0x15a>
 80018c6:	4565      	cmp	r5, ip
 80018c8:	d0f1      	beq.n	80018ae <HAL_GPIO_Init+0x15a>
 80018ca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001910 <HAL_GPIO_Init+0x1bc>
 80018ce:	e7eb      	b.n	80018a8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2200      	movs	r2, #0
 80018d2:	e761      	b.n	8001798 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	68ca      	ldr	r2, [r1, #12]
          break;
 80018d6:	e75f      	b.n	8001798 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d8:	68ca      	ldr	r2, [r1, #12]
 80018da:	3208      	adds	r2, #8
          break;
 80018dc:	e75c      	b.n	8001798 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018de:	68ca      	ldr	r2, [r1, #12]
 80018e0:	320c      	adds	r2, #12
          break;
 80018e2:	e759      	b.n	8001798 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e4:	2204      	movs	r2, #4
 80018e6:	e757      	b.n	8001798 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e8:	2500      	movs	r5, #0
 80018ea:	e7a2      	b.n	8001832 <HAL_GPIO_Init+0xde>
 80018ec:	2501      	movs	r5, #1
 80018ee:	e7a0      	b.n	8001832 <HAL_GPIO_Init+0xde>
 80018f0:	2502      	movs	r5, #2
 80018f2:	e79e      	b.n	8001832 <HAL_GPIO_Init+0xde>
 80018f4:	40010400 	.word	0x40010400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800
 8001900:	10210000 	.word	0x10210000
 8001904:	10310000 	.word	0x10310000
 8001908:	10320000 	.word	0x10320000
 800190c:	10110000 	.word	0x10110000
 8001910:	10220000 	.word	0x10220000

08001914 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001914:	6883      	ldr	r3, [r0, #8]
 8001916:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001918:	bf14      	ite	ne
 800191a:	2001      	movne	r0, #1
 800191c:	2000      	moveq	r0, #0
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	b10a      	cbz	r2, 8001926 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	6101      	str	r1, [r0, #16]
 8001924:	4770      	bx	lr
 8001926:	0409      	lsls	r1, r1, #16
 8001928:	e7fb      	b.n	8001922 <HAL_GPIO_WritePin+0x2>

0800192a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800192a:	68c3      	ldr	r3, [r0, #12]
 800192c:	4059      	eors	r1, r3
 800192e:	60c1      	str	r1, [r0, #12]
 8001930:	4770      	bx	lr

08001932 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	6953      	ldr	r3, [r2, #20]
 8001936:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800193a:	d00d      	beq.n	8001958 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001940:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001942:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001944:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001946:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001950:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
 8001956:	4770      	bx	lr
  }
  return HAL_OK;
 8001958:	4618      	mov	r0, r3
}
 800195a:	4770      	bx	lr

0800195c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800195c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001960:	4604      	mov	r4, r0
 8001962:	4617      	mov	r7, r2
 8001964:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001966:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800196a:	b28e      	uxth	r6, r1
 800196c:	6825      	ldr	r5, [r4, #0]
 800196e:	f1b8 0f01 	cmp.w	r8, #1
 8001972:	bf0c      	ite	eq
 8001974:	696b      	ldreq	r3, [r5, #20]
 8001976:	69ab      	ldrne	r3, [r5, #24]
 8001978:	ea36 0303 	bics.w	r3, r6, r3
 800197c:	bf14      	ite	ne
 800197e:	2001      	movne	r0, #1
 8001980:	2000      	moveq	r0, #0
 8001982:	b908      	cbnz	r0, 8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001988:	696b      	ldr	r3, [r5, #20]
 800198a:	055a      	lsls	r2, r3, #21
 800198c:	d512      	bpl.n	80019b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800198e:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001990:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001998:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800199c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800199e:	2304      	movs	r3, #4
 80019a0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	2300      	movs	r3, #0
      return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80019a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80019ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80019b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019b4:	1c7b      	adds	r3, r7, #1
 80019b6:	d0d9      	beq.n	800196c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019b8:	b94f      	cbnz	r7, 80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80019bc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019be:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80019c8:	2003      	movs	r0, #3
 80019ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019ce:	f7ff fbb3 	bl	8001138 <HAL_GetTick>
 80019d2:	eba0 0009 	sub.w	r0, r0, r9
 80019d6:	4287      	cmp	r7, r0
 80019d8:	d2c8      	bcs.n	800196c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80019da:	e7ee      	b.n	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080019dc <I2C_WaitOnFlagUntilTimeout>:
{
 80019dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e0:	4604      	mov	r4, r0
 80019e2:	4690      	mov	r8, r2
 80019e4:	461f      	mov	r7, r3
 80019e6:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80019e8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80019ec:	b28d      	uxth	r5, r1
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f1b9 0f01 	cmp.w	r9, #1
 80019f4:	bf0c      	ite	eq
 80019f6:	695b      	ldreq	r3, [r3, #20]
 80019f8:	699b      	ldrne	r3, [r3, #24]
 80019fa:	ea35 0303 	bics.w	r3, r5, r3
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	4543      	cmp	r3, r8
 8001a06:	d002      	beq.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001a08:	2000      	movs	r0, #0
}
 8001a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a0e:	1c7b      	adds	r3, r7, #1
 8001a10:	d0ed      	beq.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a12:	b95f      	cbnz	r7, 8001a2c <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a14:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001a16:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a18:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a22:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a2c:	f7ff fb84 	bl	8001138 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	4287      	cmp	r7, r0
 8001a34:	d2db      	bcs.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x12>
 8001a36:	e7ed      	b.n	8001a14 <I2C_WaitOnFlagUntilTimeout+0x38>

08001a38 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	d501      	bpl.n	8001a4c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001a48:	2000      	movs	r0, #0
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff ff70 	bl	8001932 <I2C_IsAcknowledgeFailed>
 8001a52:	b9a8      	cbnz	r0, 8001a80 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001a54:	1c6a      	adds	r2, r5, #1
 8001a56:	d0f3      	beq.n	8001a40 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a58:	b965      	cbnz	r5, 8001a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001a5c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a64:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001a66:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a68:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a74:	f7ff fb60 	bl	8001138 <HAL_GetTick>
 8001a78:	1b80      	subs	r0, r0, r6
 8001a7a:	4285      	cmp	r5, r0
 8001a7c:	d2e0      	bcs.n	8001a40 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001a7e:	e7ec      	b.n	8001a5a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
}
 8001a82:	bd70      	pop	{r4, r5, r6, pc}

08001a84 <I2C_RequestMemoryWrite>:
{
 8001a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001a88:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a8a:	6802      	ldr	r2, [r0, #0]
{
 8001a8c:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a8e:	6813      	ldr	r3, [r2, #0]
{
 8001a90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
{
 8001a98:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a9a:	9600      	str	r6, [sp, #0]
 8001a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001aa4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa6:	f7ff ff99 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	b968      	cbnz	r0, 8001ac8 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001ab2:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ab6:	4633      	mov	r3, r6
 8001ab8:	491a      	ldr	r1, [pc, #104]	; (8001b24 <I2C_RequestMemoryWrite+0xa0>)
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff ff4e 	bl	800195c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac0:	b130      	cbz	r0, 8001ad0 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d018      	beq.n	8001afa <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
}
 8001aca:	b004      	add	sp, #16
 8001acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	9003      	str	r0, [sp, #12]
 8001ad4:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad8:	9203      	str	r2, [sp, #12]
 8001ada:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001adc:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ade:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae4:	f7ff ffa8 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae8:	b148      	cbz	r0, 8001afe <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d1eb      	bne.n	8001ac8 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af8:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7e5      	b.n	8001aca <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001afe:	f1b8 0f01 	cmp.w	r8, #1
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	d102      	bne.n	8001b0c <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b06:	b2ed      	uxtb	r5, r5
 8001b08:	611d      	str	r5, [r3, #16]
 8001b0a:	e7de      	b.n	8001aca <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b0c:	0a2a      	lsrs	r2, r5, #8
 8001b0e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b12:	4632      	mov	r2, r6
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ff8f 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1e5      	bne.n	8001aea <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	e7f1      	b.n	8001b06 <I2C_RequestMemoryWrite+0x82>
 8001b22:	bf00      	nop
 8001b24:	00010002 	.word	0x00010002

08001b28 <I2C_RequestMemoryRead>:
{
 8001b28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001b2c:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b2e:	6803      	ldr	r3, [r0, #0]
{
 8001b30:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b32:	681a      	ldr	r2, [r3, #0]
{
 8001b34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b3c:	681a      	ldr	r2, [r3, #0]
{
 8001b3e:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b44:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b4a:	9500      	str	r5, [sp, #0]
 8001b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b4e:	2200      	movs	r2, #0
{
 8001b50:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b52:	f7ff ff43 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001b56:	b980      	cbnz	r0, 8001b7a <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	b2ff      	uxtb	r7, r7
 8001b5c:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001b60:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b62:	492d      	ldr	r1, [pc, #180]	; (8001c18 <I2C_RequestMemoryRead+0xf0>)
 8001b64:	462b      	mov	r3, r5
 8001b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff fef7 	bl	800195c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b6e:	b140      	cbz	r0, 8001b82 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d101      	bne.n	8001b7a <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e000      	b.n	8001b7c <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
}
 8001b7c:	b004      	add	sp, #16
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	9003      	str	r0, [sp, #12]
 8001b86:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b88:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	9203      	str	r2, [sp, #12]
 8001b8c:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b90:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b94:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	f7ff ff4f 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b9a:	b140      	cbz	r0, 8001bae <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d1eb      	bne.n	8001b7a <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e7e3      	b.n	8001b76 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bae:	f1b8 0f01 	cmp.w	r8, #1
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	d124      	bne.n	8001c00 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb6:	b2f6      	uxtb	r6, r6
 8001bb8:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bba:	462a      	mov	r2, r5
 8001bbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff ff3a 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d1e8      	bne.n	8001b9c <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bca:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bce:	680b      	ldr	r3, [r1, #0]
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bd6:	9500      	str	r5, [sp, #0]
 8001bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bde:	f7ff fefd 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d1c9      	bne.n	8001b7a <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	f047 0701 	orr.w	r7, r7, #1
 8001bec:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	4909      	ldr	r1, [pc, #36]	; (8001c18 <I2C_RequestMemoryRead+0xf0>)
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff feb1 	bl	800195c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d1b8      	bne.n	8001b70 <I2C_RequestMemoryRead+0x48>
 8001bfe:	e7bd      	b.n	8001b7c <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c00:	0a32      	lsrs	r2, r6, #8
 8001c02:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c06:	462a      	mov	r2, r5
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff ff15 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d1c4      	bne.n	8001b9c <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	e7cf      	b.n	8001bb6 <I2C_RequestMemoryRead+0x8e>
 8001c16:	bf00      	nop
 8001c18:	00010002 	.word	0x00010002

08001c1c <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
 8001c22:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c24:	6820      	ldr	r0, [r4, #0]
 8001c26:	6943      	ldr	r3, [r0, #20]
 8001c28:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001c2c:	d001      	beq.n	8001c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001c2e:	2000      	movs	r0, #0
}
 8001c30:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c32:	6942      	ldr	r2, [r0, #20]
 8001c34:	06d2      	lsls	r2, r2, #27
 8001c36:	d50b      	bpl.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c38:	f06f 0210 	mvn.w	r2, #16
 8001c3c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001c3e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c46:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001c48:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001c4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c50:	b95d      	cbnz	r5, 8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c54:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001c62:	2300      	movs	r3, #0
 8001c64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c6a:	f7ff fa65 	bl	8001138 <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	4285      	cmp	r5, r0
 8001c72:	d2d7      	bcs.n	8001c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001c74:	e7ed      	b.n	8001c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001c76 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001c76:	b570      	push	{r4, r5, r6, lr}
 8001c78:	4604      	mov	r4, r0
 8001c7a:	460d      	mov	r5, r1
 8001c7c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	075b      	lsls	r3, r3, #29
 8001c84:	d501      	bpl.n	8001c8a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff fe51 	bl	8001932 <I2C_IsAcknowledgeFailed>
 8001c90:	b9a8      	cbnz	r0, 8001cbe <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001c92:	1c6a      	adds	r2, r5, #1
 8001c94:	d0f3      	beq.n	8001c7e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c96:	b965      	cbnz	r5, 8001cb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001c9a:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001ca4:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ca8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001cac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001cb2:	f7ff fa41 	bl	8001138 <HAL_GetTick>
 8001cb6:	1b80      	subs	r0, r0, r6
 8001cb8:	4285      	cmp	r5, r0
 8001cba:	d2e0      	bcs.n	8001c7e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001cbc:	e7ec      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
}
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001cc4 <HAL_I2C_Init>:
{
 8001cc4:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	b908      	cbnz	r0, 8001cce <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cd6:	b91b      	cbnz	r3, 8001ce0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001cd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001cdc:	f002 fc52 	bl	8004584 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001ce2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf0:	f000 fc90 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_I2C_Init+0xf0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d830      	bhi.n	8001d5e <HAL_I2C_Init+0x9a>
 8001cfc:	4a2e      	ldr	r2, [pc, #184]	; (8001db8 <HAL_I2C_Init+0xf4>)
 8001cfe:	4290      	cmp	r0, r2
 8001d00:	d9e3      	bls.n	8001cca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001d04:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d06:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001d0a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d0c:	3201      	adds	r2, #1
 8001d0e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_I2C_Init+0xf0>)
 8001d12:	3801      	subs	r0, #1
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d832      	bhi.n	8001d7e <HAL_I2C_Init+0xba>
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	bf38      	it	cc
 8001d28:	2304      	movcc	r3, #4
 8001d2a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2c:	6a22      	ldr	r2, [r4, #32]
 8001d2e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001d36:	68e2      	ldr	r2, [r4, #12]
 8001d38:	6923      	ldr	r3, [r4, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001d3e:	69a2      	ldr	r2, [r4, #24]
 8001d40:	6963      	ldr	r3, [r4, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d46:	680b      	ldr	r3, [r1, #0]
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001d5c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_I2C_Init+0xfc>)
 8001d60:	4290      	cmp	r0, r2
 8001d62:	d9b2      	bls.n	8001cca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d64:	4d15      	ldr	r5, [pc, #84]	; (8001dbc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d66:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001d6e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d70:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001d72:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d74:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d78:	fbb2 f2f5 	udiv	r2, r2, r5
 8001d7c:	e7c6      	b.n	8001d0c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d7e:	68a2      	ldr	r2, [r4, #8]
 8001d80:	b952      	cbnz	r2, 8001d98 <HAL_I2C_Init+0xd4>
 8001d82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d86:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d8a:	1c43      	adds	r3, r0, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	b16b      	cbz	r3, 8001dae <HAL_I2C_Init+0xea>
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d96:	e7c8      	b.n	8001d2a <HAL_I2C_Init+0x66>
 8001d98:	2219      	movs	r2, #25
 8001d9a:	4353      	muls	r3, r2
 8001d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da0:	1c43      	adds	r3, r0, #1
 8001da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da6:	b113      	cbz	r3, 8001dae <HAL_I2C_Init+0xea>
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	e7bd      	b.n	8001d2a <HAL_I2C_Init+0x66>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e7bb      	b.n	8001d2a <HAL_I2C_Init+0x66>
 8001db2:	bf00      	nop
 8001db4:	000186a0 	.word	0x000186a0
 8001db8:	001e847f 	.word	0x001e847f
 8001dbc:	000f4240 	.word	0x000f4240
 8001dc0:	003d08ff 	.word	0x003d08ff

08001dc4 <HAL_I2C_Mem_Write>:
{
 8001dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dc8:	4604      	mov	r4, r0
 8001dca:	469a      	mov	sl, r3
 8001dcc:	4688      	mov	r8, r1
 8001dce:	4691      	mov	r9, r2
 8001dd0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001dd2:	f7ff f9b1 	bl	8001138 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001dda:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d003      	beq.n	8001de8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001de0:	2002      	movs	r0, #2
}
 8001de2:	b002      	add	sp, #8
 8001de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de8:	9000      	str	r0, [sp, #0]
 8001dea:	2319      	movs	r3, #25
 8001dec:	2201      	movs	r2, #1
 8001dee:	493e      	ldr	r1, [pc, #248]	; (8001ee8 <HAL_I2C_Mem_Write+0x124>)
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff fdf3 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1f2      	bne.n	8001de0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001dfa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d0ee      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x1c>
 8001e02:	2301      	movs	r3, #1
 8001e04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e08:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0a:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e0c:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e0e:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e10:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e12:	bf58      	it	pl
 8001e14:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e16:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001e18:	bf5c      	itt	pl
 8001e1a:	f042 0201 	orrpl.w	r2, r2, #1
 8001e1e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e28:	2321      	movs	r3, #33	; 0x21
 8001e2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e36:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001e38:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e3a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e3e:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001e40:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e44:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e46:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e4a:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001e4c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e4e:	4653      	mov	r3, sl
 8001e50:	f7ff fe18 	bl	8001a84 <I2C_RequestMemoryWrite>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d02a      	beq.n	8001eae <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e5a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d107      	bne.n	8001e72 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001e62:	2001      	movs	r0, #1
 8001e64:	e7bd      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e66:	f7ff fde7 	bl	8001a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6a:	b120      	cbz	r0, 8001e76 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d034      	beq.n	8001edc <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e7b5      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e78:	6827      	ldr	r7, [r4, #0]
 8001e7a:	1c4b      	adds	r3, r1, #1
 8001e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e7e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001e80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e82:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e86:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001e90:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e92:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001e94:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e96:	d50a      	bpl.n	8001eae <HAL_I2C_Mem_Write+0xea>
 8001e98:	b148      	cbz	r0, 8001eae <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e9a:	1c8b      	adds	r3, r1, #2
 8001e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e9e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001ea0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ea2:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001ea4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001ea6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001eae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb0:	462a      	mov	r2, r5
 8001eb2:	4631      	mov	r1, r6
 8001eb4:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1d5      	bne.n	8001e66 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	f7ff fedc 	bl	8001c76 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d1d4      	bne.n	8001e6c <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ec2:	6822      	ldr	r2, [r4, #0]
 8001ec4:	6813      	ldr	r3, [r2, #0]
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001ece:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001eda:	e782      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001edc:	6822      	ldr	r2, [r4, #0]
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e7bc      	b.n	8001e62 <HAL_I2C_Mem_Write+0x9e>
 8001ee8:	00100002 	.word	0x00100002
 8001eec:	ffff0000 	.word	0xffff0000

08001ef0 <HAL_I2C_Mem_Read>:
{
 8001ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	469a      	mov	sl, r3
 8001efa:	460d      	mov	r5, r1
 8001efc:	4691      	mov	r9, r2
 8001efe:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001f00:	f7ff f91a 	bl	8001138 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001f08:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d004      	beq.n	8001f18 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001f0e:	2502      	movs	r5, #2
}
 8001f10:	4628      	mov	r0, r5
 8001f12:	b006      	add	sp, #24
 8001f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f18:	9000      	str	r0, [sp, #0]
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4981      	ldr	r1, [pc, #516]	; (8002124 <HAL_I2C_Mem_Read+0x234>)
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff fd5b 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d1f1      	bne.n	8001f0e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001f2a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d0ed      	beq.n	8001f0e <HAL_I2C_Mem_Read+0x1e>
 8001f32:	2301      	movs	r3, #1
 8001f34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f38:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3a:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3e:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f40:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f42:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f44:	bf58      	it	pl
 8001f46:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f48:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	bf5c      	itt	pl
 8001f4c:	f042 0201 	orrpl.w	r2, r2, #1
 8001f50:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f58:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f5a:	2322      	movs	r3, #34	; 0x22
 8001f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001f6c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f6e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f72:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001f74:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f78:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f7e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001f80:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f82:	4653      	mov	r3, sl
 8001f84:	f7ff fdd0 	bl	8001b28 <I2C_RequestMemoryRead>
 8001f88:	4605      	mov	r5, r0
 8001f8a:	b130      	cbz	r0, 8001f9a <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f8e:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d13d      	bne.n	8002012 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001f96:	2501      	movs	r5, #1
 8001f98:	e7ba      	b.n	8001f10 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001f9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	b992      	cbnz	r2, 8001fc6 <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	9202      	str	r2, [sp, #8]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	9202      	str	r2, [sp, #8]
 8001faa:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001fc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001fc4:	e7a4      	b.n	8001f10 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d125      	bne.n	8002016 <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	9003      	str	r0, [sp, #12]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	9203      	str	r2, [sp, #12]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	9203      	str	r2, [sp, #12]
 8001fe0:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fea:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fec:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800212c <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001ff0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0de      	beq.n	8001fb4 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d877      	bhi.n	80020ea <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d127      	bne.n	800204e <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ffe:	4632      	mov	r2, r6
 8002000:	4639      	mov	r1, r7
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fe0a 	bl	8001c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002008:	2800      	cmp	r0, #0
 800200a:	d03f      	beq.n	800208c <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800200c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800200e:	2b20      	cmp	r3, #32
 8002010:	d1c1      	bne.n	8001f96 <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002012:	2503      	movs	r5, #3
 8002014:	e77c      	b.n	8001f10 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002016:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002018:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800201a:	d10e      	bne.n	800203a <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800201c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002020:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002022:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	9004      	str	r0, [sp, #16]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	9204      	str	r2, [sp, #16]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	9204      	str	r2, [sp, #16]
 8002030:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002038:	e7d6      	b.n	8001fe8 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800203e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	9005      	str	r0, [sp, #20]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	9205      	str	r2, [sp, #20]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	9305      	str	r3, [sp, #20]
 800204a:	9b05      	ldr	r3, [sp, #20]
 800204c:	e7ce      	b.n	8001fec <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 800204e:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002050:	9600      	str	r6, [sp, #0]
 8002052:	463b      	mov	r3, r7
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4641      	mov	r1, r8
 800205a:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800205c:	d124      	bne.n	80020a8 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800205e:	f7ff fcbd 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8002062:	2800      	cmp	r0, #0
 8002064:	d1d5      	bne.n	8002012 <HAL_I2C_Mem_Read+0x122>
 8002066:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002070:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	1c51      	adds	r1, r2, #1
 8002078:	6261      	str	r1, [r4, #36]	; 0x24
 800207a:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800207c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800207e:	3b01      	subs	r3, #1
 8002080:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002084:	3b01      	subs	r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800208a:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	6262      	str	r2, [r4, #36]	; 0x24
 8002092:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002094:	6912      	ldr	r2, [r2, #16]
 8002096:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80020a6:	e7a3      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a8:	f7ff fc98 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4602      	mov	r2, r0
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d1af      	bne.n	8002012 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020b2:	6821      	ldr	r1, [r4, #0]
 80020b4:	680b      	ldr	r3, [r1, #0]
 80020b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ba:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020be:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c0:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	6261      	str	r1, [r4, #36]	; 0x24
 80020c6:	6821      	ldr	r1, [r4, #0]
 80020c8:	6909      	ldr	r1, [r1, #16]
 80020ca:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80020cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ce:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80020d0:	3b01      	subs	r3, #1
 80020d2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80020d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020de:	463b      	mov	r3, r7
 80020e0:	f7ff fc7c 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d0bf      	beq.n	8002068 <HAL_I2C_Mem_Read+0x178>
 80020e8:	e793      	b.n	8002012 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	4632      	mov	r2, r6
 80020ec:	4639      	mov	r1, r7
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff fd94 	bl	8001c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d189      	bne.n	800200c <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	6262      	str	r2, [r4, #36]	; 0x24
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	6912      	ldr	r2, [r2, #16]
 8002102:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002104:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002106:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002108:	3b01      	subs	r3, #1
 800210a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800210c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210e:	3b01      	subs	r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002114:	6953      	ldr	r3, [r2, #20]
 8002116:	075b      	lsls	r3, r3, #29
 8002118:	f57f af6a 	bpl.w	8001ff0 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800211c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	6261      	str	r1, [r4, #36]	; 0x24
 8002122:	e7b7      	b.n	8002094 <HAL_I2C_Mem_Read+0x1a4>
 8002124:	00100002 	.word	0x00100002
 8002128:	ffff0000 	.word	0xffff0000
 800212c:	00010004 	.word	0x00010004

08002130 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002130:	6803      	ldr	r3, [r0, #0]
{
 8002132:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	07db      	lsls	r3, r3, #31
{
 8002138:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	d410      	bmi.n	800215e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	079f      	lsls	r7, r3, #30
 8002140:	d45e      	bmi.n	8002200 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	0719      	lsls	r1, r3, #28
 8002146:	f100 8095 	bmi.w	8002274 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	075a      	lsls	r2, r3, #29
 800214e:	f100 80bf 	bmi.w	80022d0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002152:	69ea      	ldr	r2, [r5, #28]
 8002154:	2a00      	cmp	r2, #0
 8002156:	f040 812d 	bne.w	80023b4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800215a:	2000      	movs	r0, #0
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800215e:	4c90      	ldr	r4, [pc, #576]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d007      	beq.n	800217a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216a:	6863      	ldr	r3, [r4, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
 8002174:	6863      	ldr	r3, [r4, #4]
 8002176:	03de      	lsls	r6, r3, #15
 8002178:	d509      	bpl.n	800218e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	039c      	lsls	r4, r3, #14
 800217e:	d5dd      	bpl.n	800213c <HAL_RCC_OscConfig+0xc>
 8002180:	686b      	ldr	r3, [r5, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1da      	bne.n	800213c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
}
 8002188:	b002      	add	sp, #8
 800218a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	686b      	ldr	r3, [r5, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d110      	bne.n	80021b8 <HAL_RCC_OscConfig+0x88>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800219e:	f7fe ffcb 	bl	8001138 <HAL_GetTick>
 80021a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	0398      	lsls	r0, r3, #14
 80021a8:	d4c8      	bmi.n	800213c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021aa:	f7fe ffc5 	bl	8001138 <HAL_GetTick>
 80021ae:	1b80      	subs	r0, r0, r6
 80021b0:	2864      	cmp	r0, #100	; 0x64
 80021b2:	d9f7      	bls.n	80021a4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e7e7      	b.n	8002188 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b8:	b99b      	cbnz	r3, 80021e2 <HAL_RCC_OscConfig+0xb2>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021ca:	f7fe ffb5 	bl	8001138 <HAL_GetTick>
 80021ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	0399      	lsls	r1, r3, #14
 80021d4:	d5b2      	bpl.n	800213c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d6:	f7fe ffaf 	bl	8001138 <HAL_GetTick>
 80021da:	1b80      	subs	r0, r0, r6
 80021dc:	2864      	cmp	r0, #100	; 0x64
 80021de:	d9f7      	bls.n	80021d0 <HAL_RCC_OscConfig+0xa0>
 80021e0:	e7e8      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	d103      	bne.n	80021f2 <HAL_RCC_OscConfig+0xc2>
 80021ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ee:	6023      	str	r3, [r4, #0]
 80021f0:	e7d1      	b.n	8002196 <HAL_RCC_OscConfig+0x66>
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	e7cd      	b.n	800219c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002200:	4c67      	ldr	r4, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002202:	6863      	ldr	r3, [r4, #4]
 8002204:	f013 0f0c 	tst.w	r3, #12
 8002208:	d007      	beq.n	800221a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d110      	bne.n	8002236 <HAL_RCC_OscConfig+0x106>
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	03da      	lsls	r2, r3, #15
 8002218:	d40d      	bmi.n	8002236 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	079b      	lsls	r3, r3, #30
 800221e:	d502      	bpl.n	8002226 <HAL_RCC_OscConfig+0xf6>
 8002220:	692b      	ldr	r3, [r5, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d1af      	bne.n	8002186 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	696a      	ldr	r2, [r5, #20]
 800222a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800222e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	e785      	b.n	8002142 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002236:	692a      	ldr	r2, [r5, #16]
 8002238:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <HAL_RCC_OscConfig+0x274>)
 800223a:	b16a      	cbz	r2, 8002258 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002240:	f7fe ff7a 	bl	8001138 <HAL_GetTick>
 8002244:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	079f      	lsls	r7, r3, #30
 800224a:	d4ec      	bmi.n	8002226 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe ff74 	bl	8001138 <HAL_GetTick>
 8002250:	1b80      	subs	r0, r0, r6
 8002252:	2802      	cmp	r0, #2
 8002254:	d9f7      	bls.n	8002246 <HAL_RCC_OscConfig+0x116>
 8002256:	e7ad      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002258:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800225a:	f7fe ff6d 	bl	8001138 <HAL_GetTick>
 800225e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	0798      	lsls	r0, r3, #30
 8002264:	f57f af6d 	bpl.w	8002142 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe ff66 	bl	8001138 <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f6      	bls.n	8002260 <HAL_RCC_OscConfig+0x130>
 8002272:	e79f      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	69aa      	ldr	r2, [r5, #24]
 8002276:	4c4a      	ldr	r4, [pc, #296]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCC_OscConfig+0x278>)
 800227a:	b1da      	cbz	r2, 80022b4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002280:	f7fe ff5a 	bl	8001138 <HAL_GetTick>
 8002284:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002288:	079b      	lsls	r3, r3, #30
 800228a:	d50d      	bpl.n	80022a8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800228c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x27c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fbb3 f3f2 	udiv	r3, r3, r2
 8002298:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800229a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_RCC_OscConfig+0x16a>
 80022a6:	e750      	b.n	800214a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a8:	f7fe ff46 	bl	8001138 <HAL_GetTick>
 80022ac:	1b80      	subs	r0, r0, r6
 80022ae:	2802      	cmp	r0, #2
 80022b0:	d9e9      	bls.n	8002286 <HAL_RCC_OscConfig+0x156>
 80022b2:	e77f      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80022b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022b6:	f7fe ff3f 	bl	8001138 <HAL_GetTick>
 80022ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022be:	079f      	lsls	r7, r3, #30
 80022c0:	f57f af43 	bpl.w	800214a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe ff38 	bl	8001138 <HAL_GetTick>
 80022c8:	1b80      	subs	r0, r0, r6
 80022ca:	2802      	cmp	r0, #2
 80022cc:	d9f6      	bls.n	80022bc <HAL_RCC_OscConfig+0x18c>
 80022ce:	e771      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d0:	4c33      	ldr	r4, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022d2:	69e3      	ldr	r3, [r4, #28]
 80022d4:	00d8      	lsls	r0, r3, #3
 80022d6:	d424      	bmi.n	8002322 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80022d8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	69e3      	ldr	r3, [r4, #28]
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	61e3      	str	r3, [r4, #28]
 80022e2:	69e3      	ldr	r3, [r4, #28]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4e30      	ldr	r6, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022ee:	6833      	ldr	r3, [r6, #0]
 80022f0:	05d9      	lsls	r1, r3, #23
 80022f2:	d518      	bpl.n	8002326 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	68eb      	ldr	r3, [r5, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d126      	bne.n	8002348 <HAL_RCC_OscConfig+0x218>
 80022fa:	6a23      	ldr	r3, [r4, #32]
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002302:	f7fe ff19 	bl	8001138 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800230a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	6a23      	ldr	r3, [r4, #32]
 800230e:	079b      	lsls	r3, r3, #30
 8002310:	d53f      	bpl.n	8002392 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002312:	2f00      	cmp	r7, #0
 8002314:	f43f af1d 	beq.w	8002152 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	69e3      	ldr	r3, [r4, #28]
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	61e3      	str	r3, [r4, #28]
 8002320:	e717      	b.n	8002152 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2700      	movs	r7, #0
 8002324:	e7e2      	b.n	80022ec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	6833      	ldr	r3, [r6, #0]
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800232e:	f7fe ff03 	bl	8001138 <HAL_GetTick>
 8002332:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	6833      	ldr	r3, [r6, #0]
 8002336:	05da      	lsls	r2, r3, #23
 8002338:	d4dc      	bmi.n	80022f4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe fefd 	bl	8001138 <HAL_GetTick>
 800233e:	eba0 0008 	sub.w	r0, r0, r8
 8002342:	2864      	cmp	r0, #100	; 0x64
 8002344:	d9f6      	bls.n	8002334 <HAL_RCC_OscConfig+0x204>
 8002346:	e735      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	b9ab      	cbnz	r3, 8002376 <HAL_RCC_OscConfig+0x246>
 800234a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6223      	str	r3, [r4, #32]
 8002356:	6a23      	ldr	r3, [r4, #32]
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800235e:	f7fe feeb 	bl	8001138 <HAL_GetTick>
 8002362:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	6a23      	ldr	r3, [r4, #32]
 8002366:	0798      	lsls	r0, r3, #30
 8002368:	d5d3      	bpl.n	8002312 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fee5 	bl	8001138 <HAL_GetTick>
 800236e:	1b80      	subs	r0, r0, r6
 8002370:	4540      	cmp	r0, r8
 8002372:	d9f7      	bls.n	8002364 <HAL_RCC_OscConfig+0x234>
 8002374:	e71e      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	2b05      	cmp	r3, #5
 8002378:	6a23      	ldr	r3, [r4, #32]
 800237a:	d103      	bne.n	8002384 <HAL_RCC_OscConfig+0x254>
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6223      	str	r3, [r4, #32]
 8002382:	e7ba      	b.n	80022fa <HAL_RCC_OscConfig+0x1ca>
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6223      	str	r3, [r4, #32]
 800238a:	6a23      	ldr	r3, [r4, #32]
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	e7b6      	b.n	8002300 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fed1 	bl	8001138 <HAL_GetTick>
 8002396:	eba0 0008 	sub.w	r0, r0, r8
 800239a:	42b0      	cmp	r0, r6
 800239c:	d9b6      	bls.n	800230c <HAL_RCC_OscConfig+0x1dc>
 800239e:	e709      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42420000 	.word	0x42420000
 80023a8:	42420480 	.word	0x42420480
 80023ac:	200000a0 	.word	0x200000a0
 80023b0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	4c22      	ldr	r4, [pc, #136]	; (8002440 <HAL_RCC_OscConfig+0x310>)
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	f43f aee2 	beq.w	8002186 <HAL_RCC_OscConfig+0x56>
 80023c2:	2300      	movs	r3, #0
 80023c4:	4e1f      	ldr	r6, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80023c8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ca:	d12b      	bne.n	8002424 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80023cc:	f7fe feb4 	bl	8001138 <HAL_GetTick>
 80023d0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	0199      	lsls	r1, r3, #6
 80023d6:	d41f      	bmi.n	8002418 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d8:	6a2b      	ldr	r3, [r5, #32]
 80023da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e0:	6862      	ldr	r2, [r4, #4]
 80023e2:	68a9      	ldr	r1, [r5, #8]
 80023e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80023e8:	430a      	orrs	r2, r1
 80023ea:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80023ee:	6862      	ldr	r2, [r4, #4]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80023f6:	4313      	orrs	r3, r2
 80023f8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80023fa:	2301      	movs	r3, #1
 80023fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80023fe:	f7fe fe9b 	bl	8001138 <HAL_GetTick>
 8002402:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	019a      	lsls	r2, r3, #6
 8002408:	f53f aea7 	bmi.w	800215a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe94 	bl	8001138 <HAL_GetTick>
 8002410:	1b40      	subs	r0, r0, r5
 8002412:	2802      	cmp	r0, #2
 8002414:	d9f6      	bls.n	8002404 <HAL_RCC_OscConfig+0x2d4>
 8002416:	e6cd      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fe8e 	bl	8001138 <HAL_GetTick>
 800241c:	1bc0      	subs	r0, r0, r7
 800241e:	2802      	cmp	r0, #2
 8002420:	d9d7      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2a2>
 8002422:	e6c7      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002424:	f7fe fe88 	bl	8001138 <HAL_GetTick>
 8002428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	019b      	lsls	r3, r3, #6
 800242e:	f57f ae94 	bpl.w	800215a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fe81 	bl	8001138 <HAL_GetTick>
 8002436:	1b40      	subs	r0, r0, r5
 8002438:	2802      	cmp	r0, #2
 800243a:	d9f6      	bls.n	800242a <HAL_RCC_OscConfig+0x2fa>
 800243c:	e6ba      	b.n	80021b4 <HAL_RCC_OscConfig+0x84>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	42420060 	.word	0x42420060

08002448 <HAL_RCC_GetSysClockFreq>:
{
 8002448:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800244c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800244e:	ac02      	add	r4, sp, #8
 8002450:	f103 0510 	add.w	r5, r3, #16
 8002454:	4622      	mov	r2, r4
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	3308      	adds	r3, #8
 800245c:	c203      	stmia	r2!, {r0, r1}
 800245e:	42ab      	cmp	r3, r5
 8002460:	4614      	mov	r4, r2
 8002462:	d1f7      	bne.n	8002454 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002464:	2301      	movs	r3, #1
 8002466:	f88d 3004 	strb.w	r3, [sp, #4]
 800246a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800246c:	4911      	ldr	r1, [pc, #68]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800246e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002472:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	f003 020c 	and.w	r2, r3, #12
 8002478:	2a08      	cmp	r2, #8
 800247a:	d117      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800247c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002480:	a806      	add	r0, sp, #24
 8002482:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002484:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002486:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800248a:	d50c      	bpl.n	80024a6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800248c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800248e:	480a      	ldr	r0, [pc, #40]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002490:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002494:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002496:	aa06      	add	r2, sp, #24
 8002498:	4413      	add	r3, r2
 800249a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80024a2:	b007      	add	sp, #28
 80024a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_RCC_GetSysClockFreq+0x74>)
 80024a8:	4350      	muls	r0, r2
 80024aa:	e7fa      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80024ae:	e7f8      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x5a>
 80024b0:	08006bc0 	.word	0x08006bc0
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	003d0900 	.word	0x003d0900

080024c0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024c0:	4a4d      	ldr	r2, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x138>)
{
 80024c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024c6:	6813      	ldr	r3, [r2, #0]
{
 80024c8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	428b      	cmp	r3, r1
{
 80024d0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024d2:	d328      	bcc.n	8002526 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	682a      	ldr	r2, [r5, #0]
 80024d6:	0791      	lsls	r1, r2, #30
 80024d8:	d432      	bmi.n	8002540 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	07d2      	lsls	r2, r2, #31
 80024dc:	d438      	bmi.n	8002550 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80024de:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_RCC_ClockConfig+0x138>)
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	429e      	cmp	r6, r3
 80024e8:	d373      	bcc.n	80025d2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	682a      	ldr	r2, [r5, #0]
 80024ec:	4c43      	ldr	r4, [pc, #268]	; (80025fc <HAL_RCC_ClockConfig+0x13c>)
 80024ee:	f012 0f04 	tst.w	r2, #4
 80024f2:	d179      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	0713      	lsls	r3, r2, #28
 80024f6:	d506      	bpl.n	8002506 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f8:	6863      	ldr	r3, [r4, #4]
 80024fa:	692a      	ldr	r2, [r5, #16]
 80024fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002500:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002504:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002506:	f7ff ff9f 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800250a:	6863      	ldr	r3, [r4, #4]
 800250c:	4a3c      	ldr	r2, [pc, #240]	; (8002600 <HAL_RCC_ClockConfig+0x140>)
 800250e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	40d8      	lsrs	r0, r3
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_ClockConfig+0x144>)
 8002518:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800251a:	2000      	movs	r0, #0
 800251c:	f7fe fdca 	bl	80010b4 <HAL_InitTick>
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
}
 8002522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	f023 0307 	bic.w	r3, r3, #7
 800252c:	430b      	orrs	r3, r1
 800252e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	4299      	cmp	r1, r3
 8002538:	d0cc      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	492e      	ldr	r1, [pc, #184]	; (80025fc <HAL_RCC_ClockConfig+0x13c>)
 8002542:	68a8      	ldr	r0, [r5, #8]
 8002544:	684b      	ldr	r3, [r1, #4]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	4303      	orrs	r3, r0
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e7c4      	b.n	80024da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002550:	686a      	ldr	r2, [r5, #4]
 8002552:	4c2a      	ldr	r4, [pc, #168]	; (80025fc <HAL_RCC_ClockConfig+0x13c>)
 8002554:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002558:	d11c      	bne.n	8002594 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	d0ec      	beq.n	800253a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002560:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002562:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	4313      	orrs	r3, r2
 800256c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800256e:	f7fe fde3 	bl	8001138 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002574:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	2b01      	cmp	r3, #1
 8002578:	d114      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d0ac      	beq.n	80024de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fdd8 	bl	8001138 <HAL_GetTick>
 8002588:	1bc0      	subs	r0, r0, r7
 800258a:	4540      	cmp	r0, r8
 800258c:	d9f5      	bls.n	800257a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002594:	2a02      	cmp	r2, #2
 8002596:	d102      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800259c:	e7df      	b.n	800255e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	f013 0f02 	tst.w	r3, #2
 80025a2:	e7dc      	b.n	800255e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d10f      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a8:	6863      	ldr	r3, [r4, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d095      	beq.n	80024de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fdc1 	bl	8001138 <HAL_GetTick>
 80025b6:	1bc0      	subs	r0, r0, r7
 80025b8:	4540      	cmp	r0, r8
 80025ba:	d9f5      	bls.n	80025a8 <HAL_RCC_ClockConfig+0xe8>
 80025bc:	e7e7      	b.n	800258e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025be:	f7fe fdbb 	bl	8001138 <HAL_GetTick>
 80025c2:	1bc0      	subs	r0, r0, r7
 80025c4:	4540      	cmp	r0, r8
 80025c6:	d8e2      	bhi.n	800258e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c8:	6863      	ldr	r3, [r4, #4]
 80025ca:	f013 0f0c 	tst.w	r3, #12
 80025ce:	d1f6      	bne.n	80025be <HAL_RCC_ClockConfig+0xfe>
 80025d0:	e785      	b.n	80024de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f023 0307 	bic.w	r3, r3, #7
 80025d8:	4333      	orrs	r3, r6
 80025da:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	429e      	cmp	r6, r3
 80025e4:	d1a9      	bne.n	800253a <HAL_RCC_ClockConfig+0x7a>
 80025e6:	e780      	b.n	80024ea <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	6863      	ldr	r3, [r4, #4]
 80025ea:	68e9      	ldr	r1, [r5, #12]
 80025ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6063      	str	r3, [r4, #4]
 80025f4:	e77e      	b.n	80024f4 <HAL_RCC_ClockConfig+0x34>
 80025f6:	bf00      	nop
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021000 	.word	0x40021000
 8002600:	08006c45 	.word	0x08006c45
 8002604:	200000a0 	.word	0x200000a0

08002608 <HAL_RCC_GetHCLKFreq>:
}
 8002608:	4b01      	ldr	r3, [pc, #4]	; (8002610 <HAL_RCC_GetHCLKFreq+0x8>)
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200000a0 	.word	0x200000a0

08002614 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	4a03      	ldr	r2, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002622:	6810      	ldr	r0, [r2, #0]
}    
 8002624:	40d8      	lsrs	r0, r3
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	08006c55 	.word	0x08006c55
 8002630:	200000a0 	.word	0x200000a0

08002634 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002642:	6810      	ldr	r0, [r2, #0]
} 
 8002644:	40d8      	lsrs	r0, r3
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	08006c55 	.word	0x08006c55
 8002650:	200000a0 	.word	0x200000a0

08002654 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002654:	6803      	ldr	r3, [r0, #0]
{
 8002656:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800265a:	07d9      	lsls	r1, r3, #31
{
 800265c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800265e:	d520      	bpl.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002660:	4c35      	ldr	r4, [pc, #212]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002662:	69e3      	ldr	r3, [r4, #28]
 8002664:	00da      	lsls	r2, r3, #3
 8002666:	d432      	bmi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002668:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	69e3      	ldr	r3, [r4, #28]
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61e3      	str	r3, [r4, #28]
 8002672:	69e3      	ldr	r3, [r4, #28]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4e2f      	ldr	r6, [pc, #188]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800267e:	6833      	ldr	r3, [r6, #0]
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	d526      	bpl.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002684:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002686:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800268a:	d136      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800268c:	6a23      	ldr	r3, [r4, #32]
 800268e:	686a      	ldr	r2, [r5, #4]
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	4313      	orrs	r3, r2
 8002696:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002698:	b11f      	cbz	r7, 80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	69e3      	ldr	r3, [r4, #28]
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a2:	6828      	ldr	r0, [r5, #0]
 80026a4:	0783      	lsls	r3, r0, #30
 80026a6:	d506      	bpl.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80026aa:	68a9      	ldr	r1, [r5, #8]
 80026ac:	6853      	ldr	r3, [r2, #4]
 80026ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b6:	f010 0010 	ands.w	r0, r0, #16
 80026ba:	d01b      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80026be:	68e9      	ldr	r1, [r5, #12]
 80026c0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026c2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6053      	str	r3, [r2, #4]
 80026cc:	e012      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2700      	movs	r7, #0
 80026d0:	e7d4      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	6833      	ldr	r3, [r6, #0]
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80026da:	f7fe fd2d 	bl	8001138 <HAL_GetTick>
 80026de:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	6833      	ldr	r3, [r6, #0]
 80026e2:	05d8      	lsls	r0, r3, #23
 80026e4:	d4ce      	bmi.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fd27 	bl	8001138 <HAL_GetTick>
 80026ea:	eba0 0008 	sub.w	r0, r0, r8
 80026ee:	2864      	cmp	r0, #100	; 0x64
 80026f0:	d9f6      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80026f2:	2003      	movs	r0, #3
}
 80026f4:	b002      	add	sp, #8
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026fa:	686a      	ldr	r2, [r5, #4]
 80026fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002700:	4293      	cmp	r3, r2
 8002702:	d0c3      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002704:	2001      	movs	r0, #1
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002708:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800270a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800270e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002712:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002714:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002716:	07d9      	lsls	r1, r3, #31
 8002718:	d5b8      	bpl.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800271a:	f7fe fd0d 	bl	8001138 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002722:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	6a23      	ldr	r3, [r4, #32]
 8002726:	079a      	lsls	r2, r3, #30
 8002728:	d4b0      	bmi.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fd05 	bl	8001138 <HAL_GetTick>
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	4540      	cmp	r0, r8
 8002732:	d9f7      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002734:	e7dd      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420440 	.word	0x42420440

08002744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002748:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 800274a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800274c:	ad02      	add	r5, sp, #8
 800274e:	f103 0610 	add.w	r6, r3, #16
 8002752:	462a      	mov	r2, r5
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	3308      	adds	r3, #8
 800275a:	c203      	stmia	r2!, {r0, r1}
 800275c:	42b3      	cmp	r3, r6
 800275e:	4615      	mov	r5, r2
 8002760:	d1f7      	bne.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002762:	2301      	movs	r3, #1
 8002764:	f88d 3004 	strb.w	r3, [sp, #4]
 8002768:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800276a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800276c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8002770:	d047      	beq.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002772:	2c10      	cmp	r4, #16
 8002774:	d017      	beq.n	80027a6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002776:	2c01      	cmp	r4, #1
 8002778:	d14f      	bne.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800277a:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800277e:	4a29      	ldr	r2, [pc, #164]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002780:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002782:	4019      	ands	r1, r3
 8002784:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002788:	d044      	beq.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002792:	d12d      	bne.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8002794:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002798:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800279a:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800279e:	bf08      	it	eq
 80027a0:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80027a2:	b006      	add	sp, #24
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80027a8:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80027b0:	d0f7      	beq.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b2:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80027b6:	a806      	add	r0, sp, #24
 80027b8:	4402      	add	r2, r0
 80027ba:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027be:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c0:	bf41      	itttt	mi
 80027c2:	685a      	ldrmi	r2, [r3, #4]
 80027c4:	a906      	addmi	r1, sp, #24
 80027c6:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80027ca:	1852      	addmi	r2, r2, r1
 80027cc:	bf44      	itt	mi
 80027ce:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027d2:	4a15      	ldrmi	r2, [pc, #84]	; (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027d4:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027d6:	bf4c      	ite	mi
 80027d8:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027dc:	4a13      	ldrpl	r2, [pc, #76]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027de:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e0:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027e4:	d4dd      	bmi.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 80027e6:	2303      	movs	r3, #3
 80027e8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027ea:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80027ee:	e7d8      	b.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f4:	d111      	bne.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80027f6:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80027f8:	f24f 4024 	movw	r0, #62500	; 0xf424
 80027fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002800:	e7cd      	b.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002802:	f7ff ff17 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	e7ea      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8002814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002818:	e7c3      	b.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 800281a:	2000      	movs	r0, #0
 800281c:	e7c1      	b.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800281e:	bf00      	nop
 8002820:	08006bd0 	.word	0x08006bd0
 8002824:	40021000 	.word	0x40021000
 8002828:	007a1200 	.word	0x007a1200
 800282c:	003d0900 	.word	0x003d0900

08002830 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002830:	6a03      	ldr	r3, [r0, #32]
{
 8002832:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002840:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002842:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002846:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002848:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800284a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800284e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002850:	4d0a      	ldr	r5, [pc, #40]	; (800287c <TIM_OC1_SetConfig+0x4c>)
 8002852:	42a8      	cmp	r0, r5
 8002854:	d10b      	bne.n	800286e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002856:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002858:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800285c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800285e:	698e      	ldr	r6, [r1, #24]
 8002860:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002862:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002866:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002868:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800286c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002870:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002872:	684a      	ldr	r2, [r1, #4]
 8002874:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002876:	6203      	str	r3, [r0, #32]
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00

08002880 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002880:	6a03      	ldr	r3, [r0, #32]
{
 8002882:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002888:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800288c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800288e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002890:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002892:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002896:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002898:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800289a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800289e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028a2:	4d0b      	ldr	r5, [pc, #44]	; (80028d0 <TIM_OC3_SetConfig+0x50>)
 80028a4:	42a8      	cmp	r0, r5
 80028a6:	d10d      	bne.n	80028c4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80028aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028b2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028b4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028b6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80028bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028c0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	6203      	str	r3, [r0, #32]
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	40012c00 	.word	0x40012c00

080028d4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028d4:	6a03      	ldr	r3, [r0, #32]
{
 80028d6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80028f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028f8:	4d06      	ldr	r5, [pc, #24]	; (8002914 <TIM_OC4_SetConfig+0x40>)
 80028fa:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80028fc:	bf02      	ittt	eq
 80028fe:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002900:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002904:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002908:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800290a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800290c:	684a      	ldr	r2, [r1, #4]
 800290e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	6203      	str	r3, [r0, #32]
 8002912:	bd30      	pop	{r4, r5, pc}
 8002914:	40012c00 	.word	0x40012c00

08002918 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8002918:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 800291a:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800291c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8002920:	6813      	ldr	r3, [r2, #0]
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002928:	2301      	movs	r3, #1
 800292a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800292e:	2000      	movs	r0, #0
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002932:	6803      	ldr	r3, [r0, #0]
}
 8002934:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_MspInit>:
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IC_MspInit>:
 800294a:	4770      	bx	lr

0800294c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800294c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002950:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002952:	2b01      	cmp	r3, #1
 8002954:	f04f 0302 	mov.w	r3, #2
 8002958:	d01c      	beq.n	8002994 <HAL_TIM_ConfigClockSource+0x48>
 800295a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002960:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002962:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002966:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002968:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800296c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002970:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002972:	680a      	ldr	r2, [r1, #0]
 8002974:	2a40      	cmp	r2, #64	; 0x40
 8002976:	d079      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0x120>
 8002978:	d819      	bhi.n	80029ae <HAL_TIM_ConfigClockSource+0x62>
 800297a:	2a10      	cmp	r2, #16
 800297c:	f000 8093 	beq.w	8002aa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	d80a      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x4c>
 8002982:	2a00      	cmp	r2, #0
 8002984:	f000 8089 	beq.w	8002a9a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002988:	2301      	movs	r3, #1
 800298a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800298e:	2300      	movs	r3, #0
 8002990:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002994:	4618      	mov	r0, r3
}
 8002996:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002998:	2a20      	cmp	r2, #32
 800299a:	f000 808a 	beq.w	8002ab2 <HAL_TIM_ConfigClockSource+0x166>
 800299e:	2a30      	cmp	r2, #48	; 0x30
 80029a0:	d1f2      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80029a2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80029a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80029a8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80029ac:	e036      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80029ae:	2a70      	cmp	r2, #112	; 0x70
 80029b0:	d036      	beq.n	8002a20 <HAL_TIM_ConfigClockSource+0xd4>
 80029b2:	d81b      	bhi.n	80029ec <HAL_TIM_ConfigClockSource+0xa0>
 80029b4:	2a50      	cmp	r2, #80	; 0x50
 80029b6:	d042      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xf2>
 80029b8:	2a60      	cmp	r2, #96	; 0x60
 80029ba:	d1e5      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029bc:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80029ca:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80029dc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80029de:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80029e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80029e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80029e6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80029ea:	e017      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80029ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80029f0:	d011      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xca>
 80029f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029f6:	d1c7      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80029fc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029fe:	68c9      	ldr	r1, [r1, #12]
 8002a00:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a02:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a0a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a14:	e002      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	e7b3      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a20:	688a      	ldr	r2, [r1, #8]
 8002a22:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002a24:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a26:	68c9      	ldr	r1, [r1, #12]
 8002a28:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a32:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002a34:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002a36:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a38:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002a3c:	e7ee      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	684c      	ldr	r4, [r1, #4]
 8002a40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a42:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a44:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a46:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4a:	f025 0501 	bic.w	r5, r5, #1
 8002a4e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a50:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002a52:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a58:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002a60:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a66:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002a6a:	e7d7      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6c:	684c      	ldr	r4, [r1, #4]
 8002a6e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a70:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a74:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a78:	f025 0501 	bic.w	r5, r5, #1
 8002a7c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002a80:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a86:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002a8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a94:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002a98:	e7c0      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002a9a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002aa0:	f042 0207 	orr.w	r2, r2, #7
 8002aa4:	e7ba      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002aa6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002aac:	f042 0217 	orr.w	r2, r2, #23
 8002ab0:	e7b4      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002ab2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ab8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002abc:	e7ae      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0xd0>

08002abe <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8002abe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d01c      	beq.n	8002b00 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8002ac6:	290c      	cmp	r1, #12
 8002ac8:	d818      	bhi.n	8002afc <HAL_TIM_ReadCapturedValue+0x3e>
 8002aca:	e8df f001 	tbb	[pc, r1]
 8002ace:	1707      	.short	0x1707
 8002ad0:	170e1717 	.word	0x170e1717
 8002ad4:	17111717 	.word	0x17111717
 8002ad8:	1717      	.short	0x1717
 8002ada:	14          	.byte	0x14
 8002adb:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8002adc:	6803      	ldr	r3, [r0, #0]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002aea:	6803      	ldr	r3, [r0, #0]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8002aee:	e7f7      	b.n	8002ae0 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 8002af0:	6803      	ldr	r3, [r0, #0]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8002af4:	e7f4      	b.n	8002ae0 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8002af6:	6803      	ldr	r3, [r0, #0]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8002afa:	e7f1      	b.n	8002ae0 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e7ef      	b.n	8002ae0 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8002b00:	2302      	movs	r3, #2
 8002b02:	e7f0      	b.n	8002ae6 <HAL_TIM_ReadCapturedValue+0x28>

08002b04 <HAL_TIM_PeriodElapsedCallback>:
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIM_TriggerCallback>:
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b0c:	6803      	ldr	r3, [r0, #0]
{
 8002b0e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b10:	691a      	ldr	r2, [r3, #16]
{
 8002b12:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	0791      	lsls	r1, r2, #30
 8002b16:	d50e      	bpl.n	8002b36 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	0792      	lsls	r2, r2, #30
 8002b1c:	d50b      	bpl.n	8002b36 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b1e:	f06f 0202 	mvn.w	r2, #2
 8002b22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b24:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b26:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b28:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2a:	079b      	lsls	r3, r3, #30
 8002b2c:	d077      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	f000 fec7 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	2300      	movs	r3, #0
 8002b34:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	0750      	lsls	r0, r2, #29
 8002b3c:	d510      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	0751      	lsls	r1, r2, #29
 8002b42:	d50d      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b44:	f06f 0204 	mvn.w	r2, #4
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b4c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b50:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b54:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b56:	d068      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	f000 feb2 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	0712      	lsls	r2, r2, #28
 8002b66:	d50f      	bpl.n	8002b88 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	0710      	lsls	r0, r2, #28
 8002b6c:	d50c      	bpl.n	8002b88 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b6e:	f06f 0208 	mvn.w	r2, #8
 8002b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b74:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	d05a      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	f000 fe9e 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b84:	2300      	movs	r3, #0
 8002b86:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	06d2      	lsls	r2, r2, #27
 8002b8e:	d510      	bpl.n	8002bb2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	06d0      	lsls	r0, r2, #27
 8002b94:	d50d      	bpl.n	8002bb2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b96:	f06f 0210 	mvn.w	r2, #16
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b9e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba8:	d04b      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	f000 fe89 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	07d1      	lsls	r1, r2, #31
 8002bb8:	d508      	bpl.n	8002bcc <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	07d2      	lsls	r2, r2, #31
 8002bbe:	d505      	bpl.n	8002bcc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc8:	f7ff ff9c 	bl	8002b04 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	0610      	lsls	r0, r2, #24
 8002bd2:	d508      	bpl.n	8002be6 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	0611      	lsls	r1, r2, #24
 8002bd8:	d505      	bpl.n	8002be6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bda:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002bde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	f000 fb04 	bl	80031ee <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	0652      	lsls	r2, r2, #25
 8002bec:	d508      	bpl.n	8002c00 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	0650      	lsls	r0, r2, #25
 8002bf2:	d505      	bpl.n	8002c00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002bf8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bfc:	f7ff ff85 	bl	8002b0a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	0691      	lsls	r1, r2, #26
 8002c06:	d522      	bpl.n	8002c4e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	0692      	lsls	r2, r2, #26
 8002c0c:	d51f      	bpl.n	8002c4e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002c12:	4620      	mov	r0, r4
}
 8002c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002c1a:	f000 bae7 	b.w	80031ec <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	f7ff ff72 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff ff70 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c28:	e783      	b.n	8002b32 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	f7ff ff6c 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff ff6a 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c34:	e792      	b.n	8002b5c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	f7ff ff66 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff ff64 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c40:	e7a0      	b.n	8002b84 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	f7ff ff60 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7ff ff5e 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c4c:	e7af      	b.n	8002bae <HAL_TIM_IRQHandler+0xa2>
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002c52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	4290      	cmp	r0, r2
 8002c56:	d00a      	beq.n	8002c6e <TIM_Base_SetConfig+0x1e>
 8002c58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x1e>
 8002c5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x1e>
 8002c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c6a:	4290      	cmp	r0, r2
 8002c6c:	d115      	bne.n	8002c9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002c6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c74:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <TIM_Base_SetConfig+0x6c>)
 8002c78:	4290      	cmp	r0, r2
 8002c7a:	d00a      	beq.n	8002c92 <TIM_Base_SetConfig+0x42>
 8002c7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x42>
 8002c82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c86:	4290      	cmp	r0, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x42>
 8002c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c8e:	4290      	cmp	r0, r2
 8002c90:	d103      	bne.n	8002c9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c92:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c98:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002c9a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002ca0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ca2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	688b      	ldr	r3, [r1, #8]
 8002ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ca8:	680b      	ldr	r3, [r1, #0]
 8002caa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <TIM_Base_SetConfig+0x6c>)
 8002cae:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb0:	bf04      	itt	eq
 8002cb2:	690b      	ldreq	r3, [r1, #16]
 8002cb4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	6143      	str	r3, [r0, #20]
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <HAL_TIM_Base_Init>:
{
 8002cc0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	b1a0      	cbz	r0, 8002cf0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cce:	b91b      	cbnz	r3, 8002cd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002cd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cd4:	f001 fc78 	bl	80045c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002cd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cda:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002cdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce0:	1d21      	adds	r1, r4, #4
 8002ce2:	f7ff ffb5 	bl	8002c50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002ce6:	2301      	movs	r3, #1
  return HAL_OK;
 8002ce8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
}
 8002cf2:	bd10      	pop	{r4, pc}

08002cf4 <HAL_TIM_PWM_Init>:
{
 8002cf4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	b1a0      	cbz	r0, 8002d24 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d02:	b91b      	cbnz	r3, 8002d0c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d08:	f7ff fe1e 	bl	8002948 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002d10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d14:	1d21      	adds	r1, r4, #4
 8002d16:	f7ff ff9b 	bl	8002c50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d1a:	2301      	movs	r3, #1
  return HAL_OK;
 8002d1c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
}
 8002d26:	bd10      	pop	{r4, pc}

08002d28 <HAL_TIM_IC_Init>:
{
 8002d28:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	b1a0      	cbz	r0, 8002d58 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d36:	b91b      	cbnz	r3, 8002d40 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002d3c:	f7ff fe05 	bl	800294a <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d42:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002d44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	1d21      	adds	r1, r4, #4
 8002d4a:	f7ff ff81 	bl	8002c50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d4e:	2301      	movs	r3, #1
  return HAL_OK;
 8002d50:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d58:	2001      	movs	r0, #1
}
 8002d5a:	bd10      	pop	{r4, pc}

08002d5c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5c:	6a03      	ldr	r3, [r0, #32]
{
 8002d5e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d60:	f023 0310 	bic.w	r3, r3, #16
 8002d64:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d66:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d76:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002d78:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <TIM_OC2_SetConfig+0x54>)
 8002d82:	42a8      	cmp	r0, r5
 8002d84:	d10d      	bne.n	8002da2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002d90:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002d92:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d94:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002d98:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002d9e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002da2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002da4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002da6:	684a      	ldr	r2, [r1, #4]
 8002da8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002daa:	6203      	str	r3, [r0, #32]
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00

08002db4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002db4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002db6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002dba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	f04f 0002 	mov.w	r0, #2
 8002dc2:	d025      	beq.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002dc4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002dca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002dce:	2a0c      	cmp	r2, #12
 8002dd0:	d818      	bhi.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002dd2:	e8df f002 	tbb	[pc, r2]
 8002dd6:	1707      	.short	0x1707
 8002dd8:	171e1717 	.word	0x171e1717
 8002ddc:	172f1717 	.word	0x172f1717
 8002de0:	1717      	.short	0x1717
 8002de2:	40          	.byte	0x40
 8002de3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de4:	6820      	ldr	r0, [r4, #0]
 8002de6:	f7ff fd23 	bl	8002830 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	f042 0208 	orr.w	r2, r2, #8
 8002df4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002e02:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002e06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e10:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	f7ff ffa2 	bl	8002d5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e18:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002e1a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e32:	e7e6      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	f7ff fd23 	bl	8002880 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	f042 0208 	orr.w	r2, r2, #8
 8002e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	f022 0204 	bic.w	r2, r2, #4
 8002e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002e52:	61da      	str	r2, [r3, #28]
    break;
 8002e54:	e7d6      	b.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	f7ff fd3c 	bl	80028d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002e5e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e76:	e7ec      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002e78 <TIM_TI1_SetConfig>:
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e7c:	4e12      	ldr	r6, [pc, #72]	; (8002ec8 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7e:	f024 0401 	bic.w	r4, r4, #1
 8002e82:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e84:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e88:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e8a:	d00a      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x2a>
 8002e8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e90:	d007      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x2a>
 8002e92:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002e96:	42b0      	cmp	r0, r6
 8002e98:	d003      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x2a>
 8002e9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e9e:	42b0      	cmp	r0, r6
 8002ea0:	d10f      	bne.n	8002ec2 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ea2:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002ea6:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ea8:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eaa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002eae:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eb0:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002eb4:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002eb8:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002eba:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002ebc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ebe:	6201      	str	r1, [r0, #32]
}
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ec2:	f044 0201 	orr.w	r2, r4, #1
 8002ec6:	e7ef      	b.n	8002ea8 <TIM_TI1_SetConfig+0x30>
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <HAL_TIM_IC_ConfigChannel>:
{
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002ece:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002ed2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ed4:	2b01      	cmp	r3, #1
{
 8002ed6:	460d      	mov	r5, r1
 8002ed8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002edc:	d019      	beq.n	8002f12 <HAL_TIM_IC_ConfigChannel+0x46>
 8002ede:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002ee8:	b9a2      	cbnz	r2, 8002f14 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002eea:	68cb      	ldr	r3, [r1, #12]
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	c906      	ldmia	r1, {r1, r2}
 8002ef0:	f7ff ffc2 	bl	8002e78 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ef4:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ef6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	f022 020c 	bic.w	r2, r2, #12
 8002efe:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002f14:	2a04      	cmp	r2, #4
 8002f16:	688e      	ldr	r6, [r1, #8]
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	c982      	ldmia	r1, {r1, r7}
 8002f1c:	68e8      	ldr	r0, [r5, #12]
 8002f1e:	d11f      	bne.n	8002f60 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f20:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f22:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f24:	f022 0210 	bic.w	r2, r2, #16
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002f2c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f32:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f36:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f38:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f3c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f3e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f40:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f44:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f48:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f54:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002f5c:	619e      	str	r6, [r3, #24]
 8002f5e:	e7d2      	b.n	8002f06 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002f60:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f62:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002f64:	d11c      	bne.n	8002fa0 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f6c:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f6e:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f70:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8002f74:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002f76:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f78:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f7e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f80:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f82:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f86:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f8a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002f8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f8e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	f022 020c 	bic.w	r2, r2, #12
 8002f96:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f9c:	61de      	str	r6, [r3, #28]
 8002f9e:	e7b2      	b.n	8002f06 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fa6:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fa8:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8002fae:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002fb0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002fb4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fb8:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002fba:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fbc:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002fbe:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc2:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002fc6:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002fc8:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002fca:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fd2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002fda:	e7df      	b.n	8002f9c <HAL_TIM_IC_ConfigChannel+0xd0>

08002fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fdc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002fde:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fe0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002fe2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002fe4:	ea23 0304 	bic.w	r3, r3, r4
 8002fe8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002fea:	6a03      	ldr	r3, [r0, #32]
 8002fec:	408a      	lsls	r2, r1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	6202      	str	r2, [r0, #32]
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <HAL_TIM_PWM_Start>:
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	6800      	ldr	r0, [r0, #0]
 8002ffc:	f7ff ffee 	bl	8002fdc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_TIM_PWM_Start+0x28>)
}
 8003004:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003006:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8003008:	bf02      	ittt	eq
 800300a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800300c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003010:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bd10      	pop	{r4, pc}
 800301c:	40012c00 	.word	0x40012c00

08003020 <HAL_TIM_PWM_Stop>:
{
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003024:	2200      	movs	r2, #0
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	f7ff ffd8 	bl	8002fdc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_TIM_PWM_Stop+0x58>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10d      	bne.n	8003050 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8003034:	f241 1211 	movw	r2, #4369	; 0x1111
 8003038:	6a19      	ldr	r1, [r3, #32]
 800303a:	4211      	tst	r1, r2
 800303c:	d108      	bne.n	8003050 <HAL_TIM_PWM_Stop+0x30>
 800303e:	f240 4244 	movw	r2, #1092	; 0x444
 8003042:	6a19      	ldr	r1, [r3, #32]
 8003044:	4211      	tst	r1, r2
 8003046:	bf02      	ittt	eq
 8003048:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800304a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800304e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003050:	f241 1211 	movw	r2, #4369	; 0x1111
 8003054:	6a19      	ldr	r1, [r3, #32]
 8003056:	4211      	tst	r1, r2
 8003058:	d108      	bne.n	800306c <HAL_TIM_PWM_Stop+0x4c>
 800305a:	f240 4244 	movw	r2, #1092	; 0x444
 800305e:	6a19      	ldr	r1, [r3, #32]
 8003060:	4211      	tst	r1, r2
 8003062:	bf02      	ittt	eq
 8003064:	681a      	ldreq	r2, [r3, #0]
 8003066:	f022 0201 	biceq.w	r2, r2, #1
 800306a:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800306c:	2301      	movs	r3, #1
}
 800306e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003070:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00

0800307c <HAL_TIM_IC_Start_IT>:
{
 800307c:	b510      	push	{r4, lr}
 800307e:	4604      	mov	r4, r0
  switch (Channel)
 8003080:	290c      	cmp	r1, #12
 8003082:	d80d      	bhi.n	80030a0 <HAL_TIM_IC_Start_IT+0x24>
 8003084:	e8df f001 	tbb	[pc, r1]
 8003088:	0c0c0c07 	.word	0x0c0c0c07
 800308c:	0c0c0c17 	.word	0x0c0c0c17
 8003090:	0c0c0c1c 	.word	0x0c0c0c1c
 8003094:	21          	.byte	0x21
 8003095:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003096:	6802      	ldr	r2, [r0, #0]
 8003098:	68d3      	ldr	r3, [r2, #12]
 800309a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800309e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030a0:	6820      	ldr	r0, [r4, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f7ff ff9a 	bl	8002fdc <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80030a8:	6822      	ldr	r2, [r4, #0]
}
 80030aa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80030ac:	6813      	ldr	r3, [r2, #0]
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030b6:	6802      	ldr	r2, [r0, #0]
 80030b8:	68d3      	ldr	r3, [r2, #12]
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	e7ee      	b.n	800309e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c0:	6802      	ldr	r2, [r0, #0]
 80030c2:	68d3      	ldr	r3, [r2, #12]
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	e7e9      	b.n	800309e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030ca:	6802      	ldr	r2, [r0, #0]
 80030cc:	68d3      	ldr	r3, [r2, #12]
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	e7e4      	b.n	800309e <HAL_TIM_IC_Start_IT+0x22>

080030d4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80030d4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 80030d6:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80030d8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 80030da:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 80030dc:	ea23 0304 	bic.w	r3, r3, r4
 80030e0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80030e2:	6a03      	ldr	r3, [r0, #32]
 80030e4:	408a      	lsls	r2, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6202      	str	r2, [r0, #32]
 80030ea:	bd10      	pop	{r4, pc}

080030ec <HAL_TIMEx_PWMN_Start>:
{
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80030f0:	2204      	movs	r2, #4
 80030f2:	6800      	ldr	r0, [r0, #0]
 80030f4:	f7ff ffee 	bl	80030d4 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80030f8:	6823      	ldr	r3, [r4, #0]
}
 80030fa:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bd10      	pop	{r4, pc}

0800310e <HAL_TIMEx_OnePulseN_Stop>:
{
 800310e:	b510      	push	{r4, lr}
 8003110:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8003112:	2200      	movs	r2, #0
 8003114:	6800      	ldr	r0, [r0, #0]
 8003116:	f7ff ffdd 	bl	80030d4 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800311a:	f241 1211 	movw	r2, #4369	; 0x1111
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	6a19      	ldr	r1, [r3, #32]
 8003122:	4211      	tst	r1, r2
 8003124:	d108      	bne.n	8003138 <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8003126:	f240 4244 	movw	r2, #1092	; 0x444
 800312a:	6a19      	ldr	r1, [r3, #32]
 800312c:	4211      	tst	r1, r2
 800312e:	bf02      	ittt	eq
 8003130:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003132:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8003136:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003138:	f241 1211 	movw	r2, #4369	; 0x1111
 800313c:	6a19      	ldr	r1, [r3, #32]
 800313e:	4211      	tst	r1, r2
 8003140:	d108      	bne.n	8003154 <HAL_TIMEx_OnePulseN_Stop+0x46>
 8003142:	f240 4244 	movw	r2, #1092	; 0x444
 8003146:	6a19      	ldr	r1, [r3, #32]
 8003148:	4211      	tst	r1, r2
 800314a:	bf02      	ittt	eq
 800314c:	681a      	ldreq	r2, [r3, #0]
 800314e:	f022 0201 	biceq.w	r2, r2, #1
 8003152:	601a      	streq	r2, [r3, #0]
}
 8003154:	2000      	movs	r0, #0
 8003156:	bd10      	pop	{r4, pc}

08003158 <HAL_TIMEx_PWMN_Stop>:
 8003158:	f7ff bfd9 	b.w	800310e <HAL_TIMEx_OnePulseN_Stop>

0800315c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800315c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d01f      	beq.n	80031a4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003164:	68cb      	ldr	r3, [r1, #12]
 8003166:	688a      	ldr	r2, [r1, #8]
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800316e:	684a      	ldr	r2, [r1, #4]
 8003170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003174:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003176:	680a      	ldr	r2, [r1, #0]
 8003178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800317e:	690a      	ldr	r2, [r1, #16]
 8003180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003184:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003186:	694a      	ldr	r2, [r1, #20]
 8003188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800318c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800318e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003190:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003194:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8003196:	6802      	ldr	r2, [r0, #0]
 8003198:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800319a:	2300      	movs	r3, #0
 800319c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80031a0:	4618      	mov	r0, r3
 80031a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80031a4:	2002      	movs	r0, #2
}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80031a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80031ac:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	f04f 0302 	mov.w	r3, #2
 80031b4:	d018      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031ba:	6803      	ldr	r3, [r0, #0]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031bc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031be:	685a      	ldr	r2, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031c0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031c6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4322      	orrs	r2, r4
 80031cc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	2301      	movs	r3, #1
 80031de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031e2:	2300      	movs	r3, #0
 80031e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80031e8:	4618      	mov	r0, r3
}
 80031ea:	bd10      	pop	{r4, pc}

080031ec <HAL_TIMEx_CommutationCallback>:
 80031ec:	4770      	bx	lr

080031ee <HAL_TIMEx_BreakCallback>:
{
 80031ee:	4770      	bx	lr

080031f0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	6805      	ldr	r5, [r0, #0]
 80031f6:	68c2      	ldr	r2, [r0, #12]
 80031f8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031fa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003200:	4313      	orrs	r3, r2
 8003202:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003204:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003206:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003208:	430b      	orrs	r3, r1
 800320a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800320c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003210:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003214:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003216:	4313      	orrs	r3, r2
 8003218:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	696b      	ldr	r3, [r5, #20]
 800321c:	6982      	ldr	r2, [r0, #24]
 800321e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003222:	4313      	orrs	r3, r2
 8003224:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <UART_SetConfig+0x138>)
{
 8003228:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800322a:	429d      	cmp	r5, r3
 800322c:	f04f 0419 	mov.w	r4, #25
 8003230:	d146      	bne.n	80032c0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003232:	f7ff f9ff 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8003236:	fb04 f300 	mul.w	r3, r4, r0
 800323a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800323e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003242:	00b6      	lsls	r6, r6, #2
 8003244:	fbb3 f3f6 	udiv	r3, r3, r6
 8003248:	fbb3 f3f8 	udiv	r3, r3, r8
 800324c:	011e      	lsls	r6, r3, #4
 800324e:	f7ff f9f1 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8003252:	4360      	muls	r0, r4
 8003254:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb0 f7f3 	udiv	r7, r0, r3
 800325e:	f7ff f9e9 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8003262:	4360      	muls	r0, r4
 8003264:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	fbb0 f3f3 	udiv	r3, r0, r3
 800326e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003272:	fb08 7313 	mls	r3, r8, r3, r7
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	fbb3 f3f8 	udiv	r3, r3, r8
 800327e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003282:	f7ff f9d7 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8003286:	4360      	muls	r0, r4
 8003288:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	fbb0 faf2 	udiv	sl, r0, r2
 8003292:	f7ff f9cf 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003296:	4360      	muls	r0, r4
 8003298:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80032a6:	fb08 a313 	mls	r3, r8, r3, sl
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	fbb3 f3f8 	udiv	r3, r3, r8
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	433b      	orrs	r3, r7
 80032b8:	4433      	add	r3, r6
 80032ba:	60ab      	str	r3, [r5, #8]
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	f7ff f9a8 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80032c4:	fb04 f300 	mul.w	r3, r4, r0
 80032c8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80032cc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80032d0:	00b6      	lsls	r6, r6, #2
 80032d2:	fbb3 f3f6 	udiv	r3, r3, r6
 80032d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80032da:	011e      	lsls	r6, r3, #4
 80032dc:	f7ff f99a 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80032e0:	4360      	muls	r0, r4
 80032e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fbb0 f7f3 	udiv	r7, r0, r3
 80032ec:	f7ff f992 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80032f0:	4360      	muls	r0, r4
 80032f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8003300:	fb08 7313 	mls	r3, r8, r3, r7
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	fbb3 f3f8 	udiv	r3, r3, r8
 800330c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003310:	f7ff f980 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003314:	4360      	muls	r0, r4
 8003316:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	fbb0 faf2 	udiv	sl, r0, r2
 8003320:	f7ff f978 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003324:	e7b7      	b.n	8003296 <UART_SetConfig+0xa6>
 8003326:	bf00      	nop
 8003328:	40013800 	.word	0x40013800

0800332c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	460e      	mov	r6, r1
 8003332:	4617      	mov	r7, r2
 8003334:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003336:	6821      	ldr	r1, [r4, #0]
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	ea36 0303 	bics.w	r3, r6, r3
 800333e:	d101      	bne.n	8003344 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003340:	2000      	movs	r0, #0
}
 8003342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003344:	1c6b      	adds	r3, r5, #1
 8003346:	d0f7      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003348:	b995      	cbnz	r5, 8003370 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800334c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003354:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800335e:	2320      	movs	r3, #32
 8003360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003364:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003368:	2300      	movs	r3, #0
 800336a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003370:	f7fd fee2 	bl	8001138 <HAL_GetTick>
 8003374:	1bc0      	subs	r0, r0, r7
 8003376:	4285      	cmp	r5, r0
 8003378:	d2dd      	bcs.n	8003336 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800337a:	e7e6      	b.n	800334a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800337c <HAL_UART_Init>:
{
 800337c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800337e:	4604      	mov	r4, r0
 8003380:	b340      	cbz	r0, 80033d4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003382:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003386:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800338a:	b91b      	cbnz	r3, 8003394 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800338c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003390:	f001 f998 	bl	80046c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003396:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003398:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800339c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800339e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80033a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033a6:	f7ff ff23 	bl	80031f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033aa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033bc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80033c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80033ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80033ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80033d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
}
 80033d6:	bd10      	pop	{r4, pc}

080033d8 <HAL_UART_Transmit>:
{
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80033de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80033e2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80033e4:	2b20      	cmp	r3, #32
{
 80033e6:	460d      	mov	r5, r1
 80033e8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80033ea:	d14e      	bne.n	800348a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d049      	beq.n	8003484 <HAL_UART_Transmit+0xac>
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	d047      	beq.n	8003484 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80033f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d046      	beq.n	800348a <HAL_UART_Transmit+0xb2>
 80033fc:	2301      	movs	r3, #1
 80033fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	2300      	movs	r3, #0
 8003404:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003406:	2321      	movs	r3, #33	; 0x21
 8003408:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800340c:	f7fd fe94 	bl	8001138 <HAL_GetTick>
 8003410:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003412:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003416:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800341a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800341c:	b29b      	uxth	r3, r3
 800341e:	b96b      	cbnz	r3, 800343c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003420:	463b      	mov	r3, r7
 8003422:	4632      	mov	r2, r6
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff ff80 	bl	800332c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800342c:	b9a8      	cbnz	r0, 800345a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800342e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003430:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003434:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800343c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003440:	3b01      	subs	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003446:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344e:	4620      	mov	r0, r4
 8003450:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003452:	d10e      	bne.n	8003472 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003454:	f7ff ff6a 	bl	800332c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003458:	b110      	cbz	r0, 8003460 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800345a:	2003      	movs	r0, #3
 800345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003460:	882b      	ldrh	r3, [r5, #0]
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	b943      	cbnz	r3, 8003480 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800346e:	3502      	adds	r5, #2
 8003470:	e7d3      	b.n	800341a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	f7ff ff5b 	bl	800332c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003476:	2800      	cmp	r0, #0
 8003478:	d1ef      	bne.n	800345a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	782a      	ldrb	r2, [r5, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	3501      	adds	r5, #1
 8003482:	e7ca      	b.n	800341a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800348a:	2002      	movs	r0, #2
}
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003490 <HAL_UART_Receive>:
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8003496:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800349a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 800349c:	2b20      	cmp	r3, #32
{
 800349e:	460d      	mov	r5, r1
 80034a0:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80034a2:	d151      	bne.n	8003548 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d04c      	beq.n	8003542 <HAL_UART_Receive+0xb2>
 80034a8:	2a00      	cmp	r2, #0
 80034aa:	d04a      	beq.n	8003542 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80034ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d049      	beq.n	8003548 <HAL_UART_Receive+0xb8>
 80034b4:	2301      	movs	r3, #1
 80034b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034be:	2322      	movs	r3, #34	; 0x22
 80034c0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80034c4:	f7fd fe38 	bl	8001138 <HAL_GetTick>
 80034c8:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80034ca:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034ce:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80034d2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80034d4:	b280      	uxth	r0, r0
 80034d6:	b930      	cbnz	r0, 80034e6 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80034d8:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80034da:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 80034de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80034e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80034e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034e8:	4632      	mov	r2, r6
      huart->RxXferCount--;
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034f0:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f8:	4620      	mov	r0, r4
 80034fa:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034fc:	d112      	bne.n	8003524 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	f7ff ff15 	bl	800332c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003502:	b110      	cbz	r0, 800350a <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8003504:	2003      	movs	r0, #3
 8003506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350a:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800350c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800350e:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003510:	b922      	cbnz	r2, 800351c <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003516:	f825 3b02 	strh.w	r3, [r5], #2
 800351a:	e7da      	b.n	80034d2 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f825 3b01 	strh.w	r3, [r5], #1
 8003522:	e7d6      	b.n	80034d2 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003524:	f7ff ff02 	bl	800332c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003528:	2800      	cmp	r0, #0
 800352a:	d1eb      	bne.n	8003504 <HAL_UART_Receive+0x74>
 800352c:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800352e:	6921      	ldr	r1, [r4, #16]
 8003530:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003532:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003534:	b911      	cbnz	r1, 800353c <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003536:	702b      	strb	r3, [r5, #0]
 8003538:	4615      	mov	r5, r2
 800353a:	e7ca      	b.n	80034d2 <HAL_UART_Receive+0x42>
 800353c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003540:	e7f9      	b.n	8003536 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8003542:	2001      	movs	r0, #1
 8003544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003548:	2002      	movs	r0, #2
}
 800354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003550 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8003550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t in_buff[2] = {0};
 8003552:	2300      	movs	r3, #0
 8003554:	f8ad 3014 	strh.w	r3, [sp, #20]

	switch (ratio)
 8003558:	2903      	cmp	r1, #3
 800355a:	d81c      	bhi.n	8003596 <set_oss+0x46>
 800355c:	e8df f001 	tbb	[pc, r1]
 8003560:	19171b02 	.word	0x19171b02
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8003564:	2305      	movs	r3, #5
			oss->wait_time = BMP_OSS3_CONV_TIME;
			break;
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8003566:	7043      	strb	r3, [r0, #1]
		}
	}

	oss->ratio = ratio;
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8003568:	2332      	movs	r3, #50	; 0x32
	oss->ratio = ratio;
 800356a:	7001      	strb	r1, [r0, #0]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800356c:	9302      	str	r3, [sp, #8]
 800356e:	2302      	movs	r3, #2
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8003570:	0189      	lsls	r1, r1, #6
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	ab05      	add	r3, sp, #20
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8003576:	f88d 1015 	strb.w	r1, [sp, #21]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	22f4      	movs	r2, #244	; 0xf4
 800357e:	2301      	movs	r3, #1
 8003580:	21ee      	movs	r1, #238	; 0xee
 8003582:	4806      	ldr	r0, [pc, #24]	; (800359c <set_oss+0x4c>)
 8003584:	f7fe fc1e 	bl	8001dc4 <HAL_I2C_Mem_Write>
}
 8003588:	b007      	add	sp, #28
 800358a:	f85d fb04 	ldr.w	pc, [sp], #4
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800358e:	230e      	movs	r3, #14
 8003590:	e7e9      	b.n	8003566 <set_oss+0x16>
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8003592:	231a      	movs	r3, #26
 8003594:	e7e7      	b.n	8003566 <set_oss+0x16>
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8003596:	2308      	movs	r3, #8
 8003598:	e7e5      	b.n	8003566 <set_oss+0x16>
 800359a:	bf00      	nop
 800359c:	200001f8 	.word	0x200001f8

080035a0 <BMP180_Init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void BMP180_Init (bmp_t * bmp)
{
 80035a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80035a4:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80035a6:	2701      	movs	r7, #1
 80035a8:	f04f 0932 	mov.w	r9, #50	; 0x32
{
 80035ac:	b08b      	sub	sp, #44	; 0x2c
	uint8_t out_buff = 0;
 80035ae:	ad0a      	add	r5, sp, #40	; 0x28
 80035b0:	f805 4d18 	strb.w	r4, [r5, #-24]!
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80035b4:	6004      	str	r4, [r0, #0]
{
 80035b6:	4606      	mov	r6, r0
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80035b8:	463b      	mov	r3, r7
 80035ba:	22d0      	movs	r2, #208	; 0xd0
 80035bc:	21ef      	movs	r1, #239	; 0xef
 80035be:	f8cd 9008 	str.w	r9, [sp, #8]
 80035c2:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80035c6:	481a      	ldr	r0, [pc, #104]	; (8003630 <BMP180_Init+0x90>)
 80035c8:	f7fe fc92 	bl	8001ef0 <HAL_I2C_Mem_Read>
	if (BMP_CHIP_ID_VAL != out_buff)
 80035cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80035d0:	f04f 0816 	mov.w	r8, #22
	uint8_t ret_val = NO_ERR;
 80035d4:	3b55      	subs	r3, #85	; 0x55
 80035d6:	bf18      	it	ne
 80035d8:	2301      	movne	r3, #1
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80035da:	4642      	mov	r2, r8
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80035dc:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80035e0:	4621      	mov	r1, r4
 80035e2:	4628      	mov	r0, r5
 80035e4:	f001 fbb0 	bl	8004d48 <memset>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80035e8:	22aa      	movs	r2, #170	; 0xaa
 80035ea:	21ef      	movs	r1, #239	; 0xef
 80035ec:	e88d 0320 	stmia.w	sp, {r5, r8, r9}
 80035f0:	463b      	mov	r3, r7
 80035f2:	480f      	ldr	r0, [pc, #60]	; (8003630 <BMP180_Init+0x90>)
 80035f4:	f7fe fc7c 	bl	8001ef0 <HAL_I2C_Mem_Read>
 80035f8:	4621      	mov	r1, r4
	bmp_err_t ret_val = NO_ERR;
 80035fa:	4622      	mov	r2, r4
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80035fc:	186b      	adds	r3, r5, r1
 80035fe:	5c68      	ldrb	r0, [r5, r1]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003606:	b21b      	sxth	r3, r3
 8003608:	5273      	strh	r3, [r6, r1]
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800360a:	3301      	adds	r3, #1
 800360c:	b29b      	uxth	r3, r3
			ret_val = GET_CALIB_ERR;
 800360e:	2b01      	cmp	r3, #1
 8003610:	f101 0102 	add.w	r1, r1, #2
 8003614:	bf98      	it	ls
 8003616:	2202      	movls	r2, #2
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++)
 8003618:	2918      	cmp	r1, #24
 800361a:	d1ef      	bne.n	80035fc <BMP180_Init+0x5c>
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800361c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8003620:	2102      	movs	r1, #2
 8003622:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003626:	f7ff ff93 	bl	8003550 <set_oss>
}
 800362a:	b00b      	add	sp, #44	; 0x2c
 800362c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003630:	200001f8 	.word	0x200001f8

08003634 <get_ut>:
*/
int32_t get_ut (void)
{
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8003634:	232e      	movs	r3, #46	; 0x2e
{
 8003636:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8003638:	2501      	movs	r5, #1
 800363a:	2732      	movs	r7, #50	; 0x32
{
 800363c:	b087      	sub	sp, #28
	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800363e:	ac06      	add	r4, sp, #24
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8003640:	4e0f      	ldr	r6, [pc, #60]	; (8003680 <get_ut+0x4c>)
	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8003642:	f804 3d04 	strb.w	r3, [r4, #-4]!
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8003646:	22f4      	movs	r2, #244	; 0xf4
 8003648:	462b      	mov	r3, r5
 800364a:	21ee      	movs	r1, #238	; 0xee
 800364c:	9702      	str	r7, [sp, #8]
 800364e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003652:	4630      	mov	r0, r6
 8003654:	f7fe fbb6 	bl	8001dc4 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8003658:	2005      	movs	r0, #5
 800365a:	f7fd fd73 	bl	8001144 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800365e:	2302      	movs	r3, #2
 8003660:	9702      	str	r7, [sp, #8]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	9400      	str	r4, [sp, #0]
 8003666:	462b      	mov	r3, r5
 8003668:	22f6      	movs	r2, #246	; 0xf6
 800366a:	21ef      	movs	r1, #239	; 0xef
 800366c:	4630      	mov	r0, r6
 800366e:	f7fe fc3f 	bl	8001ef0 <HAL_I2C_Mem_Read>
 8003672:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8003676:	ba40      	rev16	r0, r0

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}
 8003678:	b280      	uxth	r0, r0
 800367a:	b007      	add	sp, #28
 800367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367e:	bf00      	nop
 8003680:	200001f8 	.word	0x200001f8

08003684 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4604      	mov	r4, r0
	int32_t X1 = 0;
	int32_t X2 = 0;
	float temp = 0;

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8003688:	6980      	ldr	r0, [r0, #24]
 800368a:	f7fd fced 	bl	8001068 <__aeabi_f2iz>
 800368e:	8963      	ldrh	r3, [r4, #10]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8003690:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8003694:	1ac0      	subs	r0, r0, r3
 8003696:	8923      	ldrh	r3, [r4, #8]
 8003698:	4358      	muls	r0, r3
 800369a:	13c3      	asrs	r3, r0, #15
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 800369c:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 80036a0:	441a      	add	r2, r3
 80036a2:	02c0      	lsls	r0, r0, #11
 80036a4:	fb90 f0f2 	sdiv	r0, r0, r2
	bmp->data.B5 = X1 + X2;
 80036a8:	4418      	add	r0, r3
 80036aa:	6320      	str	r0, [r4, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80036ac:	3008      	adds	r0, #8
 80036ae:	1100      	asrs	r0, r0, #4
 80036b0:	f7fd fac0 	bl	8000c34 <__aeabi_i2f>
 80036b4:	4908      	ldr	r1, [pc, #32]	; (80036d8 <get_temp+0x54>)
 80036b6:	f7fd fb11 	bl	8000cdc <__aeabi_fmul>

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80036ba:	4908      	ldr	r1, [pc, #32]	; (80036dc <get_temp+0x58>)
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80036bc:	4605      	mov	r5, r0
	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80036be:	f7fd fcb5 	bl	800102c <__aeabi_fcmple>
 80036c2:	b920      	cbnz	r0, 80036ce <get_temp+0x4a>
 80036c4:	4906      	ldr	r1, [pc, #24]	; (80036e0 <get_temp+0x5c>)
 80036c6:	4628      	mov	r0, r5
 80036c8:	f7fd fcba 	bl	8001040 <__aeabi_fcmpge>
 80036cc:	b110      	cbz	r0, 80036d4 <get_temp+0x50>
	{
		bmp->err = GET_TEMP_ERR;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	}

	return temp;
}
 80036d4:	4628      	mov	r0, r5
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	3dcccccd 	.word	0x3dcccccd
 80036dc:	c2200000 	.word	0xc2200000
 80036e0:	42aa0000 	.word	0x42aa0000

080036e4 <get_up>:
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
	uint8_t out_buff[3] = {0};
 80036e4:	2300      	movs	r3, #0
{
 80036e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e8:	b089      	sub	sp, #36	; 0x24
	uint8_t out_buff[3] = {0};
 80036ea:	f8ad 301c 	strh.w	r3, [sp, #28]
	long up = 0;

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80036ee:	2401      	movs	r4, #1
	uint8_t out_buff[3] = {0};
 80036f0:	f88d 301e 	strb.w	r3, [sp, #30]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80036f4:	2732      	movs	r7, #50	; 0x32
	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80036f6:	2334      	movs	r3, #52	; 0x34
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80036f8:	4e17      	ldr	r6, [pc, #92]	; (8003758 <get_up+0x74>)
	uint8_t out_buff[3] = {0};
 80036fa:	ad07      	add	r5, sp, #28
{
 80036fc:	f8ad 0014 	strh.w	r0, [sp, #20]
	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8003700:	f88d 301c 	strb.w	r3, [sp, #28]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8003704:	22f4      	movs	r2, #244	; 0xf4
 8003706:	4623      	mov	r3, r4
 8003708:	21ee      	movs	r1, #238	; 0xee
 800370a:	9702      	str	r7, [sp, #8]
 800370c:	9401      	str	r4, [sp, #4]
 800370e:	9500      	str	r5, [sp, #0]
 8003710:	4630      	mov	r0, r6
 8003712:	f7fe fb57 	bl	8001dc4 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 8003716:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800371a:	f7fd fd13 	bl	8001144 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800371e:	2303      	movs	r3, #3
 8003720:	9702      	str	r7, [sp, #8]
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	9500      	str	r5, [sp, #0]
 8003726:	4623      	mov	r3, r4
 8003728:	22f6      	movs	r2, #246	; 0xf6
 800372a:	21ef      	movs	r1, #239	; 0xef
 800372c:	4630      	mov	r0, r6
 800372e:	f7fe fbdf 	bl	8001ef0 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 8003732:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003736:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8003740:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8003744:	4403      	add	r3, r0
 8003746:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800374a:	f1c0 0008 	rsb	r0, r0, #8
	return up;
}
 800374e:	fa43 f000 	asr.w	r0, r3, r0
 8003752:	b009      	add	sp, #36	; 0x24
 8003754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003756:	bf00      	nop
 8003758:	200001f8 	.word	0x200001f8

0800375c <get_pressure>:
	B6 = bmp->data.B5 - 4000;
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
	X2 = bmp->calib.AC2 * B6 / 0x800;
	X3 = X1 + X2;
	B3 = (((bmp->calib.AC1 * 4 + X3) << bmp->oss.ratio) +2) / 4;
	X1 = bmp->calib.AC3 * B6 / 0x2000;
 800375c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
{
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
	X2 = (bmp->calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8003762:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	B6 = bmp->data.B5 - 4000;
 8003766:	6b06      	ldr	r6, [r0, #48]	; 0x30
	X1 = bmp->calib.AC3 * B6 / 0x2000;
 8003768:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
	B6 = bmp->data.B5 - 4000;
 800376c:	f5a6 667a 	sub.w	r6, r6, #4000	; 0xfa0
	X1 = bmp->calib.AC3 * B6 / 0x2000;
 8003770:	4371      	muls	r1, r6
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8003772:	fb06 f306 	mul.w	r3, r6, r6
	X1 = bmp->calib.AC3 * B6 / 0x2000;
 8003776:	fb91 f1f2 	sdiv	r1, r1, r2
	X2 = (bmp->calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 800377a:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 800377e:	131b      	asrs	r3, r3, #12
	X2 = (bmp->calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8003780:	435a      	muls	r2, r3
 8003782:	fb92 f2f5 	sdiv	r2, r2, r5
	X3 = ((X1 + X2) + 2) / 0x4;
 8003786:	2504      	movs	r5, #4
 8003788:	4411      	add	r1, r2
 800378a:	3102      	adds	r1, #2
 800378c:	fb91 f1f5 	sdiv	r1, r1, r5
	B4 = bmp->calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8003790:	88c2      	ldrh	r2, [r0, #6]
 8003792:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003796:	4351      	muls	r1, r2
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8003798:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	X2 = bmp->calib.AC2 * B6 / 0x800;
 800379c:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80037a0:	435a      	muls	r2, r3
 80037a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
	X2 = bmp->calib.AC2 * B6 / 0x800;
 80037a6:	437e      	muls	r6, r7
	X1 = (bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80037a8:	fb92 f2f3 	sdiv	r2, r2, r3
	X2 = bmp->calib.AC2 * B6 / 0x800;
 80037ac:	fb96 f6f3 	sdiv	r6, r6, r3
	B3 = (((bmp->calib.AC1 * 4 + X3) << bmp->oss.ratio) +2) / 4;
 80037b0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80037b4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
	X3 = X1 + X2;
 80037b8:	4432      	add	r2, r6
	B3 = (((bmp->calib.AC1 * 4 + X3) << bmp->oss.ratio) +2) / 4;
 80037ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80037be:	40a2      	lsls	r2, r4
 80037c0:	3202      	adds	r2, #2
 80037c2:	fb92 f2f5 	sdiv	r2, r2, r5
	B7 = ((unsigned long)bmp->uncomp.press - B3) * (50000 >> bmp->oss.ratio);
 80037c6:	69c0      	ldr	r0, [r0, #28]
	B4 = bmp->calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80037c8:	0bc9      	lsrs	r1, r1, #15
	B7 = ((unsigned long)bmp->uncomp.press - B3) * (50000 >> bmp->oss.ratio);
 80037ca:	1a80      	subs	r0, r0, r2
 80037cc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80037d0:	fa42 f304 	asr.w	r3, r2, r4

	if (B7 < 0x80000000)
 80037d4:	4343      	muls	r3, r0
	{
		p = (B7 * 2) / B4;
	}
	else
	{
		p = (B7 / B4) * 2;
 80037d6:	bf4e      	itee	mi
 80037d8:	fbb3 f3f1 	udivmi	r3, r3, r1
		p = (B7 * 2) / B4;
 80037dc:	005b      	lslpl	r3, r3, #1
 80037de:	fbb3 f3f1 	udivpl	r3, r3, r1
	}

	X1 = (p / 0x100 * (p / 0x100));
 80037e2:	f44f 7080 	mov.w	r0, #256	; 0x100
		p = (B7 / B4) * 2;
 80037e6:	bf48      	it	mi
 80037e8:	005b      	lslmi	r3, r3, #1
	X1 = (p / 0x100 * (p / 0x100));
 80037ea:	fb93 f0f0 	sdiv	r0, r3, r0
	X1 = (X1 * 3038) / 0x10000;
 80037ee:	f640 32de 	movw	r2, #3038	; 0xbde
	X2 = (-7357 * p) / 0x10000;
 80037f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	X1 = (p / 0x100 * (p / 0x100));
 80037f6:	4340      	muls	r0, r0
	X1 = (X1 * 3038) / 0x10000;
 80037f8:	4342      	muls	r2, r0
	X2 = (-7357 * p) / 0x10000;
 80037fa:	4806      	ldr	r0, [pc, #24]	; (8003814 <get_pressure+0xb8>)
 80037fc:	4358      	muls	r0, r3
 80037fe:	fb90 f0f1 	sdiv	r0, r0, r1
	p = p + (X1 + X2 + 3791) / 0x10;
 8003802:	eb00 4022 	add.w	r0, r0, r2, asr #16
 8003806:	2210      	movs	r2, #16
 8003808:	f600 60cf 	addw	r0, r0, #3791	; 0xecf
 800380c:	fb90 f0f2 	sdiv	r0, r0, r2

	return p;
}
 8003810:	4418      	add	r0, r3
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003814:	ffffe343 	.word	0xffffe343

08003818 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - altitude in meters.
*/
float get_altitude (bmp_t * bmp)
{
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4605      	mov	r5, r0
	float altitude = 0;

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800381c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800381e:	f7fd fa09 	bl	8000c34 <__aeabi_i2f>
 8003822:	4917      	ldr	r1, [pc, #92]	; (8003880 <get_altitude+0x68>)
 8003824:	f7fd fb0e 	bl	8000e44 <__aeabi_fdiv>
 8003828:	f7fc fdf6 	bl	8000418 <__aeabi_f2d>
 800382c:	a310      	add	r3, pc, #64	; (adr r3, 8003870 <get_altitude+0x58>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f002 f865 	bl	8005900 <pow>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	2000      	movs	r0, #0
 800383c:	4911      	ldr	r1, [pc, #68]	; (8003884 <get_altitude+0x6c>)
 800383e:	f7fc fc8b 	bl	8000158 <__aeabi_dsub>
 8003842:	a30d      	add	r3, pc, #52	; (adr r3, 8003878 <get_altitude+0x60>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fe3a 	bl	80004c0 <__aeabi_dmul>
 800384c:	f7fd f8e8 	bl	8000a20 <__aeabi_d2f>

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8003850:	490d      	ldr	r1, [pc, #52]	; (8003888 <get_altitude+0x70>)
	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8003852:	4604      	mov	r4, r0
	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8003854:	f7fd fbea 	bl	800102c <__aeabi_fcmple>
 8003858:	b920      	cbnz	r0, 8003864 <get_altitude+0x4c>
 800385a:	490c      	ldr	r1, [pc, #48]	; (800388c <get_altitude+0x74>)
 800385c:	4620      	mov	r0, r4
 800385e:	f7fd fbef 	bl	8001040 <__aeabi_fcmpge>
 8003862:	b110      	cbz	r0, 800386a <get_altitude+0x52>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8003864:	2305      	movs	r3, #5
 8003866:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
	}

	return altitude;
}
 800386a:	4620      	mov	r0, r4
 800386c:	bd38      	pop	{r3, r4, r5, pc}
 800386e:	bf00      	nop
 8003870:	ccd9456c 	.word	0xccd9456c
 8003874:	3fc85b95 	.word	0x3fc85b95
 8003878:	00000000 	.word	0x00000000
 800387c:	40e5a540 	.word	0x40e5a540
 8003880:	47c5e680 	.word	0x47c5e680
 8003884:	3ff00000 	.word	0x3ff00000
 8003888:	c3fa0000 	.word	0xc3fa0000
 800388c:	460ca000 	.word	0x460ca000

08003890 <BMP180_ReadAll>:
* @brief:    - Read all the information.
* @param[in] - struct of type bmp_t
* @return    - no return.
*/
void BMP180_ReadAll(bmp_t *bmp)
{
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
	bmp->uncomp.temp = get_ut();
 8003894:	f7ff fece 	bl	8003634 <get_ut>
 8003898:	f7fd f9cc 	bl	8000c34 <__aeabi_i2f>
 800389c:	61a0      	str	r0, [r4, #24]
	bmp->data.temp = get_temp(bmp);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fef0 	bl	8003684 <get_temp>
 80038a4:	62a0      	str	r0, [r4, #40]	; 0x28
	bmp->uncomp.press = get_up(bmp->oss);
 80038a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038a8:	f7ff ff1c 	bl	80036e4 <get_up>
 80038ac:	61e0      	str	r0, [r4, #28]
	bmp->data.press = get_pressure(bmp);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff ff54 	bl	800375c <get_pressure>
 80038b4:	62e0      	str	r0, [r4, #44]	; 0x2c
	bmp->data.altitude = get_altitude(bmp);
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff ffae 	bl	8003818 <get_altitude>
 80038bc:	6360      	str	r0, [r4, #52]	; 0x34
 80038be:	bd10      	pop	{r4, pc}

080038c0 <HAL_TIM_IC_CaptureCallback>:
uint8_t Is_First_Captured = 0;
uint32_t Distance = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80038c0:	7f03      	ldrb	r3, [r0, #28]
{
 80038c2:	b570      	push	{r4, r5, r6, lr}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80038c4:	2b08      	cmp	r3, #8
{
 80038c6:	4605      	mov	r5, r0
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80038c8:	d140      	bne.n	800394c <HAL_TIM_IC_CaptureCallback+0x8c>
	{
		if(Is_First_Captured == 0)
 80038ca:	4e22      	ldr	r6, [pc, #136]	; (8003954 <HAL_TIM_IC_CaptureCallback+0x94>)
 80038cc:	7833      	ldrb	r3, [r6, #0]
 80038ce:	4634      	mov	r4, r6
 80038d0:	b993      	cbnz	r3, 80038f8 <HAL_TIM_IC_CaptureCallback+0x38>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80038d2:	210c      	movs	r1, #12
 80038d4:	f7ff f8f3 	bl	8002abe <HAL_TIM_ReadCapturedValue>
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x98>)
 80038da:	6018      	str	r0, [r3, #0]
			Is_First_Captured = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	7033      	strb	r3, [r6, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e8:	0412      	lsls	r2, r2, #16
 80038ea:	0c12      	lsrs	r2, r2, #16
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f4:	621a      	str	r2, [r3, #32]
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
		}
		else if(Is_First_Captured == 1)
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d127      	bne.n	800394c <HAL_TIM_IC_CaptureCallback+0x8c>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80038fc:	210c      	movs	r1, #12
 80038fe:	f7ff f8de 	bl	8002abe <HAL_TIM_ReadCapturedValue>
			__HAL_TIM_SET_COUNTER(htim, 0);
 8003902:	2200      	movs	r2, #0
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003906:	4916      	ldr	r1, [pc, #88]	; (8003960 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003908:	6018      	str	r0, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

			if(IC_Val2 > IC_Val1) {Difference = IC_Val2 - IC_Val1;}
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	4290      	cmp	r0, r2
 8003914:	d91b      	bls.n	800394e <HAL_TIM_IC_CaptureCallback+0x8e>
 8003916:	1a80      	subs	r0, r0, r2
			else if(IC_Val1 > IC_Val2) {Difference = IC_Val1 - IC_Val2;}
 8003918:	6008      	str	r0, [r1, #0]

			Distance = Difference * 34/2000;
 800391a:	2222      	movs	r2, #34	; 0x22
 800391c:	6809      	ldr	r1, [r1, #0]
 800391e:	434a      	muls	r2, r1
 8003920:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003924:	fbb2 f2f1 	udiv	r2, r2, r1
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800392a:	600a      	str	r2, [r1, #0]
			Is_First_Captured = 0;
 800392c:	2200      	movs	r2, #0
 800392e:	7022      	strb	r2, [r4, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003936:	0412      	lsls	r2, r2, #16
 8003938:	0c12      	lsrs	r2, r2, #16
 800393a:	621a      	str	r2, [r3, #32]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68d3      	ldr	r3, [r2, #12]
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	60d3      	str	r3, [r2, #12]
 800394c:	bd70      	pop	{r4, r5, r6, pc}
			else if(IC_Val1 > IC_Val2) {Difference = IC_Val1 - IC_Val2;}
 800394e:	d2e4      	bcs.n	800391a <HAL_TIM_IC_CaptureCallback+0x5a>
 8003950:	1a10      	subs	r0, r2, r0
 8003952:	e7e1      	b.n	8003918 <HAL_TIM_IC_CaptureCallback+0x58>
 8003954:	2000013c 	.word	0x2000013c
 8003958:	20000134 	.word	0x20000134
 800395c:	20000138 	.word	0x20000138
 8003960:	2000012c 	.word	0x2000012c
 8003964:	20000130 	.word	0x20000130
 8003968:	2000024c 	.word	0x2000024c

0800396c <HCSR04_Read>:
		}
	}
}

uint32_t HCSR04_Read( void )
{
 800396c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800396e:	4c11      	ldr	r4, [pc, #68]	; (80039b4 <HCSR04_Read+0x48>)
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003976:	4620      	mov	r0, r4
 8003978:	f7fd ffd2 	bl	8001920 <HAL_GPIO_WritePin>
	delay_us(2);
 800397c:	2002      	movs	r0, #2
 800397e:	f000 ff07 	bl	8004790 <delay_us>

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8003982:	2201      	movs	r2, #1
 8003984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003988:	4620      	mov	r0, r4
 800398a:	f7fd ffc9 	bl	8001920 <HAL_GPIO_WritePin>
	delay_us(10);
 800398e:	200a      	movs	r0, #10
 8003990:	f000 fefe 	bl	8004790 <delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003994:	4620      	mov	r0, r4
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800399c:	f7fd ffc0 	bl	8001920 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC4);
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HCSR04_Read+0x4c>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68d3      	ldr	r3, [r2, #12]
 80039a6:	f043 0310 	orr.w	r3, r3, #16
 80039aa:	60d3      	str	r3, [r2, #12]

	return Distance;
}
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HCSR04_Read+0x50>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	bd10      	pop	{r4, pc}
 80039b2:	bf00      	nop
 80039b4:	40010c00 	.word	0x40010c00
 80039b8:	2000024c 	.word	0x2000024c
 80039bc:	20000130 	.word	0x20000130

080039c0 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c0:	2301      	movs	r3, #1
{
 80039c2:	b510      	push	{r4, lr}
 80039c4:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80039c8:	2310      	movs	r3, #16
 80039ca:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80039cc:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ce:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80039d0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80039d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039d8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039da:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80039dc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039de:	f7fe fba7 	bl	8002130 <HAL_RCC_OscConfig>
 80039e2:	b100      	cbz	r0, 80039e6 <SystemClock_Config+0x26>
 80039e4:	e7fe      	b.n	80039e4 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039e6:	230f      	movs	r3, #15
 80039e8:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ee:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039f0:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039f2:	4621      	mov	r1, r4
 80039f4:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039f8:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039fa:	f7fe fd61 	bl	80024c0 <HAL_RCC_ClockConfig>
 80039fe:	b100      	cbz	r0, 8003a02 <SystemClock_Config+0x42>
 8003a00:	e7fe      	b.n	8003a00 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a06:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a08:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003a0a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0c:	f7fe fe22 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8003a10:	4604      	mov	r4, r0
 8003a12:	b100      	cbz	r0, 8003a16 <SystemClock_Config+0x56>
 8003a14:	e7fe      	b.n	8003a14 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a16:	f7fe fdf7 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8003a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a22:	f7fd fe6f 	bl	8001704 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003a26:	2004      	movs	r0, #4
 8003a28:	f7fd fe82 	bl	8001730 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4621      	mov	r1, r4
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	f7fd fe26 	bl	8001684 <HAL_NVIC_SetPriority>
}
 8003a38:	b014      	add	sp, #80	; 0x50
 8003a3a:	bd10      	pop	{r4, pc}

08003a3c <main>:
{
 8003a3c:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|D4_Pin|D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUILTIN_LED_Pin */
  GPIO_InitStruct.Pin = BUILTIN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a40:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = BUILTIN_LED_Pin;
 8003a44:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{
 8003a48:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8003a4a:	f7fd fb57 	bl	80010fc <HAL_Init>
  SystemClock_Config();
 8003a4e:	f7ff ffb7 	bl	80039c0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a52:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <main+0x264>)
  HAL_GPIO_WritePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin, GPIO_PIN_RESET);
 8003a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a58:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin, GPIO_PIN_RESET);
 8003a5a:	4892      	ldr	r0, [pc, #584]	; (8003ca4 <main+0x268>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5c:	f042 0210 	orr.w	r2, r2, #16
 8003a60:	619a      	str	r2, [r3, #24]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	f002 0210 	and.w	r2, r2, #16
 8003a68:	9201      	str	r2, [sp, #4]
 8003a6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	f042 0204 	orr.w	r2, r2, #4
 8003a72:	619a      	str	r2, [r3, #24]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	f002 0204 	and.w	r2, r2, #4
 8003a7a:	9202      	str	r2, [sp, #8]
 8003a7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	f042 0208 	orr.w	r2, r2, #8
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin, GPIO_PIN_RESET);
 8003a88:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin, GPIO_PIN_RESET);
 8003a92:	f7fd ff45 	bl	8001920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, D5_Pin|D3_Pin, GPIO_PIN_RESET);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2141      	movs	r1, #65	; 0x41
 8003a9a:	4883      	ldr	r0, [pc, #524]	; (8003ca8 <main+0x26c>)
 8003a9c:	f7fd ff40 	bl	8001920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|D4_Pin|D6_Pin, GPIO_PIN_RESET);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003aa6:	4881      	ldr	r0, [pc, #516]	; (8003cac <main+0x270>)
 8003aa8:	f7fd ff3a 	bl	8001920 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BUILTIN_LED_GPIO_Port, &GPIO_InitStruct);
 8003aac:	a911      	add	r1, sp, #68	; 0x44
 8003aae:	487d      	ldr	r0, [pc, #500]	; (8003ca4 <main+0x268>)
  GPIO_InitStruct.Pin = BUILTIN_LED_Pin;
 8003ab0:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab2:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab6:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUILTIN_LED_GPIO_Port, &GPIO_InitStruct);
 8003ab8:	f7fd fe4c 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D3_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D3_Pin;
 8003abc:	2341      	movs	r3, #65	; 0x41
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abe:	a911      	add	r1, sp, #68	; 0x44
 8003ac0:	4879      	ldr	r0, [pc, #484]	; (8003ca8 <main+0x26c>)
  GPIO_InitStruct.Pin = D5_Pin|D3_Pin;
 8003ac2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac4:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f7fd fe43 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin D4_Pin D6_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|D4_Pin|D6_Pin;
 8003ace:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	a911      	add	r1, sp, #68	; 0x44
 8003ad4:	4875      	ldr	r0, [pc, #468]	; (8003cac <main+0x270>)
  GPIO_InitStruct.Pin = TRIG_Pin|D4_Pin|D6_Pin;
 8003ad6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad8:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ade:	f7fd fe39 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCRT_LF_Pin */
  GPIO_InitStruct.Pin = TCRT_LF_Pin;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TCRT_LF_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	a911      	add	r1, sp, #68	; 0x44
 8003ae8:	486f      	ldr	r0, [pc, #444]	; (8003ca8 <main+0x26c>)
  GPIO_InitStruct.Pin = TCRT_LF_Pin;
 8003aea:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aec:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aee:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(TCRT_LF_GPIO_Port, &GPIO_InitStruct);
 8003af0:	f7fd fe30 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCRT_RG_Pin */
  GPIO_InitStruct.Pin = TCRT_RG_Pin;
 8003af4:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TCRT_RG_GPIO_Port, &GPIO_InitStruct);
 8003af6:	486d      	ldr	r0, [pc, #436]	; (8003cac <main+0x270>)
 8003af8:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pin = TCRT_RG_Pin;
 8003afa:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003afc:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003afe:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(TCRT_RG_GPIO_Port, &GPIO_InitStruct);
 8003b00:	f7fd fe28 	bl	8001754 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 9600;
 8003b04:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 8003b08:	4869      	ldr	r0, [pc, #420]	; (8003cb0 <main+0x274>)
  huart2.Init.BaudRate = 9600;
 8003b0a:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <main+0x278>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8003b0e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b12:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b14:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b16:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b18:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b1e:	f7ff fc2d 	bl	800337c <HAL_UART_Init>
 8003b22:	b100      	cbz	r0, 8003b26 <main+0xea>
 8003b24:	e7fe      	b.n	8003b24 <main+0xe8>
  htim1.Init.Prescaler = 8-1;
 8003b26:	f04f 0c07 	mov.w	ip, #7
  htim1.Instance = TIM1;
 8003b2a:	4c63      	ldr	r4, [pc, #396]	; (8003cb8 <main+0x27c>)
  htim1.Init.Prescaler = 8-1;
 8003b2c:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <main+0x280>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 8-1;
 8003b30:	e884 1008 	stmia.w	r4, {r3, ip}
  htim1.Init.Period = 8000-1;
 8003b34:	f641 733f 	movw	r3, #7999	; 0x1f3f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b38:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b3a:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3c:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b3e:	4620      	mov	r0, r4
  htim1.Init.Period = 8000-1;
 8003b40:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b42:	f7ff f8bd 	bl	8002cc0 <HAL_TIM_Base_Init>
 8003b46:	b100      	cbz	r0, 8003b4a <main+0x10e>
 8003b48:	e7fe      	b.n	8003b48 <main+0x10c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b4a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8003b4e:	ad18      	add	r5, sp, #96	; 0x60
 8003b50:	f845 7d48 	str.w	r7, [r5, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b54:	4629      	mov	r1, r5
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fe fef8 	bl	800294c <HAL_TIM_ConfigClockSource>
 8003b5c:	b100      	cbz	r0, 8003b60 <main+0x124>
 8003b5e:	e7fe      	b.n	8003b5e <main+0x122>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff f8c7 	bl	8002cf4 <HAL_TIM_PWM_Init>
 8003b66:	b100      	cbz	r0, 8003b6a <main+0x12e>
 8003b68:	e7fe      	b.n	8003b68 <main+0x12c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b6e:	a904      	add	r1, sp, #16
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff fb19 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b76:	4602      	mov	r2, r0
 8003b78:	b100      	cbz	r0, 8003b7c <main+0x140>
 8003b7a:	e7fe      	b.n	8003b7a <main+0x13e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b7c:	2360      	movs	r3, #96	; 0x60
 8003b7e:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 5000;
 8003b80:	f241 3388 	movw	r3, #5000	; 0x1388
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b84:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b86:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b88:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b8a:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b8c:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b8e:	a90a      	add	r1, sp, #40	; 0x28
 8003b90:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5000;
 8003b92:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b94:	f7ff f90e 	bl	8002db4 <HAL_TIM_PWM_ConfigChannel>
 8003b98:	b100      	cbz	r0, 8003b9c <main+0x160>
 8003b9a:	e7fe      	b.n	8003b9a <main+0x15e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	a90a      	add	r1, sp, #40	; 0x28
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff f907 	bl	8002db4 <HAL_TIM_PWM_ConfigChannel>
 8003ba6:	b100      	cbz	r0, 8003baa <main+0x16e>
 8003ba8:	e7fe      	b.n	8003ba8 <main+0x16c>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8003baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bae:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bb0:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bb2:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bb4:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bb6:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bb8:	a911      	add	r1, sp, #68	; 0x44
 8003bba:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bbc:	9616      	str	r6, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8003bbe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bc0:	f7ff facc 	bl	800315c <HAL_TIMEx_ConfigBreakDeadTime>
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	b100      	cbz	r0, 8003bca <main+0x18e>
 8003bc8:	e7fe      	b.n	8003bc8 <main+0x18c>
  HAL_TIM_MspPostInit(&htim1);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 fd44 	bl	8004658 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = 984-1;
 8003bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bd4:	f240 3ed7 	movw	lr, #983	; 0x3d7
  htim2.Instance = TIM2;
 8003bd8:	4c39      	ldr	r4, [pc, #228]	; (8003cc0 <main+0x284>)
  htim2.Init.Prescaler = 984-1;
 8003bda:	e884 4008 	stmia.w	r4, {r3, lr}
  htim2.Init.Period = 255-1;
 8003bde:	23fe      	movs	r3, #254	; 0xfe
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003be0:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be2:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 255-1;
 8003be4:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be6:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be8:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bea:	f7ff f869 	bl	8002cc0 <HAL_TIM_Base_Init>
 8003bee:	b100      	cbz	r0, 8003bf2 <main+0x1b6>
 8003bf0:	e7fe      	b.n	8003bf0 <main+0x1b4>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bf2:	a90a      	add	r1, sp, #40	; 0x28
 8003bf4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf6:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bf8:	f7fe fea8 	bl	800294c <HAL_TIM_ConfigClockSource>
 8003bfc:	b100      	cbz	r0, 8003c00 <main+0x1c4>
 8003bfe:	e7fe      	b.n	8003bfe <main+0x1c2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c00:	482f      	ldr	r0, [pc, #188]	; (8003cc0 <main+0x284>)
 8003c02:	f7ff f877 	bl	8002cf4 <HAL_TIM_PWM_Init>
 8003c06:	b100      	cbz	r0, 8003c0a <main+0x1ce>
 8003c08:	e7fe      	b.n	8003c08 <main+0x1cc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0a:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0c:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c0e:	4629      	mov	r1, r5
 8003c10:	482b      	ldr	r0, [pc, #172]	; (8003cc0 <main+0x284>)
 8003c12:	f7ff fac9 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c16:	b100      	cbz	r0, 8003c1a <main+0x1de>
 8003c18:	e7fe      	b.n	8003c18 <main+0x1dc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c1a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003c1c:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c1e:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c20:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c22:	2204      	movs	r2, #4
 8003c24:	a911      	add	r1, sp, #68	; 0x44
 8003c26:	4826      	ldr	r0, [pc, #152]	; (8003cc0 <main+0x284>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c28:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c2a:	f7ff f8c3 	bl	8002db4 <HAL_TIM_PWM_ConfigChannel>
 8003c2e:	4606      	mov	r6, r0
 8003c30:	b100      	cbz	r0, 8003c34 <main+0x1f8>
 8003c32:	e7fe      	b.n	8003c32 <main+0x1f6>
  HAL_TIM_MspPostInit(&htim2);
 8003c34:	4822      	ldr	r0, [pc, #136]	; (8003cc0 <main+0x284>)
 8003c36:	f000 fd0f 	bl	8004658 <HAL_TIM_MspPostInit>
  htim3.Init.Prescaler = 64-1;
 8003c3a:	233f      	movs	r3, #63	; 0x3f
  htim3.Instance = TIM3;
 8003c3c:	4c21      	ldr	r4, [pc, #132]	; (8003cc4 <main+0x288>)
  htim3.Init.Prescaler = 64-1;
 8003c3e:	4822      	ldr	r0, [pc, #136]	; (8003cc8 <main+0x28c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c40:	60a6      	str	r6, [r4, #8]
  htim3.Init.Prescaler = 64-1;
 8003c42:	e884 0009 	stmia.w	r4, {r0, r3}
  htim3.Init.Period = 65535-1;
 8003c46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c4a:	4620      	mov	r0, r4
  htim3.Init.Period = 65535-1;
 8003c4c:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c4e:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c50:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c52:	f7ff f835 	bl	8002cc0 <HAL_TIM_Base_Init>
 8003c56:	b100      	cbz	r0, 8003c5a <main+0x21e>
 8003c58:	e7fe      	b.n	8003c58 <main+0x21c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c5e:	a90a      	add	r1, sp, #40	; 0x28
 8003c60:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c62:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c64:	f7fe fe72 	bl	800294c <HAL_TIM_ConfigClockSource>
 8003c68:	b100      	cbz	r0, 8003c6c <main+0x230>
 8003c6a:	e7fe      	b.n	8003c6a <main+0x22e>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff f85b 	bl	8002d28 <HAL_TIM_IC_Init>
 8003c72:	b100      	cbz	r0, 8003c76 <main+0x23a>
 8003c74:	e7fe      	b.n	8003c74 <main+0x238>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c76:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c78:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fa93 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c82:	b100      	cbz	r0, 8003c86 <main+0x24a>
 8003c84:	e7fe      	b.n	8003c84 <main+0x248>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c86:	2501      	movs	r5, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c88:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c8a:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8003c8c:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003c8e:	220c      	movs	r2, #12
 8003c90:	a911      	add	r1, sp, #68	; 0x44
 8003c92:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c94:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003c96:	f7ff f919 	bl	8002ecc <HAL_TIM_IC_ConfigChannel>
 8003c9a:	b1b8      	cbz	r0, 8003ccc <main+0x290>
 8003c9c:	e7fe      	b.n	8003c9c <main+0x260>
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	40010c00 	.word	0x40010c00
 8003cb0:	20000348 	.word	0x20000348
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	200002c8 	.word	0x200002c8
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	20000308 	.word	0x20000308
 8003cc4:	2000024c 	.word	0x2000024c
 8003cc8:	40000400 	.word	0x40000400
  hi2c1.Instance = I2C1;
 8003ccc:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <main+0x41c>)
  hi2c1.Init.ClockSpeed = 400000;
 8003cce:	4a63      	ldr	r2, [pc, #396]	; (8003e5c <main+0x420>)
 8003cd0:	4963      	ldr	r1, [pc, #396]	; (8003e60 <main+0x424>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cd2:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8003cd4:	e883 0006 	stmia.w	r3, {r1, r2}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8003cdc:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cde:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ce0:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ce2:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ce4:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ce6:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ce8:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cea:	f7fd ffeb 	bl	8001cc4 <HAL_I2C_Init>
 8003cee:	b100      	cbz	r0, 8003cf2 <main+0x2b6>
 8003cf0:	e7fe      	b.n	8003cf0 <main+0x2b4>
  hadc1.Instance = ADC1;
 8003cf2:	4b5c      	ldr	r3, [pc, #368]	; (8003e64 <main+0x428>)
 8003cf4:	4a5c      	ldr	r2, [pc, #368]	; (8003e68 <main+0x42c>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cf6:	6158      	str	r0, [r3, #20]
  hadc1.Instance = ADC1;
 8003cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d00:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003d04:	61da      	str	r2, [r3, #28]
  hadc1.Init.NbrOfConversion = 2;
 8003d06:	2202      	movs	r2, #2
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d08:	6058      	str	r0, [r3, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d0a:	4618      	mov	r0, r3
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d0c:	60dd      	str	r5, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003d0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d10:	f7fd fc0c 	bl	800152c <HAL_ADC_Init>
 8003d14:	b100      	cbz	r0, 8003d18 <main+0x2dc>
 8003d16:	e7fe      	b.n	8003d16 <main+0x2da>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d18:	2301      	movs	r3, #1
  sConfig.Channel = ADC_CHANNEL_4;
 8003d1a:	2404      	movs	r4, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d1c:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003d1e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d20:	a911      	add	r1, sp, #68	; 0x44
 8003d22:	4850      	ldr	r0, [pc, #320]	; (8003e64 <main+0x428>)
  sConfig.Channel = ADC_CHANNEL_4;
 8003d24:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003d26:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d28:	f7fd fac0 	bl	80012ac <HAL_ADC_ConfigChannel>
 8003d2c:	b100      	cbz	r0, 8003d30 <main+0x2f4>
 8003d2e:	e7fe      	b.n	8003d2e <main+0x2f2>
  sConfig.Channel = ADC_CHANNEL_5;
 8003d30:	2305      	movs	r3, #5
 8003d32:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003d34:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d36:	a911      	add	r1, sp, #68	; 0x44
 8003d38:	484a      	ldr	r0, [pc, #296]	; (8003e64 <main+0x428>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003d3a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d3c:	f7fd fab6 	bl	80012ac <HAL_ADC_ConfigChannel>
 8003d40:	b100      	cbz	r0, 8003d44 <main+0x308>
 8003d42:	e7fe      	b.n	8003d42 <main+0x306>
  HAL_TIM_Base_Start_IT(&htim1);
 8003d44:	4849      	ldr	r0, [pc, #292]	; (8003e6c <main+0x430>)
 8003d46:	f7fe fdf4 	bl	8002932 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4848      	ldr	r0, [pc, #288]	; (8003e70 <main+0x434>)
 8003d4e:	f7ff f951 	bl	8002ff4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8003d52:	4848      	ldr	r0, [pc, #288]	; (8003e74 <main+0x438>)
 8003d54:	f7fe fde0 	bl	8002918 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8003d58:	210c      	movs	r1, #12
 8003d5a:	4846      	ldr	r0, [pc, #280]	; (8003e74 <main+0x438>)
 8003d5c:	f7ff f98e 	bl	800307c <HAL_TIM_IC_Start_IT>
  char message[] = {"System started!\n"};
 8003d60:	4b45      	ldr	r3, [pc, #276]	; (8003e78 <main+0x43c>)
 8003d62:	aa11      	add	r2, sp, #68	; 0x44
 8003d64:	f103 0510 	add.w	r5, r3, #16
 8003d68:	4614      	mov	r4, r2
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	c403      	stmia	r4!, {r0, r1}
 8003d72:	42ab      	cmp	r3, r5
 8003d74:	4622      	mov	r2, r4
 8003d76:	d1f7      	bne.n	8003d68 <main+0x32c>
 8003d78:	781b      	ldrb	r3, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
 8003d7a:	2211      	movs	r2, #17
  char message[] = {"System started!\n"};
 8003d7c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
 8003d7e:	a911      	add	r1, sp, #68	; 0x44
 8003d80:	2364      	movs	r3, #100	; 0x64
 8003d82:	483e      	ldr	r0, [pc, #248]	; (8003e7c <main+0x440>)
 8003d84:	f7ff fb28 	bl	80033d8 <HAL_UART_Transmit>
  System_Init();
 8003d88:	f000 fe00 	bl	800498c <System_Init>
  Timer_Init(&polling_timer, CONTINUOUS_MODE);
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	483c      	ldr	r0, [pc, #240]	; (8003e80 <main+0x444>)
 8003d90:	f000 fd0a 	bl	80047a8 <Timer_Init>
  Timer_Start(&polling_timer, HAL_GetTick(), SENSORS_POLL_INTERVAL);
 8003d94:	f7fd f9d0 	bl	8001138 <HAL_GetTick>
 8003d98:	f247 5230 	movw	r2, #30000	; 0x7530
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4838      	ldr	r0, [pc, #224]	; (8003e80 <main+0x444>)
 8003da0:	f000 fd07 	bl	80047b2 <Timer_Start>
  Timer_Init(&led_timer, CONTINUOUS_MODE);
 8003da4:	2101      	movs	r1, #1
 8003da6:	4837      	ldr	r0, [pc, #220]	; (8003e84 <main+0x448>)
 8003da8:	f000 fcfe 	bl	80047a8 <Timer_Init>
  Timer_Start(&led_timer, HAL_GetTick(), LED_INTERVAL);
 8003dac:	f7fd f9c4 	bl	8001138 <HAL_GetTick>
 8003db0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003db4:	4601      	mov	r1, r0
 8003db6:	4833      	ldr	r0, [pc, #204]	; (8003e84 <main+0x448>)
 8003db8:	f000 fcfb 	bl	80047b2 <Timer_Start>
  Timer_Init(&debug_timer, CONTINUOUS_MODE);
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4832      	ldr	r0, [pc, #200]	; (8003e88 <main+0x44c>)
 8003dc0:	f000 fcf2 	bl	80047a8 <Timer_Init>
  Timer_Start(&debug_timer, HAL_GetTick(), DEBUG_INTERVAL );
 8003dc4:	f7fd f9b8 	bl	8001138 <HAL_GetTick>
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4601      	mov	r1, r0
 8003dce:	482e      	ldr	r0, [pc, #184]	; (8003e88 <main+0x44c>)
 8003dd0:	f000 fcef 	bl	80047b2 <Timer_Start>
  Timer_Init(&motor_control_timer, CONTINUOUS_MODE);
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	482d      	ldr	r0, [pc, #180]	; (8003e8c <main+0x450>)
 8003dd8:	f000 fce6 	bl	80047a8 <Timer_Init>
  Timer_Start(&motor_control_timer, HAL_GetTick(), MOTOR_CONTROL_INTERVAL );
 8003ddc:	f7fd f9ac 	bl	8001138 <HAL_GetTick>
 8003de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003de4:	4601      	mov	r1, r0
 8003de6:	4829      	ldr	r0, [pc, #164]	; (8003e8c <main+0x450>)
 8003de8:	f000 fce3 	bl	80047b2 <Timer_Start>
	  if(Timer_Timeout(&polling_timer, HAL_GetTick()))
 8003dec:	4c24      	ldr	r4, [pc, #144]	; (8003e80 <main+0x444>)
	  if(Timer_Timeout(&led_timer, HAL_GetTick()))
 8003dee:	4d25      	ldr	r5, [pc, #148]	; (8003e84 <main+0x448>)
		  HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
 8003df0:	4e27      	ldr	r6, [pc, #156]	; (8003e90 <main+0x454>)
	  UART_ReadData();
 8003df2:	f000 ff4b 	bl	8004c8c <UART_ReadData>
	  if(Timer_Timeout(&polling_timer, HAL_GetTick()))
 8003df6:	f7fd f99f 	bl	8001138 <HAL_GetTick>
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 fce5 	bl	80047cc <Timer_Timeout>
 8003e02:	b118      	cbz	r0, 8003e0c <main+0x3d0>
		  Sensors_Update();
 8003e04:	f000 fdcc 	bl	80049a0 <Sensors_Update>
		  Battery_UpdateStatus();
 8003e08:	f000 fe70 	bl	8004aec <Battery_UpdateStatus>
	  if(Timer_Timeout(&led_timer, HAL_GetTick()))
 8003e0c:	f7fd f994 	bl	8001138 <HAL_GetTick>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fcda 	bl	80047cc <Timer_Timeout>
 8003e18:	b130      	cbz	r0, 8003e28 <main+0x3ec>
		  LED_Routine();
 8003e1a:	f000 fd03 	bl	8004824 <LED_Routine>
		  HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
 8003e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7fd fd81 	bl	800192a <HAL_GPIO_TogglePin>
	  if(Timer_Timeout(&motor_control_timer, HAL_GetTick()))
 8003e28:	f7fd f986 	bl	8001138 <HAL_GetTick>
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	4817      	ldr	r0, [pc, #92]	; (8003e8c <main+0x450>)
 8003e30:	f000 fccc 	bl	80047cc <Timer_Timeout>
 8003e34:	b120      	cbz	r0, 8003e40 <main+0x404>
		  if(line_follower_mode_on)
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <main+0x458>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b10b      	cbz	r3, 8003e40 <main+0x404>
			  Line_Follower_Update();
 8003e3c:	f000 f8ac 	bl	8003f98 <Line_Follower_Update>
	  if(Timer_Timeout(&debug_timer, HAL_GetTick()))
 8003e40:	f7fd f97a 	bl	8001138 <HAL_GetTick>
 8003e44:	4601      	mov	r1, r0
 8003e46:	4810      	ldr	r0, [pc, #64]	; (8003e88 <main+0x44c>)
 8003e48:	f000 fcc0 	bl	80047cc <Timer_Timeout>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d0d0      	beq.n	8003df2 <main+0x3b6>
		  Buzzer_Routine();
 8003e50:	f000 fcd8 	bl	8004804 <Buzzer_Routine>
 8003e54:	e7cd      	b.n	8003df2 <main+0x3b6>
 8003e56:	bf00      	nop
 8003e58:	200001f8 	.word	0x200001f8
 8003e5c:	00061a80 	.word	0x00061a80
 8003e60:	40005400 	.word	0x40005400
 8003e64:	2000028c 	.word	0x2000028c
 8003e68:	40012400 	.word	0x40012400
 8003e6c:	200002c8 	.word	0x200002c8
 8003e70:	20000308 	.word	0x20000308
 8003e74:	2000024c 	.word	0x2000024c
 8003e78:	08006c34 	.word	0x08006c34
 8003e7c:	20000348 	.word	0x20000348
 8003e80:	200001e0 	.word	0x200001e0
 8003e84:	200002bc 	.word	0x200002bc
 8003e88:	20000388 	.word	0x20000388
 8003e8c:	200001ec 	.word	0x200001ec
 8003e90:	40011000 	.word	0x40011000
 8003e94:	2000014c 	.word	0x2000014c

08003e98 <Motor_ChangeDirection>:
void Motor_ChangeDirection( void )
{
	int pwm1 = 0;
	int pwm2 = 0;

	switch( direction )
 8003e98:	4b3c      	ldr	r3, [pc, #240]	; (8003f8c <Motor_ChangeDirection+0xf4>)
{
 8003e9a:	b510      	push	{r4, lr}
	switch( direction )
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d871      	bhi.n	8003f88 <Motor_ChangeDirection+0xf0>
 8003ea4:	e8df f003 	tbb	[pc, r3]
 8003ea8:	4e3d2003 	.word	0x4e3d2003
 8003eac:	5e          	.byte	0x5e
 8003ead:	00          	.byte	0x00
	{
		case FORWARD:
		{
			pwm1 = 4000 + (speed * 1000);
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <Motor_ChangeDirection+0xf8>)
			pwm2 = 4000 + (speed * 1000);

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003eb0:	4c38      	ldr	r4, [pc, #224]	; (8003f94 <Motor_ChangeDirection+0xfc>)
			pwm1 = 4000 + (speed * 1000);
 8003eb2:	7819      	ldrb	r1, [r3, #0]
 8003eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb8:	434b      	muls	r3, r1
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003eba:	6822      	ldr	r2, [r4, #0]
			pwm1 = 4000 + (speed * 1000);
 8003ebc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003ec0:	6353      	str	r3, [r2, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm2);
 8003ec2:	6393      	str	r3, [r2, #56]	; 0x38
			pwm1 = 4000 + (speed * 1000);
			pwm2 = 1000 + (speed * 500);

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm2);
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff f946 	bl	8003158 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff f942 	bl	8003158 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f7ff f88c 	bl	8002ff4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003edc:	4620      	mov	r0, r4
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
			break;
		}
	}
}
 8003ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	f7ff b886 	b.w	8002ff4 <HAL_TIM_PWM_Start>
			pwm1 = 4000 + (speed * 1000);
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <Motor_ChangeDirection+0xf8>)
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003eea:	4c2a      	ldr	r4, [pc, #168]	; (8003f94 <Motor_ChangeDirection+0xfc>)
			pwm1 = 4000 + (speed * 1000);
 8003eec:	7819      	ldrb	r1, [r3, #0]
 8003eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef2:	434b      	muls	r3, r1
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003ef4:	6822      	ldr	r2, [r4, #0]
			pwm1 = 4000 + (speed * 1000);
 8003ef6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003efa:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8003efc:	2100      	movs	r1, #0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm2);
 8003efe:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7ff f88d 	bl	8003020 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8003f06:	2104      	movs	r1, #4
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff f889 	bl	8003020 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7ff f8eb 	bl	80030ec <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003f16:	4620      	mov	r0, r4
}
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	f7ff b8e5 	b.w	80030ec <HAL_TIMEx_PWMN_Start>
			pwm1 = 4000 + (speed * 1000);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <Motor_ChangeDirection+0xf8>)
 8003f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f28:	7818      	ldrb	r0, [r3, #0]
			pwm2 = 1000 + (speed * 500);
 8003f2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
			pwm1 = 4000 + (speed * 1000);
 8003f2e:	4342      	muls	r2, r0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f30:	4c18      	ldr	r4, [pc, #96]	; (8003f94 <Motor_ChangeDirection+0xfc>)
			pwm2 = 1000 + (speed * 500);
 8003f32:	4343      	muls	r3, r0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f34:	6821      	ldr	r1, [r4, #0]
			pwm1 = 4000 + (speed * 1000);
 8003f36:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f3a:	634a      	str	r2, [r1, #52]	; 0x34
			pwm2 = 1000 + (speed * 500);
 8003f3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm2);
 8003f40:	638b      	str	r3, [r1, #56]	; 0x38
 8003f42:	e7bf      	b.n	8003ec4 <Motor_ChangeDirection+0x2c>
			pwm1 = 1000 + (speed * 500);
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <Motor_ChangeDirection+0xf8>)
 8003f46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f4a:	7818      	ldrb	r0, [r3, #0]
			pwm2 = 4000 + (speed * 1000);
 8003f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			pwm1 = 1000 + (speed * 500);
 8003f50:	4342      	muls	r2, r0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f52:	4c10      	ldr	r4, [pc, #64]	; (8003f94 <Motor_ChangeDirection+0xfc>)
			pwm2 = 4000 + (speed * 1000);
 8003f54:	4343      	muls	r3, r0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f56:	6821      	ldr	r1, [r4, #0]
			pwm1 = 1000 + (speed * 500);
 8003f58:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm1);
 8003f5c:	634a      	str	r2, [r1, #52]	; 0x34
			pwm2 = 4000 + (speed * 1000);
 8003f5e:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8003f62:	e7ed      	b.n	8003f40 <Motor_ChangeDirection+0xa8>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8003f64:	2100      	movs	r1, #0
 8003f66:	480b      	ldr	r0, [pc, #44]	; (8003f94 <Motor_ChangeDirection+0xfc>)
 8003f68:	f7ff f85a 	bl	8003020 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4809      	ldr	r0, [pc, #36]	; (8003f94 <Motor_ChangeDirection+0xfc>)
 8003f70:	f7ff f856 	bl	8003020 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8003f74:	2100      	movs	r1, #0
 8003f76:	4807      	ldr	r0, [pc, #28]	; (8003f94 <Motor_ChangeDirection+0xfc>)
 8003f78:	f7ff f8ee 	bl	8003158 <HAL_TIMEx_PWMN_Stop>
}
 8003f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 8003f80:	2104      	movs	r1, #4
 8003f82:	4804      	ldr	r0, [pc, #16]	; (8003f94 <Motor_ChangeDirection+0xfc>)
 8003f84:	f7ff b8e8 	b.w	8003158 <HAL_TIMEx_PWMN_Stop>
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	2000013d 	.word	0x2000013d
 8003f94:	200002c8 	.word	0x200002c8

08003f98 <Line_Follower_Update>:

void Line_Follower_Update( void )
{
 8003f98:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(TCRT_LF_GPIO_Port, TCRT_LF_Pin))
 8003f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f9e:	480b      	ldr	r0, [pc, #44]	; (8003fcc <Line_Follower_Update+0x34>)
 8003fa0:	f7fd fcb8 	bl	8001914 <HAL_GPIO_ReadPin>
 8003fa4:	b120      	cbz	r0, 8003fb0 <Line_Follower_Update+0x18>
	{
		direction = RIGHT;
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <Line_Follower_Update+0x38>)
 8003faa:	701a      	strb	r2, [r3, #0]
		Motor_ChangeDirection();
 8003fac:	f7ff ff74 	bl	8003e98 <Motor_ChangeDirection>
	}

	if(HAL_GPIO_ReadPin(TCRT_RG_GPIO_Port, TCRT_RG_Pin))
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <Line_Follower_Update+0x3c>)
 8003fb4:	f7fd fcae 	bl	8001914 <HAL_GPIO_ReadPin>
 8003fb8:	b130      	cbz	r0, 8003fc8 <Line_Follower_Update+0x30>
	{
		direction = LEFT;
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <Line_Follower_Update+0x38>)
 8003fbe:	701a      	strb	r2, [r3, #0]
		Motor_ChangeDirection();
	}
}
 8003fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Motor_ChangeDirection();
 8003fc4:	f7ff bf68 	b.w	8003e98 <Motor_ChangeDirection>
 8003fc8:	bd08      	pop	{r3, pc}
 8003fca:	bf00      	nop
 8003fcc:	40010800 	.word	0x40010800
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	40010c00 	.word	0x40010c00

08003fd8 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003fdc:	2401      	movs	r4, #1
 8003fde:	2664      	movs	r6, #100	; 0x64
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003fe0:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003fe2:	f10d 0316 	add.w	r3, sp, #22
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	9602      	str	r6, [sp, #8]
 8003fea:	4623      	mov	r3, r4
 8003fec:	9401      	str	r4, [sp, #4]
 8003fee:	2275      	movs	r2, #117	; 0x75
 8003ff0:	21d0      	movs	r1, #208	; 0xd0
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003ff2:	4680      	mov	r8, r0
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003ff4:	f7fd ff7c 	bl	8001ef0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003ff8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003ffc:	2b68      	cmp	r3, #104	; 0x68
 8003ffe:	d132      	bne.n	8004066 <MPU6050_Init+0x8e>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8004000:	2700      	movs	r7, #0
 8004002:	ad06      	add	r5, sp, #24
 8004004:	f805 7d01 	strb.w	r7, [r5, #-1]!
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004008:	4623      	mov	r3, r4
 800400a:	226b      	movs	r2, #107	; 0x6b
 800400c:	21d0      	movs	r1, #208	; 0xd0
 800400e:	9602      	str	r6, [sp, #8]
 8004010:	9401      	str	r4, [sp, #4]
 8004012:	9500      	str	r5, [sp, #0]
 8004014:	4640      	mov	r0, r8
 8004016:	f7fd fed5 	bl	8001dc4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800401a:	2307      	movs	r3, #7
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800401c:	2219      	movs	r2, #25
        Data = 0x07;
 800401e:	f88d 3017 	strb.w	r3, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8004022:	21d0      	movs	r1, #208	; 0xd0
 8004024:	4623      	mov	r3, r4
 8004026:	9602      	str	r6, [sp, #8]
 8004028:	9401      	str	r4, [sp, #4]
 800402a:	9500      	str	r5, [sp, #0]
 800402c:	4640      	mov	r0, r8
 800402e:	f7fd fec9 	bl	8001dc4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004032:	4623      	mov	r3, r4
 8004034:	221c      	movs	r2, #28
 8004036:	21d0      	movs	r1, #208	; 0xd0
 8004038:	9602      	str	r6, [sp, #8]
 800403a:	9401      	str	r4, [sp, #4]
 800403c:	9500      	str	r5, [sp, #0]
 800403e:	4640      	mov	r0, r8
        Data = 0x00;
 8004040:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004044:	f7fd febe 	bl	8001dc4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004048:	9602      	str	r6, [sp, #8]
 800404a:	9401      	str	r4, [sp, #4]
 800404c:	9500      	str	r5, [sp, #0]
 800404e:	4623      	mov	r3, r4
 8004050:	221b      	movs	r2, #27
 8004052:	21d0      	movs	r1, #208	; 0xd0
 8004054:	4640      	mov	r0, r8
        Data = 0x00;
 8004056:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800405a:	f7fd feb3 	bl	8001dc4 <HAL_I2C_Mem_Write>
        return 0;
 800405e:	4638      	mov	r0, r7
    }
    return 1;
}
 8004060:	b006      	add	sp, #24
 8004062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
 8004066:	4620      	mov	r0, r4
 8004068:	e7fa      	b.n	8004060 <MPU6050_Init+0x88>

0800406a <Kalman_getAngle>:
        DataStruct->Gx = -DataStruct->Gx;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800406a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406e:	4682      	mov	sl, r0
 8004070:	b08e      	sub	sp, #56	; 0x38
 8004072:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    double rate = newRate - Kalman->bias;
 8004076:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
 800407a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800407e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004082:	461a      	mov	r2, r3
 8004084:	4623      	mov	r3, r4
 8004086:	f7fc f867 	bl	8000158 <__aeabi_dsub>
    Kalman->angle += dt * rate;
 800408a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800408e:	f7fc fa17 	bl	80004c0 <__aeabi_dmul>
 8004092:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8004096:	f7fc f861 	bl	800015c <__adddf3>

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800409a:	e9da 3410 	ldrd	r3, r4, [sl, #64]	; 0x40
    Kalman->angle += dt * rate;
 800409e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80040a2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80040a6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4623      	mov	r3, r4
 80040ae:	f7fc fa07 	bl	80004c0 <__aeabi_dmul>
 80040b2:	e9da 890c 	ldrd	r8, r9, [sl, #48]	; 0x30
 80040b6:	e9da 450e 	ldrd	r4, r5, [sl, #56]	; 0x38
 80040ba:	4642      	mov	r2, r8
 80040bc:	464b      	mov	r3, r9
 80040be:	4606      	mov	r6, r0
 80040c0:	460f      	mov	r7, r1
 80040c2:	f7fc f849 	bl	8000158 <__aeabi_dsub>
 80040c6:	4622      	mov	r2, r4
 80040c8:	462b      	mov	r3, r5
 80040ca:	f7fc f845 	bl	8000158 <__aeabi_dsub>
 80040ce:	e9da 2300 	ldrd	r2, r3, [sl]
 80040d2:	f7fc f843 	bl	800015c <__adddf3>
 80040d6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80040da:	f7fc f9f1 	bl	80004c0 <__aeabi_dmul>
 80040de:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 80040e2:	f7fc f83b 	bl	800015c <__adddf3>
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80040e6:	4632      	mov	r2, r6
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80040e8:	e9cd 0100 	strd	r0, r1, [sp]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80040ec:	463b      	mov	r3, r7
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	f7fc f831 	bl	8000158 <__aeabi_dsub>
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80040f6:	4632      	mov	r2, r6
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80040f8:	4680      	mov	r8, r0
 80040fa:	4689      	mov	r9, r1
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80040fc:	463b      	mov	r3, r7
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc f829 	bl	8000158 <__aeabi_dsub>
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8004106:	e9da 2302 	ldrd	r2, r3, [sl, #8]
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800410a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800410e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004112:	f7fc f9d5 	bl	80004c0 <__aeabi_dmul>
 8004116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411a:	f7fc f81f 	bl	800015c <__adddf3>

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800411e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8004122:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8004126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800412a:	f7fc f817 	bl	800015c <__adddf3>
 800412e:	4606      	mov	r6, r0
 8004130:	460f      	mov	r7, r1
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	e9dd 0100 	ldrd	r0, r1, [sp]
 800413a:	f7fc faeb 	bl	8000714 <__aeabi_ddiv>
    K[1] = Kalman->P[1][0] / S;
 800413e:	4632      	mov	r2, r6
    K[0] = Kalman->P[0][0] / S;
 8004140:	4604      	mov	r4, r0
 8004142:	460d      	mov	r5, r1
    K[1] = Kalman->P[1][0] / S;
 8004144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004148:	463b      	mov	r3, r7
 800414a:	f7fc fae3 	bl	8000714 <__aeabi_ddiv>

    double y = newAngle - Kalman->angle;
 800414e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    K[1] = Kalman->P[1][0] / S;
 8004152:	4606      	mov	r6, r0
 8004154:	460f      	mov	r7, r1
    double y = newAngle - Kalman->angle;
 8004156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800415a:	f7fb fffd 	bl	8000158 <__aeabi_dsub>
 800415e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    Kalman->angle += K[0] * y;
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4620      	mov	r0, r4
 8004168:	4629      	mov	r1, r5
 800416a:	f7fc f9a9 	bl	80004c0 <__aeabi_dmul>
 800416e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004172:	f7fb fff3 	bl	800015c <__adddf3>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800417e:	e9ca 2306 	strd	r2, r3, [sl, #24]
    Kalman->bias += K[1] * y;
 8004182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	f7fc f999 	bl	80004c0 <__aeabi_dmul>
 800418e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004192:	f7fb ffe3 	bl	800015c <__adddf3>

    double P00_temp = Kalman->P[0][0];
    double P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
 8004196:	4622      	mov	r2, r4
    Kalman->bias += K[1] * y;
 8004198:	e9ca 0108 	strd	r0, r1, [sl, #32]
    Kalman->P[0][0] -= K[0] * P00_temp;
 800419c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041a0:	462b      	mov	r3, r5
 80041a2:	f7fc f98d 	bl	80004c0 <__aeabi_dmul>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ae:	f7fb ffd3 	bl	8000158 <__aeabi_dsub>
    Kalman->P[0][1] -= K[0] * P01_temp;
 80041b2:	4622      	mov	r2, r4
    Kalman->P[0][0] -= K[0] * P00_temp;
 80041b4:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80041b8:	462b      	mov	r3, r5
 80041ba:	4640      	mov	r0, r8
 80041bc:	4649      	mov	r1, r9
 80041be:	f7fc f97f 	bl	80004c0 <__aeabi_dmul>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f7fb ffc5 	bl	8000158 <__aeabi_dsub>
    Kalman->P[1][0] -= K[1] * P00_temp;
 80041ce:	4632      	mov	r2, r6
    Kalman->P[0][1] -= K[0] * P01_temp;
 80041d0:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80041d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041d8:	463b      	mov	r3, r7
 80041da:	f7fc f971 	bl	80004c0 <__aeabi_dmul>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041e6:	f7fb ffb7 	bl	8000158 <__aeabi_dsub>
    Kalman->P[1][1] -= K[1] * P01_temp;
 80041ea:	4632      	mov	r2, r6
    Kalman->P[1][0] -= K[1] * P00_temp;
 80041ec:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80041f0:	463b      	mov	r3, r7
 80041f2:	4640      	mov	r0, r8
 80041f4:	4649      	mov	r1, r9
 80041f6:	f7fc f963 	bl	80004c0 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004202:	f7fb ffa9 	bl	8000158 <__aeabi_dsub>
 8004206:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40

    return Kalman->angle;
};
 800420a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800420e:	b00e      	add	sp, #56	; 0x38
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	0000      	movs	r0, r0
	...

08004218 <MPU6050_ReadAll>:
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8004218:	2364      	movs	r3, #100	; 0x64
void MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 800421a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421e:	b089      	sub	sp, #36	; 0x24
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	230e      	movs	r3, #14
void MPU6050_ReadAll(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8004224:	460c      	mov	r4, r1
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	ab04      	add	r3, sp, #16
 800422a:	223b      	movs	r2, #59	; 0x3b
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	21d0      	movs	r1, #208	; 0xd0
 8004230:	2301      	movs	r3, #1
 8004232:	f7fd fe5d 	bl	8001ef0 <HAL_I2C_Mem_Read>
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8004236:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800423a:	f89d 0011 	ldrb.w	r0, [sp, #17]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800423e:	f89d 9013 	ldrb.w	r9, [sp, #19]
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8004242:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8004246:	f89d 3012 	ldrb.w	r3, [sp, #18]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800424a:	f89d 8015 	ldrb.w	r8, [sp, #21]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800424e:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8004252:	f89d 3014 	ldrb.w	r3, [sp, #20]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8004256:	f89d a017 	ldrb.w	sl, [sp, #23]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800425a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800425e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8004262:	f89d 7019 	ldrb.w	r7, [sp, #25]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8004266:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800426a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800426e:	f89d 601b 	ldrb.w	r6, [sp, #27]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8004272:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8004276:	f89d 301a 	ldrb.w	r3, [sp, #26]
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800427a:	f89d 501d 	ldrb.w	r5, [sp, #29]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800427e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8004282:	f89d 301c 	ldrb.w	r3, [sp, #28]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8004286:	fa0f f989 	sxth.w	r9, r9
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800428a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800428e:	fa0f f888 	sxth.w	r8, r8
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8004292:	b23f      	sxth	r7, r7
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8004294:	b236      	sxth	r6, r6
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8004296:	b22d      	sxth	r5, r5
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8004298:	b200      	sxth	r0, r0
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800429a:	f8a4 9002 	strh.w	r9, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800429e:	f8a4 8004 	strh.w	r8, [r4, #4]
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80042a2:	8427      	strh	r7, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80042a4:	8466      	strh	r6, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80042a6:	84a5      	strh	r5, [r4, #36]	; 0x24
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80042a8:	8020      	strh	r0, [r4, #0]
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80042aa:	f7fc f8a3 	bl	80003f4 <__aeabi_i2d>
 80042ae:	2200      	movs	r2, #0
 80042b0:	4b73      	ldr	r3, [pc, #460]	; (8004480 <MPU6050_ReadAll+0x268>)
 80042b2:	f7fc f905 	bl	80004c0 <__aeabi_dmul>
 80042b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80042ba:	4648      	mov	r0, r9
 80042bc:	f7fc f89a 	bl	80003f4 <__aeabi_i2d>
 80042c0:	2200      	movs	r2, #0
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <MPU6050_ReadAll+0x268>)
 80042c4:	f7fc f8fc 	bl	80004c0 <__aeabi_dmul>
 80042c8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80042cc:	4640      	mov	r0, r8
 80042ce:	f7fc f891 	bl	80003f4 <__aeabi_i2d>
 80042d2:	a365      	add	r3, pc, #404	; (adr r3, 8004468 <MPU6050_ReadAll+0x250>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f7fc fa1c 	bl	8000714 <__aeabi_ddiv>
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80042dc:	fa0f fa8a 	sxth.w	sl, sl
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80042e0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7fc fca5 	bl	8000c34 <__aeabi_i2f>
 80042ea:	4966      	ldr	r1, [pc, #408]	; (8004484 <MPU6050_ReadAll+0x26c>)
 80042ec:	f7fc fdaa 	bl	8000e44 <__aeabi_fdiv>
 80042f0:	4965      	ldr	r1, [pc, #404]	; (8004488 <MPU6050_ReadAll+0x270>)
 80042f2:	f7fc fbeb 	bl	8000acc <__addsf3>
 80042f6:	6420      	str	r0, [r4, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7fc f87b 	bl	80003f4 <__aeabi_i2d>
 80042fe:	a35c      	add	r3, pc, #368	; (adr r3, 8004470 <MPU6050_ReadAll+0x258>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc fa06 	bl	8000714 <__aeabi_ddiv>
 8004308:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800430c:	4630      	mov	r0, r6
 800430e:	f7fc f871 	bl	80003f4 <__aeabi_i2d>
 8004312:	a357      	add	r3, pc, #348	; (adr r3, 8004470 <MPU6050_ReadAll+0x258>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fc f9fc 	bl	8000714 <__aeabi_ddiv>
 800431c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8004320:	4628      	mov	r0, r5
 8004322:	f7fc f867 	bl	80003f4 <__aeabi_i2d>
 8004326:	a352      	add	r3, pc, #328	; (adr r3, 8004470 <MPU6050_ReadAll+0x258>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc f9f2 	bl	8000714 <__aeabi_ddiv>
 8004330:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8004334:	f7fc ff00 	bl	8001138 <HAL_GetTick>
 8004338:	4d54      	ldr	r5, [pc, #336]	; (800448c <MPU6050_ReadAll+0x274>)
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	1ac0      	subs	r0, r0, r3
 800433e:	f7fc f849 	bl	80003d4 <__aeabi_ui2d>
 8004342:	2200      	movs	r2, #0
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <MPU6050_ReadAll+0x278>)
 8004346:	f7fc f9e5 	bl	8000714 <__aeabi_ddiv>
 800434a:	4689      	mov	r9, r1
 800434c:	4680      	mov	r8, r0
    timer = HAL_GetTick();
 800434e:	f7fc fef3 	bl	8001138 <HAL_GetTick>
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8004352:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    timer = HAL_GetTick();
 8004356:	6028      	str	r0, [r5, #0]
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8004358:	435b      	muls	r3, r3
 800435a:	f9b4 0000 	ldrsh.w	r0, [r4]
    double roll_sqrt = sqrt(
 800435e:	fb00 3000 	mla	r0, r0, r0, r3
 8004362:	f7fc f847 	bl	80003f4 <__aeabi_i2d>
 8004366:	f001 fc2f 	bl	8005bc8 <sqrt>
    if (roll_sqrt != 0.0) {
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
    double roll_sqrt = sqrt(
 800436e:	4606      	mov	r6, r0
 8004370:	460f      	mov	r7, r1
    if (roll_sqrt != 0.0) {
 8004372:	f7fc fb0d 	bl	8000990 <__aeabi_dcmpeq>
 8004376:	2800      	cmp	r0, #0
 8004378:	d163      	bne.n	8004442 <MPU6050_ReadAll+0x22a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800437a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800437e:	f7fc f839 	bl	80003f4 <__aeabi_i2d>
 8004382:	4632      	mov	r2, r6
 8004384:	463b      	mov	r3, r7
 8004386:	f7fc f9c5 	bl	8000714 <__aeabi_ddiv>
 800438a:	f001 f921 	bl	80055d0 <atan>
 800438e:	a33a      	add	r3, pc, #232	; (adr r3, 8004478 <MPU6050_ReadAll+0x260>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fc f894 	bl	80004c0 <__aeabi_dmul>
 8004398:	4682      	mov	sl, r0
 800439a:	468b      	mov	fp, r1
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800439c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80043a0:	f7fc f828 	bl	80003f4 <__aeabi_i2d>
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80043ac:	4240      	negs	r0, r0
 80043ae:	f7fc f821 	bl	80003f4 <__aeabi_i2d>
 80043b2:	4632      	mov	r2, r6
 80043b4:	463b      	mov	r3, r7
 80043b6:	f001 faa0 	bl	80058fa <atan2>
 80043ba:	a32f      	add	r3, pc, #188	; (adr r3, 8004478 <MPU6050_ReadAll+0x260>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fc f87e 	bl	80004c0 <__aeabi_dmul>
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80043c4:	2200      	movs	r2, #0
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <MPU6050_ReadAll+0x27c>)
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80043c8:	4606      	mov	r6, r0
 80043ca:	460f      	mov	r7, r1
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80043cc:	f7fc faea 	bl	80009a4 <__aeabi_dcmplt>
 80043d0:	b130      	cbz	r0, 80043e0 <MPU6050_ReadAll+0x1c8>
 80043d2:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80043d6:	2200      	movs	r2, #0
 80043d8:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <MPU6050_ReadAll+0x280>)
 80043da:	f7fc fb01 	bl	80009e0 <__aeabi_dcmpgt>
 80043de:	b970      	cbnz	r0, 80043fe <MPU6050_ReadAll+0x1e6>
 80043e0:	2200      	movs	r2, #0
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <MPU6050_ReadAll+0x280>)
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fafa 	bl	80009e0 <__aeabi_dcmpgt>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d02d      	beq.n	800444c <MPU6050_ReadAll+0x234>
 80043f0:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80043f4:	2200      	movs	r2, #0
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <MPU6050_ReadAll+0x27c>)
 80043f8:	f7fc fad4 	bl	80009a4 <__aeabi_dcmplt>
 80043fc:	b330      	cbz	r0, 800444c <MPU6050_ReadAll+0x234>
        KalmanY.angle = pitch;
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <MPU6050_ReadAll+0x284>)
        DataStruct->KalmanAngleY = pitch;
 8004400:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
        KalmanY.angle = pitch;
 8004404:	e9c3 6706 	strd	r6, r7, [r3, #24]
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8004408:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800440a:	2200      	movs	r2, #0
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <MPU6050_ReadAll+0x280>)
 800440e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004410:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8004414:	f7fc fae4 	bl	80009e0 <__aeabi_dcmpgt>
 8004418:	b118      	cbz	r0, 8004422 <MPU6050_ReadAll+0x20a>
        DataStruct->Gx = -DataStruct->Gx;
 800441a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800441c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004420:	62e3      	str	r3, [r4, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8004422:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004426:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800442a:	e9cd 2300 	strd	r2, r3, [sp]
 800442e:	481c      	ldr	r0, [pc, #112]	; (80044a0 <MPU6050_ReadAll+0x288>)
 8004430:	4652      	mov	r2, sl
 8004432:	465b      	mov	r3, fp
 8004434:	f7ff fe19 	bl	800406a <Kalman_getAngle>
 8004438:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
}
 800443c:	b009      	add	sp, #36	; 0x24
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        roll = 0.0;
 8004442:	f04f 0a00 	mov.w	sl, #0
 8004446:	f04f 0b00 	mov.w	fp, #0
 800444a:	e7a7      	b.n	800439c <MPU6050_ReadAll+0x184>
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800444c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004450:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004454:	e9cd 2300 	strd	r2, r3, [sp]
 8004458:	4810      	ldr	r0, [pc, #64]	; (800449c <MPU6050_ReadAll+0x284>)
 800445a:	4632      	mov	r2, r6
 800445c:	463b      	mov	r3, r7
 800445e:	f7ff fe04 	bl	800406a <Kalman_getAngle>
 8004462:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
 8004466:	e7cf      	b.n	8004408 <MPU6050_ReadAll+0x1f0>
 8004468:	00000000 	.word	0x00000000
 800446c:	40cc2900 	.word	0x40cc2900
 8004470:	00000000 	.word	0x00000000
 8004474:	40606000 	.word	0x40606000
 8004478:	1a63c1f8 	.word	0x1a63c1f8
 800447c:	404ca5dc 	.word	0x404ca5dc
 8004480:	3f100000 	.word	0x3f100000
 8004484:	43aa0000 	.word	0x43aa0000
 8004488:	42121eb8 	.word	0x42121eb8
 800448c:	20000398 	.word	0x20000398
 8004490:	408f4000 	.word	0x408f4000
 8004494:	c0568000 	.word	0xc0568000
 8004498:	40568000 	.word	0x40568000
 800449c:	20000058 	.word	0x20000058
 80044a0:	20000010 	.word	0x20000010

080044a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_MspInit+0x98>)
{
 80044a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80044a8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044aa:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	619a      	str	r2, [r3, #24]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	f002 0201 	and.w	r2, r2, #1
 80044b8:	9200      	str	r2, [sp, #0]
 80044ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044c2:	61da      	str	r2, [r3, #28]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ce:	f7fd f8c7 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	f06f 000b 	mvn.w	r0, #11
 80044d8:	4611      	mov	r1, r2
 80044da:	f7fd f8d3 	bl	8001684 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	f06f 000a 	mvn.w	r0, #10
 80044e4:	4611      	mov	r1, r2
 80044e6:	f7fd f8cd 	bl	8001684 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	f06f 0009 	mvn.w	r0, #9
 80044f0:	4611      	mov	r1, r2
 80044f2:	f7fd f8c7 	bl	8001684 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	f06f 0004 	mvn.w	r0, #4
 80044fc:	4611      	mov	r1, r2
 80044fe:	f7fd f8c1 	bl	8001684 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	f06f 0003 	mvn.w	r0, #3
 8004508:	4611      	mov	r1, r2
 800450a:	f7fd f8bb 	bl	8001684 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	f06f 0001 	mvn.w	r0, #1
 8004514:	4611      	mov	r1, r2
 8004516:	f7fd f8b5 	bl	8001684 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	4611      	mov	r1, r2
 8004522:	f7fd f8af 	bl	8001684 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004526:	4a06      	ldr	r2, [pc, #24]	; (8004540 <HAL_MspInit+0x9c>)
 8004528:	6853      	ldr	r3, [r2, #4]
 800452a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800452e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004532:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004534:	b003      	add	sp, #12
 8004536:	f85d fb04 	ldr.w	pc, [sp], #4
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40010000 	.word	0x40010000

08004544 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004546:	6802      	ldr	r2, [r0, #0]
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_ADC_MspInit+0x38>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d112      	bne.n	8004574 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800454e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004552:	699a      	ldr	r2, [r3, #24]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = A2_Pin|A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	619a      	str	r2, [r3, #24]
 800455c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455e:	4808      	ldr	r0, [pc, #32]	; (8004580 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = A2_Pin|A3_Pin;
 8004568:	2330      	movs	r3, #48	; 0x30
 800456a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800456c:	2303      	movs	r3, #3
 800456e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004570:	f7fd f8f0 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004574:	b007      	add	sp, #28
 8004576:	f85d fb04 	ldr.w	pc, [sp], #4
 800457a:	bf00      	nop
 800457c:	40012400 	.word	0x40012400
 8004580:	40010800 	.word	0x40010800

08004584 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004586:	6802      	ldr	r2, [r0, #0]
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_I2C_MspInit+0x38>)
 800458a:	429a      	cmp	r2, r3
 800458c:	d113      	bne.n	80045b6 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800458e:	23c0      	movs	r3, #192	; 0xc0
 8004590:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004592:	2312      	movs	r3, #18
 8004594:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004596:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	a902      	add	r1, sp, #8
 800459a:	4809      	ldr	r0, [pc, #36]	; (80045c0 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800459c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f7fd f8d9 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_I2C_MspInit+0x40>)
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80045aa:	61da      	str	r2, [r3, #28]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045b6:	b007      	add	sp, #28
 80045b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80045bc:	40005400 	.word	0x40005400
 80045c0:	40010c00 	.word	0x40010c00
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045c8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80045ca:	6803      	ldr	r3, [r0, #0]
 80045cc:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <HAL_TIM_Base_MspInit+0x80>)
{
 80045ce:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10b      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_TIM_Base_MspInit+0x84>)
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045dc:	619a      	str	r2, [r3, #24]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045e8:	b006      	add	sp, #24
 80045ea:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d10b      	bne.n	800460a <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	61da      	str	r2, [r3, #28]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	e7ee      	b.n	80045e8 <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM3)
 800460a:	4a11      	ldr	r2, [pc, #68]	; (8004650 <HAL_TIM_Base_MspInit+0x88>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d1eb      	bne.n	80045e8 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_TIM_Base_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004612:	2400      	movs	r4, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004614:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004618:	f042 0202 	orr.w	r2, r2, #2
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004620:	480c      	ldr	r0, [pc, #48]	; (8004654 <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800462a:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800462c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800462e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004632:	f7fd f88f 	bl	8001754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004636:	4622      	mov	r2, r4
 8004638:	4621      	mov	r1, r4
 800463a:	201d      	movs	r0, #29
 800463c:	f7fd f822 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004640:	201d      	movs	r0, #29
 8004642:	f7fd f853 	bl	80016ec <HAL_NVIC_EnableIRQ>
}
 8004646:	e7cf      	b.n	80045e8 <HAL_TIM_Base_MspInit+0x20>
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40021000 	.word	0x40021000
 8004650:	40000400 	.word	0x40000400
 8004654:	40010c00 	.word	0x40010c00

08004658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004658:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800465a:	6803      	ldr	r3, [r0, #0]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_TIM_MspPostInit+0x5c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d11c      	bne.n	800469c <HAL_TIM_MspPostInit+0x44>
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2402      	movs	r4, #2
 8004664:	f44f 7360 	mov.w	r3, #896	; 0x380
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	4669      	mov	r1, sp
 800466a:	4813      	ldr	r0, [pc, #76]	; (80046b8 <HAL_TIM_MspPostInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004672:	f7fd f86f 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004676:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004678:	4669      	mov	r1, sp
 800467a:	4810      	ldr	r0, [pc, #64]	; (80046bc <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004682:	f7fd f867 	bl	8001754 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_TIM_MspPostInit+0x68>)
 8004688:	6853      	ldr	r3, [r2, #4]
 800468a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800468e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004696:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004698:	b004      	add	sp, #16
 800469a:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d1fa      	bne.n	8004698 <HAL_TIM_MspPostInit+0x40>
    GPIO_InitStruct.Pin = PWM_BZ_Pin;
 80046a2:	2302      	movs	r3, #2
    HAL_GPIO_Init(PWM_BZ_GPIO_Port, &GPIO_InitStruct);
 80046a4:	4669      	mov	r1, sp
 80046a6:	4804      	ldr	r0, [pc, #16]	; (80046b8 <HAL_TIM_MspPostInit+0x60>)
    GPIO_InitStruct.Pin = PWM_BZ_Pin;
 80046a8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ac:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(PWM_BZ_GPIO_Port, &GPIO_InitStruct);
 80046ae:	f7fd f851 	bl	8001754 <HAL_GPIO_Init>
}
 80046b2:	e7f1      	b.n	8004698 <HAL_TIM_MspPostInit+0x40>
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40010800 	.word	0x40010800
 80046bc:	40010c00 	.word	0x40010c00
 80046c0:	40010000 	.word	0x40010000

080046c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80046c6:	6802      	ldr	r2, [r0, #0]
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_UART_MspInit+0x4c>)
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d11d      	bne.n	800470a <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ce:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80046d2:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80046d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046da:	61da      	str	r2, [r3, #28]
 80046dc:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046de:	480d      	ldr	r0, [pc, #52]	; (8004714 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046e8:	2304      	movs	r3, #4
 80046ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f0:	2303      	movs	r3, #3
 80046f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f4:	f7fd f82e 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046f8:	2308      	movs	r3, #8
 80046fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046fc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fe:	a902      	add	r1, sp, #8
 8004700:	4804      	ldr	r0, [pc, #16]	; (8004714 <HAL_UART_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004702:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004706:	f7fd f825 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800470a:	b007      	add	sp, #28
 800470c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004710:	40004400 	.word	0x40004400
 8004714:	40010800 	.word	0x40010800

08004718 <NMI_Handler>:
 8004718:	4770      	bx	lr

0800471a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800471a:	e7fe      	b.n	800471a <HardFault_Handler>

0800471c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800471c:	e7fe      	b.n	800471c <MemManage_Handler>

0800471e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800471e:	e7fe      	b.n	800471e <BusFault_Handler>

08004720 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004720:	e7fe      	b.n	8004720 <UsageFault_Handler>

08004722 <SVC_Handler>:
 8004722:	4770      	bx	lr

08004724 <DebugMon_Handler>:
 8004724:	4770      	bx	lr

08004726 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004726:	4770      	bx	lr

08004728 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004728:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800472a:	f7fc fcf9 	bl	8001120 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800472e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004732:	f7fd b80a 	b.w	800174a <HAL_SYSTICK_IRQHandler>
	...

08004738 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <TIM3_IRQHandler+0x8>)
 800473a:	f7fe b9e7 	b.w	8002b0c <HAL_TIM_IRQHandler>
 800473e:	bf00      	nop
 8004740:	2000024c 	.word	0x2000024c

08004744 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <SystemInit+0x40>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <SystemInit+0x44>)
 8004752:	400a      	ands	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800475c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004760:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004768:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004770:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004772:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004776:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <SystemInit+0x48>)
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	f8ff0000 	.word	0xf8ff0000
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <delay_us>:
#include "stm32f1xx_hal.h"
#include "system_timers.h"

void delay_us( uint16_t interval )
{
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <delay_us+0x14>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	6253      	str	r3, [r2, #36]	; 0x24
	while((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) < interval);
 8004798:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800479a:	b29b      	uxth	r3, r3
 800479c:	4283      	cmp	r3, r0
 800479e:	d3fb      	bcc.n	8004798 <delay_us+0x8>
}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000024c 	.word	0x2000024c

080047a8 <Timer_Init>:

void Timer_Init(timers_t *timer, modes_t mode)
{
	timer->start_tick = 0;
 80047a8:	2300      	movs	r3, #0
	timer->timeout = 0;
	timer->timer_mode = mode;
 80047aa:	7201      	strb	r1, [r0, #8]
	timer->start_tick = 0;
 80047ac:	6003      	str	r3, [r0, #0]
	timer->timeout = 0;
 80047ae:	6043      	str	r3, [r0, #4]
	timer->timer_mode = mode;
 80047b0:	4770      	bx	lr

080047b2 <Timer_Start>:
}

void Timer_Start(timers_t *timer, time curr_tick, time interval)
{
	timer->start_tick = (curr_tick? curr_tick : 1);
 80047b2:	2900      	cmp	r1, #0
 80047b4:	bf08      	it	eq
 80047b6:	2101      	moveq	r1, #1
	timer->timeout = interval;
 80047b8:	e880 0006 	stmia.w	r0, {r1, r2}
 80047bc:	4770      	bx	lr

080047be <timeDiff>:

time timeDiff(time curr_tick, time prev_tick)
{
	time diff;

	if(curr_tick >= prev_tick) { diff = curr_tick - prev_tick;}
 80047be:	4288      	cmp	r0, r1
 80047c0:	eba0 0001 	sub.w	r0, r0, r1
	else { diff = (0xFFFFFFFF - prev_tick) + curr_tick;}
 80047c4:	bf38      	it	cc
 80047c6:	f100 30ff 	addcc.w	r0, r0, #4294967295

	return diff;
}
 80047ca:	4770      	bx	lr

080047cc <Timer_Timeout>:

bool Timer_Timeout(timers_t *timer, time curr_tick)
{
 80047cc:	460a      	mov	r2, r1
	const bool t_out = (timer->start_tick && timeDiff(curr_tick, timer->start_tick) > timer->timeout);
 80047ce:	6801      	ldr	r1, [r0, #0]
{
 80047d0:	b508      	push	{r3, lr}
 80047d2:	4603      	mov	r3, r0
	const bool t_out = (timer->start_tick && timeDiff(curr_tick, timer->start_tick) > timer->timeout);
 80047d4:	b149      	cbz	r1, 80047ea <Timer_Timeout+0x1e>
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7ff fff1 	bl	80047be <timeDiff>
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	4288      	cmp	r0, r1
 80047e0:	bf94      	ite	ls
 80047e2:	2000      	movls	r0, #0
 80047e4:	2001      	movhi	r0, #1
	if(t_out)
 80047e6:	b910      	cbnz	r0, 80047ee <Timer_Timeout+0x22>
 80047e8:	bd08      	pop	{r3, pc}
 80047ea:	4608      	mov	r0, r1
 80047ec:	bd08      	pop	{r3, pc}
	timer->start_tick = 0;
 80047ee:	2100      	movs	r1, #0
 80047f0:	6019      	str	r1, [r3, #0]
	{
		Timer_Stop(timer);
		if(timer->timer_mode == CONTINUOUS_MODE)
 80047f2:	7a19      	ldrb	r1, [r3, #8]
 80047f4:	2901      	cmp	r1, #1
 80047f6:	d103      	bne.n	8004800 <Timer_Timeout+0x34>
	timer->start_tick = (curr_tick? curr_tick : 1);
 80047f8:	2a00      	cmp	r2, #0
 80047fa:	bf08      	it	eq
 80047fc:	2201      	moveq	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
			Timer_Start(timer, curr_tick, timer->timeout);
	}

	return t_out;
}
 8004800:	bd08      	pop	{r3, pc}
	...

08004804 <Buzzer_Routine>:
/************* Buzzer routine ***********************************/
void Buzzer_Routine( void )
{
	static uint8_t duty_cycle = 0;

	if(duty_cycle < 254)
 8004804:	4a05      	ldr	r2, [pc, #20]	; (800481c <Buzzer_Routine+0x18>)
 8004806:	7813      	ldrb	r3, [r2, #0]
 8004808:	2bfd      	cmp	r3, #253	; 0xfd
	{
		htim2.Instance->CCR2 = duty_cycle;
		duty_cycle += 30;
	}
	else
		duty_cycle = 0;
 800480a:	bf8f      	iteee	hi
 800480c:	2300      	movhi	r3, #0
		htim2.Instance->CCR2 = duty_cycle;
 800480e:	4904      	ldrls	r1, [pc, #16]	; (8004820 <Buzzer_Routine+0x1c>)
 8004810:	6809      	ldrls	r1, [r1, #0]
 8004812:	638b      	strls	r3, [r1, #56]	; 0x38
		duty_cycle += 30;
 8004814:	bf98      	it	ls
 8004816:	331e      	addls	r3, #30
		duty_cycle = 0;
 8004818:	7013      	strb	r3, [r2, #0]
 800481a:	4770      	bx	lr
 800481c:	20000148 	.word	0x20000148
 8004820:	20000308 	.word	0x20000308

08004824 <LED_Routine>:
}

/************* LEDS control routines ****************************/

void LED_Routine( void )
{
 8004824:	b538      	push	{r3, r4, r5, lr}
	static uint8_t i = 0;

	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0x01);
 8004826:	2201      	movs	r2, #1
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	4817      	ldr	r0, [pc, #92]	; (8004888 <LED_Routine+0x64>)
 800482c:	f7fd f878 	bl	8001920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0x01);
 8004830:	2201      	movs	r2, #1
 8004832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004836:	4815      	ldr	r0, [pc, #84]	; (800488c <LED_Routine+0x68>)
 8004838:	f7fd f872 	bl	8001920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0x01);
 800483c:	2201      	movs	r2, #1

	if(i >= LED_ROUTINE_SIZE){ i = 0; }
 800483e:	4c14      	ldr	r4, [pc, #80]	; (8004890 <LED_Routine+0x6c>)
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0x01);
 8004840:	4611      	mov	r1, r2
 8004842:	4811      	ldr	r0, [pc, #68]	; (8004888 <LED_Routine+0x64>)
 8004844:	f7fd f86c 	bl	8001920 <HAL_GPIO_WritePin>
	if(i >= LED_ROUTINE_SIZE){ i = 0; }
 8004848:	7823      	ldrb	r3, [r4, #0]

	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, sequence.led_1[i]);
 800484a:	4d12      	ldr	r5, [pc, #72]	; (8004894 <LED_Routine+0x70>)
	if(i >= LED_ROUTINE_SIZE){ i = 0; }
 800484c:	2b0b      	cmp	r3, #11
 800484e:	bf84      	itt	hi
 8004850:	2300      	movhi	r3, #0
 8004852:	7023      	strbhi	r3, [r4, #0]
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, sequence.led_1[i]);
 8004854:	7823      	ldrb	r3, [r4, #0]
 8004856:	2140      	movs	r1, #64	; 0x40
 8004858:	5cea      	ldrb	r2, [r5, r3]
 800485a:	480b      	ldr	r0, [pc, #44]	; (8004888 <LED_Routine+0x64>)
 800485c:	f7fd f860 	bl	8001920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, sequence.led_2[i]);
 8004860:	7823      	ldrb	r3, [r4, #0]
 8004862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004866:	442b      	add	r3, r5
 8004868:	7b1a      	ldrb	r2, [r3, #12]
 800486a:	4808      	ldr	r0, [pc, #32]	; (800488c <LED_Routine+0x68>)
 800486c:	f7fd f858 	bl	8001920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, sequence.led_3[i]);
 8004870:	7823      	ldrb	r3, [r4, #0]
 8004872:	2101      	movs	r1, #1
 8004874:	441d      	add	r5, r3
 8004876:	7e2a      	ldrb	r2, [r5, #24]
 8004878:	4803      	ldr	r0, [pc, #12]	; (8004888 <LED_Routine+0x64>)
 800487a:	f7fd f851 	bl	8001920 <HAL_GPIO_WritePin>

	i++;
 800487e:	7823      	ldrb	r3, [r4, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	7023      	strb	r3, [r4, #0]
 8004884:	bd38      	pop	{r3, r4, r5, pc}
 8004886:	bf00      	nop
 8004888:	40010800 	.word	0x40010800
 800488c:	40010c00 	.word	0x40010c00
 8004890:	20000149 	.word	0x20000149
 8004894:	2000016e 	.word	0x2000016e

08004898 <LED_ChangeRoutine>:

}

void LED_ChangeRoutine(uint8_t routine)
{
 8004898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <LED_ChangeRoutine+0xc8>)
	switch(routine)
 800489c:	2801      	cmp	r0, #1
{
 800489e:	b08b      	sub	sp, #44	; 0x2c
 80048a0:	f103 060c 	add.w	r6, r3, #12
 80048a4:	f103 0518 	add.w	r5, r3, #24
	switch(routine)
 80048a8:	d01f      	beq.n	80048ea <LED_ChangeRoutine+0x52>
 80048aa:	2802      	cmp	r0, #2
 80048ac:	d041      	beq.n	8004932 <LED_ChangeRoutine+0x9a>
			break;
		}

		default:
		{
			const uint8_t led_1[] = {1,0,0,1,0,0,1,0,0,1,0,0};
 80048ae:	4c2d      	ldr	r4, [pc, #180]	; (8004964 <LED_ChangeRoutine+0xcc>)
 80048b0:	aa01      	add	r2, sp, #4
 80048b2:	6820      	ldr	r0, [r4, #0]
 80048b4:	6861      	ldr	r1, [r4, #4]
 80048b6:	68a7      	ldr	r7, [r4, #8]
 80048b8:	c203      	stmia	r2!, {r0, r1}
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048ba:	aa01      	add	r2, sp, #4
 80048bc:	ca03      	ldmia	r2!, {r0, r1}
			const uint8_t led_2[] = {0,1,0,0,1,0,0,1,0,0,1,0};
 80048be:	4622      	mov	r2, r4
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048c0:	6018      	str	r0, [r3, #0]
			const uint8_t led_2[] = {0,1,0,0,1,0,0,1,0,0,1,0};
 80048c2:	f852 0f0c 	ldr.w	r0, [r2, #12]!
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048c6:	6059      	str	r1, [r3, #4]
			const uint8_t led_2[] = {0,1,0,0,1,0,0,1,0,0,1,0};
 80048c8:	6851      	ldr	r1, [r2, #4]
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048ca:	609f      	str	r7, [r3, #8]
			const uint8_t led_2[] = {0,1,0,0,1,0,0,1,0,0,1,0};
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	c703      	stmia	r7!, {r0, r1}
 80048d0:	6897      	ldr	r7, [r2, #8]
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 80048d2:	aa04      	add	r2, sp, #16
 80048d4:	ca03      	ldmia	r2!, {r0, r1}
 80048d6:	60d8      	str	r0, [r3, #12]
			const uint8_t led_3[] = {0,0,1,0,0,1,0,0,1,0,0,1};
 80048d8:	f854 0f18 	ldr.w	r0, [r4, #24]!
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 80048dc:	6071      	str	r1, [r6, #4]
			const uint8_t led_3[] = {0,0,1,0,0,1,0,0,1,0,0,1};
 80048de:	6861      	ldr	r1, [r4, #4]
 80048e0:	aa07      	add	r2, sp, #28
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 80048e2:	60b7      	str	r7, [r6, #8]
			const uint8_t led_3[] = {0,0,1,0,0,1,0,0,1,0,0,1};
 80048e4:	c203      	stmia	r2!, {r0, r1}
 80048e6:	68a4      	ldr	r4, [r4, #8]
 80048e8:	e01c      	b.n	8004924 <LED_ChangeRoutine+0x8c>
			const uint8_t led_1[] = {1,1,0,1,1,0,1,1,0,1,1,0};
 80048ea:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <LED_ChangeRoutine+0xd0>)
 80048ec:	ac01      	add	r4, sp, #4
 80048ee:	6810      	ldr	r0, [r2, #0]
 80048f0:	6851      	ldr	r1, [r2, #4]
 80048f2:	6897      	ldr	r7, [r2, #8]
 80048f4:	c403      	stmia	r4!, {r0, r1}
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048f6:	ac01      	add	r4, sp, #4
 80048f8:	cc03      	ldmia	r4!, {r0, r1}
			const uint8_t led_2[] = {1,0,1,1,0,1,1,0,1,1,0,1};
 80048fa:	4614      	mov	r4, r2
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 80048fc:	6018      	str	r0, [r3, #0]
			const uint8_t led_2[] = {1,0,1,1,0,1,1,0,1,1,0,1};
 80048fe:	f854 0f0c 	ldr.w	r0, [r4, #12]!
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 8004902:	6059      	str	r1, [r3, #4]
			const uint8_t led_2[] = {1,0,1,1,0,1,1,0,1,1,0,1};
 8004904:	6861      	ldr	r1, [r4, #4]
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 8004906:	609f      	str	r7, [r3, #8]
			const uint8_t led_2[] = {1,0,1,1,0,1,1,0,1,1,0,1};
 8004908:	af04      	add	r7, sp, #16
 800490a:	c703      	stmia	r7!, {r0, r1}
 800490c:	68a7      	ldr	r7, [r4, #8]
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 800490e:	ac04      	add	r4, sp, #16
 8004910:	cc03      	ldmia	r4!, {r0, r1}
 8004912:	60d8      	str	r0, [r3, #12]
			const uint8_t led_3[] = {0,1,1,0,1,1,0,1,1,0,1,1};
 8004914:	f852 0f18 	ldr.w	r0, [r2, #24]!
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 8004918:	6071      	str	r1, [r6, #4]
			const uint8_t led_3[] = {0,1,1,0,1,1,0,1,1,0,1,1};
 800491a:	6851      	ldr	r1, [r2, #4]
 800491c:	ac07      	add	r4, sp, #28
 800491e:	c403      	stmia	r4!, {r0, r1}
 8004920:	6894      	ldr	r4, [r2, #8]
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 8004922:	60b7      	str	r7, [r6, #8]
			memcpy(sequence.led_3, led_3, LED_ROUTINE_SIZE);
 8004924:	aa07      	add	r2, sp, #28
 8004926:	ca03      	ldmia	r2!, {r0, r1}
 8004928:	6198      	str	r0, [r3, #24]
 800492a:	6069      	str	r1, [r5, #4]
 800492c:	60ac      	str	r4, [r5, #8]
			break;
		}
	}
}
 800492e:	b00b      	add	sp, #44	; 0x2c
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const uint8_t led_1[] = {1,0,1,0,1,0,1,0,1,0,1,0};
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <LED_ChangeRoutine+0xd4>)
 8004934:	ac01      	add	r4, sp, #4
 8004936:	6810      	ldr	r0, [r2, #0]
 8004938:	6851      	ldr	r1, [r2, #4]
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 800493a:	af01      	add	r7, sp, #4
			const uint8_t led_1[] = {1,0,1,0,1,0,1,0,1,0,1,0};
 800493c:	c403      	stmia	r4!, {r0, r1}
 800493e:	6890      	ldr	r0, [r2, #8]
 8004940:	4604      	mov	r4, r0
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 8004942:	cf03      	ldmia	r7!, {r0, r1}
			const uint8_t led_2[] = {1,0,1,0,1,0,1,0,1,0,1,0};
 8004944:	af04      	add	r7, sp, #16
 8004946:	c703      	stmia	r7!, {r0, r1}
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 8004948:	af04      	add	r7, sp, #16
			memcpy(sequence.led_1, led_1, LED_ROUTINE_SIZE);
 800494a:	6018      	str	r0, [r3, #0]
 800494c:	6059      	str	r1, [r3, #4]
 800494e:	609c      	str	r4, [r3, #8]
			memcpy(sequence.led_2, led_2, LED_ROUTINE_SIZE);
 8004950:	cf03      	ldmia	r7!, {r0, r1}
 8004952:	60d8      	str	r0, [r3, #12]
 8004954:	6071      	str	r1, [r6, #4]
 8004956:	60b4      	str	r4, [r6, #8]
			const uint8_t led_3[] = {1,0,1,0,1,0,1,0,1,0,1,0};
 8004958:	ae07      	add	r6, sp, #28
 800495a:	c603      	stmia	r6!, {r0, r1}
 800495c:	e7e2      	b.n	8004924 <LED_ChangeRoutine+0x8c>
 800495e:	bf00      	nop
 8004960:	2000016e 	.word	0x2000016e
 8004964:	08006c10 	.word	0x08006c10
 8004968:	08006be0 	.word	0x08006be0
 800496c:	08006c04 	.word	0x08006c04

08004970 <Sensors_Init>:

/************* Sensors configuration and update routines *********/

void Sensors_Init( void )
{
 8004970:	b508      	push	{r3, lr}
	BMP180_Init(&bmp);
 8004972:	4804      	ldr	r0, [pc, #16]	; (8004984 <Sensors_Init+0x14>)
 8004974:	f7fe fe14 	bl	80035a0 <BMP180_Init>
	MPU6050_Init(&hi2c1);
}
 8004978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU6050_Init(&hi2c1);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <Sensors_Init+0x18>)
 800497e:	f7ff bb2b 	b.w	8003fd8 <MPU6050_Init>
 8004982:	bf00      	nop
 8004984:	200001a4 	.word	0x200001a4
 8004988:	200001f8 	.word	0x200001f8

0800498c <System_Init>:
{
 800498c:	b508      	push	{r3, lr}
	LED_ChangeRoutine(0x00);
 800498e:	2000      	movs	r0, #0
 8004990:	f7ff ff82 	bl	8004898 <LED_ChangeRoutine>
	Sensors_Init();
 8004994:	f7ff ffec 	bl	8004970 <Sensors_Init>
}
 8004998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_ChangeDirection();
 800499c:	f7ff ba7c 	b.w	8003e98 <Motor_ChangeDirection>

080049a0 <Sensors_Update>:

void Sensors_Update( void )
{
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint32_t distance = 0;
	char message[16] = {0};
 80049a2:	2410      	movs	r4, #16
{
 80049a4:	b087      	sub	sp, #28

	BMP180_ReadAll(&bmp);
 80049a6:	4f31      	ldr	r7, [pc, #196]	; (8004a6c <Sensors_Update+0xcc>)
	char message[16] = {0};
 80049a8:	4622      	mov	r2, r4
 80049aa:	2100      	movs	r1, #0
 80049ac:	a802      	add	r0, sp, #8
 80049ae:	f000 f9cb 	bl	8004d48 <memset>
	BMP180_ReadAll(&bmp);
 80049b2:	4638      	mov	r0, r7
 80049b4:	f7fe ff6c 	bl	8003890 <BMP180_ReadAll>

	snprintf(message, 16, "@%.2x%d!", TEMPERATURE_UPDATE, (int)bmp.data.temp);
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f7fc fb55 	bl	8001068 <__aeabi_f2iz>
 80049be:	4e2c      	ldr	r6, [pc, #176]	; (8004a70 <Sensors_Update+0xd0>)
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 80049c0:	4d2c      	ldr	r5, [pc, #176]	; (8004a74 <Sensors_Update+0xd4>)
	snprintf(message, 16, "@%.2x%d!", TEMPERATURE_UPDATE, (int)bmp.data.temp);
 80049c2:	9000      	str	r0, [sp, #0]
 80049c4:	4623      	mov	r3, r4
 80049c6:	4632      	mov	r2, r6
 80049c8:	4621      	mov	r1, r4
 80049ca:	a802      	add	r0, sp, #8
 80049cc:	f000 f9c4 	bl	8004d58 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 80049d0:	2332      	movs	r3, #50	; 0x32
 80049d2:	4622      	mov	r2, r4
 80049d4:	a902      	add	r1, sp, #8
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7fe fcfe 	bl	80033d8 <HAL_UART_Transmit>
	memset(message, 0x00, sizeof(message));
 80049dc:	4622      	mov	r2, r4
 80049de:	2100      	movs	r1, #0
 80049e0:	a802      	add	r0, sp, #8
 80049e2:	f000 f9b1 	bl	8004d48 <memset>

	snprintf(message, 16, "@%.2x%d!", PRESSURE_UPDATE, (int)bmp.data.press);
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	4632      	mov	r2, r6
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4621      	mov	r1, r4
 80049ee:	2311      	movs	r3, #17
 80049f0:	a802      	add	r0, sp, #8
 80049f2:	f000 f9b1 	bl	8004d58 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 80049f6:	2332      	movs	r3, #50	; 0x32
 80049f8:	4622      	mov	r2, r4
 80049fa:	a902      	add	r1, sp, #8
 80049fc:	4628      	mov	r0, r5
 80049fe:	f7fe fceb 	bl	80033d8 <HAL_UART_Transmit>
	memset(message, 0x00, sizeof(message));
 8004a02:	4622      	mov	r2, r4
 8004a04:	2100      	movs	r1, #0
 8004a06:	a802      	add	r0, sp, #8
 8004a08:	f000 f99e 	bl	8004d48 <memset>

	snprintf(message, 16, "@%.2x%d!", ALTITUDE_UPDATE, (int)bmp.data.altitude);
 8004a0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a0e:	f7fc fb2b 	bl	8001068 <__aeabi_f2iz>
 8004a12:	4632      	mov	r2, r6
 8004a14:	9000      	str	r0, [sp, #0]
 8004a16:	4621      	mov	r1, r4
 8004a18:	2312      	movs	r3, #18
 8004a1a:	a802      	add	r0, sp, #8
 8004a1c:	f000 f99c 	bl	8004d58 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 8004a20:	2332      	movs	r3, #50	; 0x32
 8004a22:	4622      	mov	r2, r4
 8004a24:	a902      	add	r1, sp, #8
 8004a26:	4628      	mov	r0, r5
 8004a28:	f7fe fcd6 	bl	80033d8 <HAL_UART_Transmit>
	memset(message, 0x00, sizeof(message));
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	2100      	movs	r1, #0
 8004a30:	a802      	add	r0, sp, #8
 8004a32:	f000 f989 	bl	8004d48 <memset>

	distance = HCSR04_Read();
 8004a36:	f7fe ff99 	bl	800396c <HCSR04_Read>

	snprintf(message, 16, "@%.2x%d!", DISTANCE_UPDATE, (int)distance);
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	9000      	str	r0, [sp, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	2313      	movs	r3, #19
 8004a42:	a802      	add	r0, sp, #8
 8004a44:	f000 f988 	bl	8004d58 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 8004a48:	2332      	movs	r3, #50	; 0x32
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	a902      	add	r1, sp, #8
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7fe fcc2 	bl	80033d8 <HAL_UART_Transmit>
	memset(message, 0x00, sizeof(message));
 8004a54:	4622      	mov	r2, r4
 8004a56:	2100      	movs	r1, #0
 8004a58:	a802      	add	r0, sp, #8
 8004a5a:	f000 f975 	bl	8004d48 <memset>

	MPU6050_ReadAll(&hi2c1, &MPU6050);
 8004a5e:	4906      	ldr	r1, [pc, #24]	; (8004a78 <Sensors_Update+0xd8>)
 8004a60:	4806      	ldr	r0, [pc, #24]	; (8004a7c <Sensors_Update+0xdc>)
 8004a62:	f7ff fbd9 	bl	8004218 <MPU6050_ReadAll>

}
 8004a66:	b007      	add	sp, #28
 8004a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200001a4 	.word	0x200001a4
 8004a70:	08006c5d 	.word	0x08006c5d
 8004a74:	20000348 	.word	0x20000348
 8004a78:	200003a0 	.word	0x200003a0
 8004a7c:	200001f8 	.word	0x200001f8

08004a80 <ADC_ReadData>:

/************* ADC data acquisition routine *********************/

void ADC_ReadData( void )
{
 8004a80:	b570      	push	{r4, r5, r6, lr}
	uint32_t adc1_value = 0;
	uint32_t adc2_value = 0;

	HAL_ADC_Start(&hadc1);
 8004a82:	4d17      	ldr	r5, [pc, #92]	; (8004ae0 <ADC_ReadData+0x60>)
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7fc fccd 	bl	8001424 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004a8a:	2132      	movs	r1, #50	; 0x32
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f7fc fb6b 	bl	8001168 <HAL_ADC_PollForConversion>
	adc1_value = HAL_ADC_GetValue(&hadc1);
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7fc fc06 	bl	80012a4 <HAL_ADC_GetValue>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004a98:	2132      	movs	r1, #50	; 0x32
	adc1_value = HAL_ADC_GetValue(&hadc1);
 8004a9a:	4604      	mov	r4, r0
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7fc fb63 	bl	8001168 <HAL_ADC_PollForConversion>
	adc2_value = HAL_ADC_GetValue(&hadc1);
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7fc fbfe 	bl	80012a4 <HAL_ADC_GetValue>
 8004aa8:	4606      	mov	r6, r0
	HAL_ADC_Stop(&hadc1);
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f7fc fdbe 	bl	800162c <HAL_ADC_Stop>

	adc1_value = (adc1_value*3300)/4095;
 8004ab0:	f640 43e4 	movw	r3, #3300	; 0xce4
	adc2_value = (adc2_value*3300)/4095;
 8004ab4:	f640 71ff 	movw	r1, #4095	; 0xfff
	adc1_value = (adc1_value*3300)/4095;
 8004ab8:	fb03 f204 	mul.w	r2, r3, r4
	adc2_value = (adc2_value*3300)/4095;
 8004abc:	4373      	muls	r3, r6
 8004abe:	fbb3 f3f1 	udiv	r3, r3, r1

	batt_2 = (adc2_value*15)/10;
 8004ac2:	200a      	movs	r0, #10
 8004ac4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	adc1_value = (adc1_value*3300)/4095;
 8004ac8:	fbb2 f2f1 	udiv	r2, r2, r1
	batt_2 = (adc2_value*15)/10;
 8004acc:	fbb3 f3f0 	udiv	r3, r3, r0
 8004ad0:	4804      	ldr	r0, [pc, #16]	; (8004ae4 <ADC_ReadData+0x64>)
	batt_1 = (adc1_value*3) - batt_2;
 8004ad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	batt_2 = (adc2_value*15)/10;
 8004ad6:	6003      	str	r3, [r0, #0]
	batt_1 = (adc1_value*3) - batt_2;
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	4a03      	ldr	r2, [pc, #12]	; (8004ae8 <ADC_ReadData+0x68>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	2000028c 	.word	0x2000028c
 8004ae4:	20000144 	.word	0x20000144
 8004ae8:	20000140 	.word	0x20000140

08004aec <Battery_UpdateStatus>:
}

void Battery_UpdateStatus( void )
{
 8004aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char message[16] = {0};
 8004aee:	2210      	movs	r2, #16
 8004af0:	2100      	movs	r1, #0
 8004af2:	a802      	add	r0, sp, #8
 8004af4:	f000 f928 	bl	8004d48 <memset>
	uint8_t battery_status = 0;

	ADC_ReadData();
 8004af8:	f7ff ffc2 	bl	8004a80 <ADC_ReadData>

	if(batt_1 > 3600 && batt_2 > 3600)
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <Battery_UpdateStatus+0xa8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8004b04:	d91b      	bls.n	8004b3e <Battery_UpdateStatus+0x52>
 8004b06:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <Battery_UpdateStatus+0xac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8004b0e:	d91a      	bls.n	8004b46 <Battery_UpdateStatus+0x5a>
	{
		battery_status = 0x03;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b16:	4821      	ldr	r0, [pc, #132]	; (8004b9c <Battery_UpdateStatus+0xb0>)
 8004b18:	f7fc ff02 	bl	8001920 <HAL_GPIO_WritePin>
		battery_status = 0x03;
 8004b1c:	2303      	movs	r3, #3
	{
		battery_status = 0x00;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
	}

	snprintf(message, 16, "@%.2x%d!", BATTERY_STATUS, battery_status);
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <Battery_UpdateStatus+0xb4>)
 8004b22:	2314      	movs	r3, #20
 8004b24:	2110      	movs	r1, #16
 8004b26:	a802      	add	r0, sp, #8
 8004b28:	f000 f916 	bl	8004d58 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 50);
 8004b2c:	2332      	movs	r3, #50	; 0x32
 8004b2e:	2210      	movs	r2, #16
 8004b30:	a902      	add	r1, sp, #8
 8004b32:	481c      	ldr	r0, [pc, #112]	; (8004ba4 <Battery_UpdateStatus+0xb8>)
 8004b34:	f7fe fc50 	bl	80033d8 <HAL_UART_Transmit>
}
 8004b38:	b007      	add	sp, #28
 8004b3a:	f85d fb04 	ldr.w	pc, [sp], #4
	else if(batt_1 > 3400 && batt_2 > 3400)
 8004b3e:	f640 5248 	movw	r2, #3400	; 0xd48
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d90d      	bls.n	8004b62 <Battery_UpdateStatus+0x76>
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <Battery_UpdateStatus+0xac>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	f640 5348 	movw	r3, #3400	; 0xd48
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90a      	bls.n	8004b68 <Battery_UpdateStatus+0x7c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8004b52:	2200      	movs	r2, #0
 8004b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b58:	4810      	ldr	r0, [pc, #64]	; (8004b9c <Battery_UpdateStatus+0xb0>)
 8004b5a:	f7fc fee1 	bl	8001920 <HAL_GPIO_WritePin>
		battery_status = 0x02;
 8004b5e:	2302      	movs	r3, #2
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8004b60:	e7dd      	b.n	8004b1e <Battery_UpdateStatus+0x32>
	else if(batt_1 > 3200 && batt_2 > 3200)
 8004b62:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8004b66:	d90c      	bls.n	8004b82 <Battery_UpdateStatus+0x96>
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <Battery_UpdateStatus+0xac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8004b70:	d907      	bls.n	8004b82 <Battery_UpdateStatus+0x96>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8004b72:	2201      	movs	r2, #1
 8004b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b78:	4808      	ldr	r0, [pc, #32]	; (8004b9c <Battery_UpdateStatus+0xb0>)
 8004b7a:	f7fc fed1 	bl	8001920 <HAL_GPIO_WritePin>
		battery_status = 0x01;
 8004b7e:	2301      	movs	r3, #1
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8004b80:	e7cd      	b.n	8004b1e <Battery_UpdateStatus+0x32>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8004b82:	2201      	movs	r2, #1
 8004b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b88:	4804      	ldr	r0, [pc, #16]	; (8004b9c <Battery_UpdateStatus+0xb0>)
 8004b8a:	f7fc fec9 	bl	8001920 <HAL_GPIO_WritePin>
		battery_status = 0x00;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e7c5      	b.n	8004b1e <Battery_UpdateStatus+0x32>
 8004b92:	bf00      	nop
 8004b94:	20000140 	.word	0x20000140
 8004b98:	20000144 	.word	0x20000144
 8004b9c:	40010c00 	.word	0x40010c00
 8004ba0:	08006c5d 	.word	0x08006c5d
 8004ba4:	20000348 	.word	0x20000348

08004ba8 <UART_CommandsHandle>:
	return 0;
}

void UART_CommandsHandle( void )
{
	switch(rxBuffer[0])
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <UART_CommandsHandle+0x30>)
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	2a02      	cmp	r2, #2
 8004bae:	d00d      	beq.n	8004bcc <UART_CommandsHandle+0x24>
 8004bb0:	2a04      	cmp	r2, #4
 8004bb2:	d00e      	beq.n	8004bd2 <UART_CommandsHandle+0x2a>
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	d10e      	bne.n	8004bd6 <UART_CommandsHandle+0x2e>
	{
	case DIRECTION:
		line_follower_mode_on = rxBuffer[1];
 8004bb8:	785a      	ldrb	r2, [r3, #1]
 8004bba:	4908      	ldr	r1, [pc, #32]	; (8004bdc <UART_CommandsHandle+0x34>)
 8004bbc:	700a      	strb	r2, [r1, #0]
		if(!line_follower_mode_on)
 8004bbe:	b91a      	cbnz	r2, 8004bc8 <UART_CommandsHandle+0x20>
			direction = rxBuffer[2];
 8004bc0:	789a      	ldrb	r2, [r3, #2]
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <UART_CommandsHandle+0x38>)
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	4770      	bx	lr
		else
			Motor_ChangeDirection();
 8004bc8:	f7ff b966 	b.w	8003e98 <Motor_ChangeDirection>
		break;
	case LEDS:
		LED_ChangeRoutine(rxBuffer[1]);
 8004bcc:	7858      	ldrb	r0, [r3, #1]
 8004bce:	f7ff be63 	b.w	8004898 <LED_ChangeRoutine>
		break;
	case SENSORS_UPDATE:
		Sensors_Update();
 8004bd2:	f7ff bee5 	b.w	80049a0 <Sensors_Update>
 8004bd6:	4770      	bx	lr
 8004bd8:	2000014e 	.word	0x2000014e
 8004bdc:	2000014c 	.word	0x2000014c
 8004be0:	20000008 	.word	0x20000008

08004be4 <UART_RXHandle>:

void UART_RXHandle( uint8_t received_byte )
{
	static uint8_t i = 0, j = 0, start_rec = 0x00;

	if(received_byte == '@')
 8004be4:	2840      	cmp	r0, #64	; 0x40
{
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	4604      	mov	r4, r0
 8004bea:	4d24      	ldr	r5, [pc, #144]	; (8004c7c <UART_RXHandle+0x98>)
	if(received_byte == '@')
 8004bec:	d10c      	bne.n	8004c08 <UART_RXHandle+0x24>
	{
		start_rec = 0x01;
 8004bee:	2301      	movs	r3, #1
		i = 0; j = 0;
 8004bf0:	2100      	movs	r1, #0
		start_rec = 0x01;
 8004bf2:	702b      	strb	r3, [r5, #0]
		i = 0; j = 0;
 8004bf4:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <UART_RXHandle+0x9c>)
		memset(rxBuffer, 0x00, sizeof(rxBuffer));
 8004bf6:	2220      	movs	r2, #32
		i = 0; j = 0;
 8004bf8:	7019      	strb	r1, [r3, #0]
 8004bfa:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <UART_RXHandle+0xa0>)
		memset(rxBuffer, 0x00, sizeof(rxBuffer));
 8004bfc:	4822      	ldr	r0, [pc, #136]	; (8004c88 <UART_RXHandle+0xa4>)
		i = 0; j = 0;
 8004bfe:	7019      	strb	r1, [r3, #0]
			rxBuffer[i] |= (get_number(received_byte) & 0x0F);
			i++;
		}
		j++;
	}
}
 8004c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(rxBuffer, 0x00, sizeof(rxBuffer));
 8004c04:	f000 b8a0 	b.w	8004d48 <memset>
	if(received_byte == '!')
 8004c08:	2821      	cmp	r0, #33	; 0x21
 8004c0a:	d103      	bne.n	8004c14 <UART_RXHandle+0x30>
		start_rec = 0x00;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	702b      	strb	r3, [r5, #0]
		UART_CommandsHandle();
 8004c10:	f7ff ffca 	bl	8004ba8 <UART_CommandsHandle>
	if(start_rec)
 8004c14:	782b      	ldrb	r3, [r5, #0]
 8004c16:	b1cb      	cbz	r3, 8004c4c <UART_RXHandle+0x68>
		uint8_t is_even = (j % 2)? 0 : 1;
 8004c18:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <UART_RXHandle+0xa0>)
 8004c1a:	4e19      	ldr	r6, [pc, #100]	; (8004c80 <UART_RXHandle+0x9c>)
 8004c1c:	7811      	ldrb	r1, [r2, #0]
 8004c1e:	4d1a      	ldr	r5, [pc, #104]	; (8004c88 <UART_RXHandle+0xa4>)
		if(is_even)
 8004c20:	f011 0f01 	tst.w	r1, #1
 8004c24:	d115      	bne.n	8004c52 <UART_RXHandle+0x6e>
	switch(ascii)
 8004c26:	2c30      	cmp	r4, #48	; 0x30
 8004c28:	d305      	bcc.n	8004c36 <UART_RXHandle+0x52>
 8004c2a:	2c39      	cmp	r4, #57	; 0x39
 8004c2c:	d905      	bls.n	8004c3a <UART_RXHandle+0x56>
 8004c2e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	d90b      	bls.n	8004c4e <UART_RXHandle+0x6a>
	return 0;
 8004c36:	2400      	movs	r4, #0
 8004c38:	e001      	b.n	8004c3e <UART_RXHandle+0x5a>
		return ascii - '0';
 8004c3a:	3c30      	subs	r4, #48	; 0x30
		return ascii - 'A' + 0x0A;
 8004c3c:	b2e4      	uxtb	r4, r4
			rxBuffer[i] |= ((get_number(received_byte) & 0x0F) << 4);
 8004c3e:	7833      	ldrb	r3, [r6, #0]
 8004c40:	5ce8      	ldrb	r0, [r5, r3]
 8004c42:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
 8004c46:	54ec      	strb	r4, [r5, r3]
		j++;
 8004c48:	3101      	adds	r1, #1
 8004c4a:	7011      	strb	r1, [r2, #0]
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
		return ascii - 'A' + 0x0A;
 8004c4e:	3c37      	subs	r4, #55	; 0x37
 8004c50:	e7f4      	b.n	8004c3c <UART_RXHandle+0x58>
	switch(ascii)
 8004c52:	2c30      	cmp	r4, #48	; 0x30
 8004c54:	d305      	bcc.n	8004c62 <UART_RXHandle+0x7e>
 8004c56:	2c39      	cmp	r4, #57	; 0x39
 8004c58:	d905      	bls.n	8004c66 <UART_RXHandle+0x82>
 8004c5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d90a      	bls.n	8004c78 <UART_RXHandle+0x94>
	return 0;
 8004c62:	2400      	movs	r4, #0
 8004c64:	e001      	b.n	8004c6a <UART_RXHandle+0x86>
		return ascii - '0';
 8004c66:	3c30      	subs	r4, #48	; 0x30
		return ascii - 'A' + 0x0A;
 8004c68:	b2e4      	uxtb	r4, r4
			rxBuffer[i] |= (get_number(received_byte) & 0x0F);
 8004c6a:	7833      	ldrb	r3, [r6, #0]
 8004c6c:	5ce8      	ldrb	r0, [r5, r3]
 8004c6e:	4304      	orrs	r4, r0
 8004c70:	54ec      	strb	r4, [r5, r3]
			i++;
 8004c72:	3301      	adds	r3, #1
 8004c74:	7033      	strb	r3, [r6, #0]
 8004c76:	e7e7      	b.n	8004c48 <UART_RXHandle+0x64>
		return ascii - 'A' + 0x0A;
 8004c78:	3c37      	subs	r4, #55	; 0x37
 8004c7a:	e7f5      	b.n	8004c68 <UART_RXHandle+0x84>
 8004c7c:	20000192 	.word	0x20000192
 8004c80:	2000014a 	.word	0x2000014a
 8004c84:	2000014b 	.word	0x2000014b
 8004c88:	2000014e 	.word	0x2000014e

08004c8c <UART_ReadData>:

void UART_ReadData( void )
{
	if(HAL_UART_Receive(&huart2, (uint8_t *)&received_byte, 1, 1) == HAL_OK)
 8004c8c:	2301      	movs	r3, #1
{
 8004c8e:	b510      	push	{r4, lr}
	if(HAL_UART_Receive(&huart2, (uint8_t *)&received_byte, 1, 1) == HAL_OK)
 8004c90:	4c06      	ldr	r4, [pc, #24]	; (8004cac <UART_ReadData+0x20>)
 8004c92:	461a      	mov	r2, r3
 8004c94:	4621      	mov	r1, r4
 8004c96:	4806      	ldr	r0, [pc, #24]	; (8004cb0 <UART_ReadData+0x24>)
 8004c98:	f7fe fbfa 	bl	8003490 <HAL_UART_Receive>
 8004c9c:	b920      	cbnz	r0, 8004ca8 <UART_ReadData+0x1c>
	{
		UART_RXHandle( received_byte );
 8004c9e:	7820      	ldrb	r0, [r4, #0]
	}

}
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		UART_RXHandle( received_byte );
 8004ca4:	f7ff bf9e 	b.w	8004be4 <UART_RXHandle>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	2000014d 	.word	0x2000014d
 8004cb0:	20000348 	.word	0x20000348

08004cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004cb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004cb6:	e003      	b.n	8004cc0 <LoopCopyDataInit>

08004cb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004cba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004cbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004cbe:	3104      	adds	r1, #4

08004cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004cc0:	480a      	ldr	r0, [pc, #40]	; (8004cec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004cc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004cc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004cc8:	d3f6      	bcc.n	8004cb8 <CopyDataInit>
  ldr r2, =_sbss
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ccc:	e002      	b.n	8004cd4 <LoopFillZerobss>

08004cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004cd0:	f842 3b04 	str.w	r3, [r2], #4

08004cd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004cd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004cd8:	d3f9      	bcc.n	8004cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cda:	f7ff fd33 	bl	8004744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cde:	f000 f80f 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ce2:	f7fe feab 	bl	8003a3c <main>
  bx lr
 8004ce6:	4770      	bx	lr
  ldr r3, =_sidata
 8004ce8:	08006d38 	.word	0x08006d38
  ldr r0, =_sdata
 8004cec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004cf0:	2000010c 	.word	0x2000010c
  ldr r2, =_sbss
 8004cf4:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 8004cf8:	200003fc 	.word	0x200003fc

08004cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cfc:	e7fe      	b.n	8004cfc <ADC1_2_IRQHandler>
	...

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	2500      	movs	r5, #0
 8004d04:	4e0c      	ldr	r6, [pc, #48]	; (8004d38 <__libc_init_array+0x38>)
 8004d06:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <__libc_init_array+0x3c>)
 8004d08:	1ba4      	subs	r4, r4, r6
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	42a5      	cmp	r5, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	f001 ff48 	bl	8006ba4 <_init>
 8004d14:	2500      	movs	r5, #0
 8004d16:	4e0a      	ldr	r6, [pc, #40]	; (8004d40 <__libc_init_array+0x40>)
 8004d18:	4c0a      	ldr	r4, [pc, #40]	; (8004d44 <__libc_init_array+0x44>)
 8004d1a:	1ba4      	subs	r4, r4, r6
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	42a5      	cmp	r5, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d28:	4798      	blx	r3
 8004d2a:	3501      	adds	r5, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d32:	4798      	blx	r3
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08006d30 	.word	0x08006d30
 8004d3c:	08006d30 	.word	0x08006d30
 8004d40:	08006d30 	.word	0x08006d30
 8004d44:	08006d34 	.word	0x08006d34

08004d48 <memset>:
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4402      	add	r2, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <sniprintf>:
 8004d58:	b40c      	push	{r2, r3}
 8004d5a:	b530      	push	{r4, r5, lr}
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <sniprintf+0x64>)
 8004d5e:	1e0c      	subs	r4, r1, #0
 8004d60:	b09d      	sub	sp, #116	; 0x74
 8004d62:	681d      	ldr	r5, [r3, #0]
 8004d64:	da08      	bge.n	8004d78 <sniprintf+0x20>
 8004d66:	238b      	movs	r3, #139	; 0x8b
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	602b      	str	r3, [r5, #0]
 8004d6e:	b01d      	add	sp, #116	; 0x74
 8004d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d74:	b002      	add	sp, #8
 8004d76:	4770      	bx	lr
 8004d78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d80:	bf0c      	ite	eq
 8004d82:	4623      	moveq	r3, r4
 8004d84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d88:	9304      	str	r3, [sp, #16]
 8004d8a:	9307      	str	r3, [sp, #28]
 8004d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d90:	9002      	str	r0, [sp, #8]
 8004d92:	9006      	str	r0, [sp, #24]
 8004d94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d9a:	ab21      	add	r3, sp, #132	; 0x84
 8004d9c:	a902      	add	r1, sp, #8
 8004d9e:	4628      	mov	r0, r5
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	f000 f869 	bl	8004e78 <_svfiprintf_r>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	bfbc      	itt	lt
 8004daa:	238b      	movlt	r3, #139	; 0x8b
 8004dac:	602b      	strlt	r3, [r5, #0]
 8004dae:	2c00      	cmp	r4, #0
 8004db0:	d0dd      	beq.n	8004d6e <sniprintf+0x16>
 8004db2:	2200      	movs	r2, #0
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e7d9      	b.n	8004d6e <sniprintf+0x16>
 8004dba:	bf00      	nop
 8004dbc:	200000a4 	.word	0x200000a4

08004dc0 <__ssputs_r>:
 8004dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	688e      	ldr	r6, [r1, #8]
 8004dc6:	4682      	mov	sl, r0
 8004dc8:	429e      	cmp	r6, r3
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4691      	mov	r9, r2
 8004dce:	4698      	mov	r8, r3
 8004dd0:	d835      	bhi.n	8004e3e <__ssputs_r+0x7e>
 8004dd2:	898a      	ldrh	r2, [r1, #12]
 8004dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dd8:	d031      	beq.n	8004e3e <__ssputs_r+0x7e>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	6909      	ldr	r1, [r1, #16]
 8004de0:	1a6f      	subs	r7, r5, r1
 8004de2:	6965      	ldr	r5, [r4, #20]
 8004de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004dec:	f108 0301 	add.w	r3, r8, #1
 8004df0:	443b      	add	r3, r7
 8004df2:	429d      	cmp	r5, r3
 8004df4:	bf38      	it	cc
 8004df6:	461d      	movcc	r5, r3
 8004df8:	0553      	lsls	r3, r2, #21
 8004dfa:	d531      	bpl.n	8004e60 <__ssputs_r+0xa0>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f000 fb47 	bl	8005490 <_malloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	b950      	cbnz	r0, 8004e1c <__ssputs_r+0x5c>
 8004e06:	230c      	movs	r3, #12
 8004e08:	f8ca 3000 	str.w	r3, [sl]
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	463a      	mov	r2, r7
 8004e1e:	6921      	ldr	r1, [r4, #16]
 8004e20:	f000 fac4 	bl	80053ac <memcpy>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	6126      	str	r6, [r4, #16]
 8004e32:	443e      	add	r6, r7
 8004e34:	6026      	str	r6, [r4, #0]
 8004e36:	4646      	mov	r6, r8
 8004e38:	6165      	str	r5, [r4, #20]
 8004e3a:	1bed      	subs	r5, r5, r7
 8004e3c:	60a5      	str	r5, [r4, #8]
 8004e3e:	4546      	cmp	r6, r8
 8004e40:	bf28      	it	cs
 8004e42:	4646      	movcs	r6, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	4632      	mov	r2, r6
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	f000 faba 	bl	80053c2 <memmove>
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	2000      	movs	r0, #0
 8004e52:	1b9b      	subs	r3, r3, r6
 8004e54:	60a3      	str	r3, [r4, #8]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	441e      	add	r6, r3
 8004e5a:	6026      	str	r6, [r4, #0]
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	462a      	mov	r2, r5
 8004e62:	f000 fb73 	bl	800554c <_realloc_r>
 8004e66:	4606      	mov	r6, r0
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1e1      	bne.n	8004e30 <__ssputs_r+0x70>
 8004e6c:	6921      	ldr	r1, [r4, #16]
 8004e6e:	4650      	mov	r0, sl
 8004e70:	f000 fac2 	bl	80053f8 <_free_r>
 8004e74:	e7c7      	b.n	8004e06 <__ssputs_r+0x46>
	...

08004e78 <_svfiprintf_r>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	b09d      	sub	sp, #116	; 0x74
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	898b      	ldrh	r3, [r1, #12]
 8004e82:	4680      	mov	r8, r0
 8004e84:	061c      	lsls	r4, r3, #24
 8004e86:	460d      	mov	r5, r1
 8004e88:	4616      	mov	r6, r2
 8004e8a:	d50f      	bpl.n	8004eac <_svfiprintf_r+0x34>
 8004e8c:	690b      	ldr	r3, [r1, #16]
 8004e8e:	b96b      	cbnz	r3, 8004eac <_svfiprintf_r+0x34>
 8004e90:	2140      	movs	r1, #64	; 0x40
 8004e92:	f000 fafd 	bl	8005490 <_malloc_r>
 8004e96:	6028      	str	r0, [r5, #0]
 8004e98:	6128      	str	r0, [r5, #16]
 8004e9a:	b928      	cbnz	r0, 8004ea8 <_svfiprintf_r+0x30>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	f8c8 3000 	str.w	r3, [r8]
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	e0c4      	b.n	8005032 <_svfiprintf_r+0x1ba>
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	616b      	str	r3, [r5, #20]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eb6:	2330      	movs	r3, #48	; 0x30
 8004eb8:	f04f 0b01 	mov.w	fp, #1
 8004ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ec0:	4637      	mov	r7, r6
 8004ec2:	463c      	mov	r4, r7
 8004ec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d13c      	bne.n	8004f46 <_svfiprintf_r+0xce>
 8004ecc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ed0:	d00b      	beq.n	8004eea <_svfiprintf_r+0x72>
 8004ed2:	4653      	mov	r3, sl
 8004ed4:	4632      	mov	r2, r6
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4640      	mov	r0, r8
 8004eda:	f7ff ff71 	bl	8004dc0 <__ssputs_r>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f000 80a2 	beq.w	8005028 <_svfiprintf_r+0x1b0>
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	4453      	add	r3, sl
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	783b      	ldrb	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 809b 	beq.w	8005028 <_svfiprintf_r+0x1b0>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	9307      	str	r3, [sp, #28]
 8004efc:	9205      	str	r2, [sp, #20]
 8004efe:	9306      	str	r3, [sp, #24]
 8004f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f04:	931a      	str	r3, [sp, #104]	; 0x68
 8004f06:	2205      	movs	r2, #5
 8004f08:	7821      	ldrb	r1, [r4, #0]
 8004f0a:	4850      	ldr	r0, [pc, #320]	; (800504c <_svfiprintf_r+0x1d4>)
 8004f0c:	f000 fa40 	bl	8005390 <memchr>
 8004f10:	1c67      	adds	r7, r4, #1
 8004f12:	9b04      	ldr	r3, [sp, #16]
 8004f14:	b9d8      	cbnz	r0, 8004f4e <_svfiprintf_r+0xd6>
 8004f16:	06d9      	lsls	r1, r3, #27
 8004f18:	bf44      	itt	mi
 8004f1a:	2220      	movmi	r2, #32
 8004f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f20:	071a      	lsls	r2, r3, #28
 8004f22:	bf44      	itt	mi
 8004f24:	222b      	movmi	r2, #43	; 0x2b
 8004f26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f2a:	7822      	ldrb	r2, [r4, #0]
 8004f2c:	2a2a      	cmp	r2, #42	; 0x2a
 8004f2e:	d016      	beq.n	8004f5e <_svfiprintf_r+0xe6>
 8004f30:	2100      	movs	r1, #0
 8004f32:	200a      	movs	r0, #10
 8004f34:	9a07      	ldr	r2, [sp, #28]
 8004f36:	4627      	mov	r7, r4
 8004f38:	783b      	ldrb	r3, [r7, #0]
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	3b30      	subs	r3, #48	; 0x30
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d950      	bls.n	8004fe4 <_svfiprintf_r+0x16c>
 8004f42:	b1c9      	cbz	r1, 8004f78 <_svfiprintf_r+0x100>
 8004f44:	e011      	b.n	8004f6a <_svfiprintf_r+0xf2>
 8004f46:	2b25      	cmp	r3, #37	; 0x25
 8004f48:	d0c0      	beq.n	8004ecc <_svfiprintf_r+0x54>
 8004f4a:	4627      	mov	r7, r4
 8004f4c:	e7b9      	b.n	8004ec2 <_svfiprintf_r+0x4a>
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	; (800504c <_svfiprintf_r+0x1d4>)
 8004f50:	463c      	mov	r4, r7
 8004f52:	1a80      	subs	r0, r0, r2
 8004f54:	fa0b f000 	lsl.w	r0, fp, r0
 8004f58:	4318      	orrs	r0, r3
 8004f5a:	9004      	str	r0, [sp, #16]
 8004f5c:	e7d3      	b.n	8004f06 <_svfiprintf_r+0x8e>
 8004f5e:	9a03      	ldr	r2, [sp, #12]
 8004f60:	1d11      	adds	r1, r2, #4
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	9103      	str	r1, [sp, #12]
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	db01      	blt.n	8004f6e <_svfiprintf_r+0xf6>
 8004f6a:	9207      	str	r2, [sp, #28]
 8004f6c:	e004      	b.n	8004f78 <_svfiprintf_r+0x100>
 8004f6e:	4252      	negs	r2, r2
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	783b      	ldrb	r3, [r7, #0]
 8004f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f7c:	d10d      	bne.n	8004f9a <_svfiprintf_r+0x122>
 8004f7e:	787b      	ldrb	r3, [r7, #1]
 8004f80:	1c79      	adds	r1, r7, #1
 8004f82:	2b2a      	cmp	r3, #42	; 0x2a
 8004f84:	d132      	bne.n	8004fec <_svfiprintf_r+0x174>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	3702      	adds	r7, #2
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9203      	str	r2, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfb8      	it	lt
 8004f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f98:	9305      	str	r3, [sp, #20]
 8004f9a:	4c2d      	ldr	r4, [pc, #180]	; (8005050 <_svfiprintf_r+0x1d8>)
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	7839      	ldrb	r1, [r7, #0]
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 f9f5 	bl	8005390 <memchr>
 8004fa6:	b138      	cbz	r0, 8004fb8 <_svfiprintf_r+0x140>
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	1b00      	subs	r0, r0, r4
 8004fac:	fa03 f000 	lsl.w	r0, r3, r0
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	3701      	adds	r7, #1
 8004fb4:	4303      	orrs	r3, r0
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	7839      	ldrb	r1, [r7, #0]
 8004fba:	2206      	movs	r2, #6
 8004fbc:	4825      	ldr	r0, [pc, #148]	; (8005054 <_svfiprintf_r+0x1dc>)
 8004fbe:	1c7e      	adds	r6, r7, #1
 8004fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc4:	f000 f9e4 	bl	8005390 <memchr>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d035      	beq.n	8005038 <_svfiprintf_r+0x1c0>
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <_svfiprintf_r+0x1e0>)
 8004fce:	b9fb      	cbnz	r3, 8005010 <_svfiprintf_r+0x198>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	f023 0307 	bic.w	r3, r3, #7
 8004fd8:	3308      	adds	r3, #8
 8004fda:	9303      	str	r3, [sp, #12]
 8004fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fde:	444b      	add	r3, r9
 8004fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe2:	e76d      	b.n	8004ec0 <_svfiprintf_r+0x48>
 8004fe4:	fb00 3202 	mla	r2, r0, r2, r3
 8004fe8:	2101      	movs	r1, #1
 8004fea:	e7a4      	b.n	8004f36 <_svfiprintf_r+0xbe>
 8004fec:	2300      	movs	r3, #0
 8004fee:	240a      	movs	r4, #10
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	783a      	ldrb	r2, [r7, #0]
 8004ff8:	3101      	adds	r1, #1
 8004ffa:	3a30      	subs	r2, #48	; 0x30
 8004ffc:	2a09      	cmp	r2, #9
 8004ffe:	d903      	bls.n	8005008 <_svfiprintf_r+0x190>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ca      	beq.n	8004f9a <_svfiprintf_r+0x122>
 8005004:	9005      	str	r0, [sp, #20]
 8005006:	e7c8      	b.n	8004f9a <_svfiprintf_r+0x122>
 8005008:	fb04 2000 	mla	r0, r4, r0, r2
 800500c:	2301      	movs	r3, #1
 800500e:	e7f1      	b.n	8004ff4 <_svfiprintf_r+0x17c>
 8005010:	ab03      	add	r3, sp, #12
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	462a      	mov	r2, r5
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <_svfiprintf_r+0x1e4>)
 8005018:	a904      	add	r1, sp, #16
 800501a:	4640      	mov	r0, r8
 800501c:	f3af 8000 	nop.w
 8005020:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005024:	4681      	mov	r9, r0
 8005026:	d1d9      	bne.n	8004fdc <_svfiprintf_r+0x164>
 8005028:	89ab      	ldrh	r3, [r5, #12]
 800502a:	065b      	lsls	r3, r3, #25
 800502c:	f53f af39 	bmi.w	8004ea2 <_svfiprintf_r+0x2a>
 8005030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005032:	b01d      	add	sp, #116	; 0x74
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	ab03      	add	r3, sp, #12
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	462a      	mov	r2, r5
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <_svfiprintf_r+0x1e4>)
 8005040:	a904      	add	r1, sp, #16
 8005042:	4640      	mov	r0, r8
 8005044:	f000 f884 	bl	8005150 <_printf_i>
 8005048:	e7ea      	b.n	8005020 <_svfiprintf_r+0x1a8>
 800504a:	bf00      	nop
 800504c:	08006c66 	.word	0x08006c66
 8005050:	08006c6c 	.word	0x08006c6c
 8005054:	08006c70 	.word	0x08006c70
 8005058:	00000000 	.word	0x00000000
 800505c:	08004dc1 	.word	0x08004dc1

08005060 <_printf_common>:
 8005060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	4691      	mov	r9, r2
 8005066:	461f      	mov	r7, r3
 8005068:	688a      	ldr	r2, [r1, #8]
 800506a:	690b      	ldr	r3, [r1, #16]
 800506c:	4606      	mov	r6, r0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfb8      	it	lt
 8005072:	4613      	movlt	r3, r2
 8005074:	f8c9 3000 	str.w	r3, [r9]
 8005078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800507c:	460c      	mov	r4, r1
 800507e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005082:	b112      	cbz	r2, 800508a <_printf_common+0x2a>
 8005084:	3301      	adds	r3, #1
 8005086:	f8c9 3000 	str.w	r3, [r9]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	0699      	lsls	r1, r3, #26
 800508e:	bf42      	ittt	mi
 8005090:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005094:	3302      	addmi	r3, #2
 8005096:	f8c9 3000 	strmi.w	r3, [r9]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d107      	bne.n	80050b2 <_printf_common+0x52>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	f8d9 2000 	ldr.w	r2, [r9]
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	429d      	cmp	r5, r3
 80050b0:	db2a      	blt.n	8005108 <_printf_common+0xa8>
 80050b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	3300      	adds	r3, #0
 80050ba:	bf18      	it	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	0692      	lsls	r2, r2, #26
 80050c0:	d42f      	bmi.n	8005122 <_printf_common+0xc2>
 80050c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c6:	4639      	mov	r1, r7
 80050c8:	4630      	mov	r0, r6
 80050ca:	47c0      	blx	r8
 80050cc:	3001      	adds	r0, #1
 80050ce:	d022      	beq.n	8005116 <_printf_common+0xb6>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	68e5      	ldr	r5, [r4, #12]
 80050d4:	f003 0306 	and.w	r3, r3, #6
 80050d8:	2b04      	cmp	r3, #4
 80050da:	bf18      	it	ne
 80050dc:	2500      	movne	r5, #0
 80050de:	f8d9 2000 	ldr.w	r2, [r9]
 80050e2:	f04f 0900 	mov.w	r9, #0
 80050e6:	bf08      	it	eq
 80050e8:	1aad      	subeq	r5, r5, r2
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	bf08      	it	eq
 80050f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfc4      	itt	gt
 80050f8:	1a9b      	subgt	r3, r3, r2
 80050fa:	18ed      	addgt	r5, r5, r3
 80050fc:	341a      	adds	r4, #26
 80050fe:	454d      	cmp	r5, r9
 8005100:	d11b      	bne.n	800513a <_printf_common+0xda>
 8005102:	2000      	movs	r0, #0
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	2301      	movs	r3, #1
 800510a:	4652      	mov	r2, sl
 800510c:	4639      	mov	r1, r7
 800510e:	4630      	mov	r0, r6
 8005110:	47c0      	blx	r8
 8005112:	3001      	adds	r0, #1
 8005114:	d103      	bne.n	800511e <_printf_common+0xbe>
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	3501      	adds	r5, #1
 8005120:	e7c1      	b.n	80050a6 <_printf_common+0x46>
 8005122:	2030      	movs	r0, #48	; 0x30
 8005124:	18e1      	adds	r1, r4, r3
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005130:	4422      	add	r2, r4
 8005132:	3302      	adds	r3, #2
 8005134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005138:	e7c3      	b.n	80050c2 <_printf_common+0x62>
 800513a:	2301      	movs	r3, #1
 800513c:	4622      	mov	r2, r4
 800513e:	4639      	mov	r1, r7
 8005140:	4630      	mov	r0, r6
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d0e6      	beq.n	8005116 <_printf_common+0xb6>
 8005148:	f109 0901 	add.w	r9, r9, #1
 800514c:	e7d7      	b.n	80050fe <_printf_common+0x9e>
	...

08005150 <_printf_i>:
 8005150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005154:	4617      	mov	r7, r2
 8005156:	7e0a      	ldrb	r2, [r1, #24]
 8005158:	b085      	sub	sp, #20
 800515a:	2a6e      	cmp	r2, #110	; 0x6e
 800515c:	4698      	mov	r8, r3
 800515e:	4606      	mov	r6, r0
 8005160:	460c      	mov	r4, r1
 8005162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005164:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005168:	f000 80bc 	beq.w	80052e4 <_printf_i+0x194>
 800516c:	d81a      	bhi.n	80051a4 <_printf_i+0x54>
 800516e:	2a63      	cmp	r2, #99	; 0x63
 8005170:	d02e      	beq.n	80051d0 <_printf_i+0x80>
 8005172:	d80a      	bhi.n	800518a <_printf_i+0x3a>
 8005174:	2a00      	cmp	r2, #0
 8005176:	f000 80c8 	beq.w	800530a <_printf_i+0x1ba>
 800517a:	2a58      	cmp	r2, #88	; 0x58
 800517c:	f000 808a 	beq.w	8005294 <_printf_i+0x144>
 8005180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005184:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005188:	e02a      	b.n	80051e0 <_printf_i+0x90>
 800518a:	2a64      	cmp	r2, #100	; 0x64
 800518c:	d001      	beq.n	8005192 <_printf_i+0x42>
 800518e:	2a69      	cmp	r2, #105	; 0x69
 8005190:	d1f6      	bne.n	8005180 <_printf_i+0x30>
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f011 0f80 	tst.w	r1, #128	; 0x80
 800519a:	d023      	beq.n	80051e4 <_printf_i+0x94>
 800519c:	1d11      	adds	r1, r2, #4
 800519e:	6019      	str	r1, [r3, #0]
 80051a0:	6813      	ldr	r3, [r2, #0]
 80051a2:	e027      	b.n	80051f4 <_printf_i+0xa4>
 80051a4:	2a73      	cmp	r2, #115	; 0x73
 80051a6:	f000 80b4 	beq.w	8005312 <_printf_i+0x1c2>
 80051aa:	d808      	bhi.n	80051be <_printf_i+0x6e>
 80051ac:	2a6f      	cmp	r2, #111	; 0x6f
 80051ae:	d02a      	beq.n	8005206 <_printf_i+0xb6>
 80051b0:	2a70      	cmp	r2, #112	; 0x70
 80051b2:	d1e5      	bne.n	8005180 <_printf_i+0x30>
 80051b4:	680a      	ldr	r2, [r1, #0]
 80051b6:	f042 0220 	orr.w	r2, r2, #32
 80051ba:	600a      	str	r2, [r1, #0]
 80051bc:	e003      	b.n	80051c6 <_printf_i+0x76>
 80051be:	2a75      	cmp	r2, #117	; 0x75
 80051c0:	d021      	beq.n	8005206 <_printf_i+0xb6>
 80051c2:	2a78      	cmp	r2, #120	; 0x78
 80051c4:	d1dc      	bne.n	8005180 <_printf_i+0x30>
 80051c6:	2278      	movs	r2, #120	; 0x78
 80051c8:	496f      	ldr	r1, [pc, #444]	; (8005388 <_printf_i+0x238>)
 80051ca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80051ce:	e064      	b.n	800529a <_printf_i+0x14a>
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80051d6:	1d11      	adds	r1, r2, #4
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0a3      	b.n	800532c <_printf_i+0x1dc>
 80051e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80051e8:	f102 0104 	add.w	r1, r2, #4
 80051ec:	6019      	str	r1, [r3, #0]
 80051ee:	d0d7      	beq.n	80051a0 <_printf_i+0x50>
 80051f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xb0>
 80051f8:	222d      	movs	r2, #45	; 0x2d
 80051fa:	425b      	negs	r3, r3
 80051fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005200:	4962      	ldr	r1, [pc, #392]	; (800538c <_printf_i+0x23c>)
 8005202:	220a      	movs	r2, #10
 8005204:	e017      	b.n	8005236 <_printf_i+0xe6>
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800520e:	d003      	beq.n	8005218 <_printf_i+0xc8>
 8005210:	1d08      	adds	r0, r1, #4
 8005212:	6018      	str	r0, [r3, #0]
 8005214:	680b      	ldr	r3, [r1, #0]
 8005216:	e006      	b.n	8005226 <_printf_i+0xd6>
 8005218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521c:	f101 0004 	add.w	r0, r1, #4
 8005220:	6018      	str	r0, [r3, #0]
 8005222:	d0f7      	beq.n	8005214 <_printf_i+0xc4>
 8005224:	880b      	ldrh	r3, [r1, #0]
 8005226:	2a6f      	cmp	r2, #111	; 0x6f
 8005228:	bf14      	ite	ne
 800522a:	220a      	movne	r2, #10
 800522c:	2208      	moveq	r2, #8
 800522e:	4957      	ldr	r1, [pc, #348]	; (800538c <_printf_i+0x23c>)
 8005230:	2000      	movs	r0, #0
 8005232:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005236:	6865      	ldr	r5, [r4, #4]
 8005238:	2d00      	cmp	r5, #0
 800523a:	60a5      	str	r5, [r4, #8]
 800523c:	f2c0 809c 	blt.w	8005378 <_printf_i+0x228>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	f020 0004 	bic.w	r0, r0, #4
 8005246:	6020      	str	r0, [r4, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d13f      	bne.n	80052cc <_printf_i+0x17c>
 800524c:	2d00      	cmp	r5, #0
 800524e:	f040 8095 	bne.w	800537c <_printf_i+0x22c>
 8005252:	4675      	mov	r5, lr
 8005254:	2a08      	cmp	r2, #8
 8005256:	d10b      	bne.n	8005270 <_printf_i+0x120>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07da      	lsls	r2, r3, #31
 800525c:	d508      	bpl.n	8005270 <_printf_i+0x120>
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6862      	ldr	r2, [r4, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	bfde      	ittt	le
 8005266:	2330      	movle	r3, #48	; 0x30
 8005268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800526c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005270:	ebae 0305 	sub.w	r3, lr, r5
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	f8cd 8000 	str.w	r8, [sp]
 800527a:	463b      	mov	r3, r7
 800527c:	aa03      	add	r2, sp, #12
 800527e:	4621      	mov	r1, r4
 8005280:	4630      	mov	r0, r6
 8005282:	f7ff feed 	bl	8005060 <_printf_common>
 8005286:	3001      	adds	r0, #1
 8005288:	d155      	bne.n	8005336 <_printf_i+0x1e6>
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	b005      	add	sp, #20
 8005290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005294:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005298:	493c      	ldr	r1, [pc, #240]	; (800538c <_printf_i+0x23c>)
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80052a2:	f100 0504 	add.w	r5, r0, #4
 80052a6:	601d      	str	r5, [r3, #0]
 80052a8:	d001      	beq.n	80052ae <_printf_i+0x15e>
 80052aa:	6803      	ldr	r3, [r0, #0]
 80052ac:	e002      	b.n	80052b4 <_printf_i+0x164>
 80052ae:	0655      	lsls	r5, r2, #25
 80052b0:	d5fb      	bpl.n	80052aa <_printf_i+0x15a>
 80052b2:	8803      	ldrh	r3, [r0, #0]
 80052b4:	07d0      	lsls	r0, r2, #31
 80052b6:	bf44      	itt	mi
 80052b8:	f042 0220 	orrmi.w	r2, r2, #32
 80052bc:	6022      	strmi	r2, [r4, #0]
 80052be:	b91b      	cbnz	r3, 80052c8 <_printf_i+0x178>
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	f022 0220 	bic.w	r2, r2, #32
 80052c6:	6022      	str	r2, [r4, #0]
 80052c8:	2210      	movs	r2, #16
 80052ca:	e7b1      	b.n	8005230 <_printf_i+0xe0>
 80052cc:	4675      	mov	r5, lr
 80052ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80052d2:	fb02 3310 	mls	r3, r2, r0, r3
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052dc:	4603      	mov	r3, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d1f5      	bne.n	80052ce <_printf_i+0x17e>
 80052e2:	e7b7      	b.n	8005254 <_printf_i+0x104>
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80052ec:	6949      	ldr	r1, [r1, #20]
 80052ee:	d004      	beq.n	80052fa <_printf_i+0x1aa>
 80052f0:	1d10      	adds	r0, r2, #4
 80052f2:	6018      	str	r0, [r3, #0]
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	6019      	str	r1, [r3, #0]
 80052f8:	e007      	b.n	800530a <_printf_i+0x1ba>
 80052fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052fe:	f102 0004 	add.w	r0, r2, #4
 8005302:	6018      	str	r0, [r3, #0]
 8005304:	6813      	ldr	r3, [r2, #0]
 8005306:	d0f6      	beq.n	80052f6 <_printf_i+0x1a6>
 8005308:	8019      	strh	r1, [r3, #0]
 800530a:	2300      	movs	r3, #0
 800530c:	4675      	mov	r5, lr
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	e7b1      	b.n	8005276 <_printf_i+0x126>
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	1d11      	adds	r1, r2, #4
 8005316:	6019      	str	r1, [r3, #0]
 8005318:	6815      	ldr	r5, [r2, #0]
 800531a:	2100      	movs	r1, #0
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f836 	bl	8005390 <memchr>
 8005324:	b108      	cbz	r0, 800532a <_printf_i+0x1da>
 8005326:	1b40      	subs	r0, r0, r5
 8005328:	6060      	str	r0, [r4, #4]
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005334:	e79f      	b.n	8005276 <_printf_i+0x126>
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	462a      	mov	r2, r5
 800533a:	4639      	mov	r1, r7
 800533c:	4630      	mov	r0, r6
 800533e:	47c0      	blx	r8
 8005340:	3001      	adds	r0, #1
 8005342:	d0a2      	beq.n	800528a <_printf_i+0x13a>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	079b      	lsls	r3, r3, #30
 8005348:	d507      	bpl.n	800535a <_printf_i+0x20a>
 800534a:	2500      	movs	r5, #0
 800534c:	f104 0919 	add.w	r9, r4, #25
 8005350:	68e3      	ldr	r3, [r4, #12]
 8005352:	9a03      	ldr	r2, [sp, #12]
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	429d      	cmp	r5, r3
 8005358:	db05      	blt.n	8005366 <_printf_i+0x216>
 800535a:	68e0      	ldr	r0, [r4, #12]
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	4298      	cmp	r0, r3
 8005360:	bfb8      	it	lt
 8005362:	4618      	movlt	r0, r3
 8005364:	e793      	b.n	800528e <_printf_i+0x13e>
 8005366:	2301      	movs	r3, #1
 8005368:	464a      	mov	r2, r9
 800536a:	4639      	mov	r1, r7
 800536c:	4630      	mov	r0, r6
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d08a      	beq.n	800528a <_printf_i+0x13a>
 8005374:	3501      	adds	r5, #1
 8005376:	e7eb      	b.n	8005350 <_printf_i+0x200>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1a7      	bne.n	80052cc <_printf_i+0x17c>
 800537c:	780b      	ldrb	r3, [r1, #0]
 800537e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005382:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005386:	e765      	b.n	8005254 <_printf_i+0x104>
 8005388:	08006c88 	.word	0x08006c88
 800538c:	08006c77 	.word	0x08006c77

08005390 <memchr>:
 8005390:	b510      	push	{r4, lr}
 8005392:	b2c9      	uxtb	r1, r1
 8005394:	4402      	add	r2, r0
 8005396:	4290      	cmp	r0, r2
 8005398:	4603      	mov	r3, r0
 800539a:	d101      	bne.n	80053a0 <memchr+0x10>
 800539c:	2000      	movs	r0, #0
 800539e:	bd10      	pop	{r4, pc}
 80053a0:	781c      	ldrb	r4, [r3, #0]
 80053a2:	3001      	adds	r0, #1
 80053a4:	428c      	cmp	r4, r1
 80053a6:	d1f6      	bne.n	8005396 <memchr+0x6>
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd10      	pop	{r4, pc}

080053ac <memcpy>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	1e43      	subs	r3, r0, #1
 80053b0:	440a      	add	r2, r1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	d100      	bne.n	80053b8 <memcpy+0xc>
 80053b6:	bd10      	pop	{r4, pc}
 80053b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c0:	e7f7      	b.n	80053b2 <memcpy+0x6>

080053c2 <memmove>:
 80053c2:	4288      	cmp	r0, r1
 80053c4:	b510      	push	{r4, lr}
 80053c6:	eb01 0302 	add.w	r3, r1, r2
 80053ca:	d803      	bhi.n	80053d4 <memmove+0x12>
 80053cc:	1e42      	subs	r2, r0, #1
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d10c      	bne.n	80053ec <memmove+0x2a>
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	4298      	cmp	r0, r3
 80053d6:	d2f9      	bcs.n	80053cc <memmove+0xa>
 80053d8:	1881      	adds	r1, r0, r2
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	42d3      	cmn	r3, r2
 80053de:	d100      	bne.n	80053e2 <memmove+0x20>
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053ea:	e7f7      	b.n	80053dc <memmove+0x1a>
 80053ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053f4:	e7eb      	b.n	80053ce <memmove+0xc>
	...

080053f8 <_free_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d043      	beq.n	8005488 <_free_r+0x90>
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f0c      	subs	r4, r1, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	18e4      	addlt	r4, r4, r3
 800540c:	f000 f8d4 	bl	80055b8 <__malloc_lock>
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <_free_r+0x94>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	4610      	mov	r0, r2
 8005416:	b933      	cbnz	r3, 8005426 <_free_r+0x2e>
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	6014      	str	r4, [r2, #0]
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005422:	f000 b8ca 	b.w	80055ba <__malloc_unlock>
 8005426:	42a3      	cmp	r3, r4
 8005428:	d90b      	bls.n	8005442 <_free_r+0x4a>
 800542a:	6821      	ldr	r1, [r4, #0]
 800542c:	1862      	adds	r2, r4, r1
 800542e:	4293      	cmp	r3, r2
 8005430:	bf01      	itttt	eq
 8005432:	681a      	ldreq	r2, [r3, #0]
 8005434:	685b      	ldreq	r3, [r3, #4]
 8005436:	1852      	addeq	r2, r2, r1
 8005438:	6022      	streq	r2, [r4, #0]
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6004      	str	r4, [r0, #0]
 800543e:	e7ed      	b.n	800541c <_free_r+0x24>
 8005440:	4613      	mov	r3, r2
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	b10a      	cbz	r2, 800544a <_free_r+0x52>
 8005446:	42a2      	cmp	r2, r4
 8005448:	d9fa      	bls.n	8005440 <_free_r+0x48>
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	1858      	adds	r0, r3, r1
 800544e:	42a0      	cmp	r0, r4
 8005450:	d10b      	bne.n	800546a <_free_r+0x72>
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	4401      	add	r1, r0
 8005456:	1858      	adds	r0, r3, r1
 8005458:	4282      	cmp	r2, r0
 800545a:	6019      	str	r1, [r3, #0]
 800545c:	d1de      	bne.n	800541c <_free_r+0x24>
 800545e:	6810      	ldr	r0, [r2, #0]
 8005460:	6852      	ldr	r2, [r2, #4]
 8005462:	4401      	add	r1, r0
 8005464:	6019      	str	r1, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	e7d8      	b.n	800541c <_free_r+0x24>
 800546a:	d902      	bls.n	8005472 <_free_r+0x7a>
 800546c:	230c      	movs	r3, #12
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	e7d4      	b.n	800541c <_free_r+0x24>
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1821      	adds	r1, r4, r0
 8005476:	428a      	cmp	r2, r1
 8005478:	bf01      	itttt	eq
 800547a:	6811      	ldreq	r1, [r2, #0]
 800547c:	6852      	ldreq	r2, [r2, #4]
 800547e:	1809      	addeq	r1, r1, r0
 8005480:	6021      	streq	r1, [r4, #0]
 8005482:	6062      	str	r2, [r4, #4]
 8005484:	605c      	str	r4, [r3, #4]
 8005486:	e7c9      	b.n	800541c <_free_r+0x24>
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	20000194 	.word	0x20000194

08005490 <_malloc_r>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	1ccd      	adds	r5, r1, #3
 8005494:	f025 0503 	bic.w	r5, r5, #3
 8005498:	3508      	adds	r5, #8
 800549a:	2d0c      	cmp	r5, #12
 800549c:	bf38      	it	cc
 800549e:	250c      	movcc	r5, #12
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	4606      	mov	r6, r0
 80054a4:	db01      	blt.n	80054aa <_malloc_r+0x1a>
 80054a6:	42a9      	cmp	r1, r5
 80054a8:	d903      	bls.n	80054b2 <_malloc_r+0x22>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	2000      	movs	r0, #0
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	f000 f881 	bl	80055b8 <__malloc_lock>
 80054b6:	4a23      	ldr	r2, [pc, #140]	; (8005544 <_malloc_r+0xb4>)
 80054b8:	6814      	ldr	r4, [r2, #0]
 80054ba:	4621      	mov	r1, r4
 80054bc:	b991      	cbnz	r1, 80054e4 <_malloc_r+0x54>
 80054be:	4c22      	ldr	r4, [pc, #136]	; (8005548 <_malloc_r+0xb8>)
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	b91b      	cbnz	r3, 80054cc <_malloc_r+0x3c>
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f867 	bl	8005598 <_sbrk_r>
 80054ca:	6020      	str	r0, [r4, #0]
 80054cc:	4629      	mov	r1, r5
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f862 	bl	8005598 <_sbrk_r>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d126      	bne.n	8005526 <_malloc_r+0x96>
 80054d8:	230c      	movs	r3, #12
 80054da:	4630      	mov	r0, r6
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	f000 f86c 	bl	80055ba <__malloc_unlock>
 80054e2:	e7e4      	b.n	80054ae <_malloc_r+0x1e>
 80054e4:	680b      	ldr	r3, [r1, #0]
 80054e6:	1b5b      	subs	r3, r3, r5
 80054e8:	d41a      	bmi.n	8005520 <_malloc_r+0x90>
 80054ea:	2b0b      	cmp	r3, #11
 80054ec:	d90f      	bls.n	800550e <_malloc_r+0x7e>
 80054ee:	600b      	str	r3, [r1, #0]
 80054f0:	18cc      	adds	r4, r1, r3
 80054f2:	50cd      	str	r5, [r1, r3]
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 f860 	bl	80055ba <__malloc_unlock>
 80054fa:	f104 000b 	add.w	r0, r4, #11
 80054fe:	1d23      	adds	r3, r4, #4
 8005500:	f020 0007 	bic.w	r0, r0, #7
 8005504:	1ac3      	subs	r3, r0, r3
 8005506:	d01b      	beq.n	8005540 <_malloc_r+0xb0>
 8005508:	425a      	negs	r2, r3
 800550a:	50e2      	str	r2, [r4, r3]
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	428c      	cmp	r4, r1
 8005510:	bf0b      	itete	eq
 8005512:	6863      	ldreq	r3, [r4, #4]
 8005514:	684b      	ldrne	r3, [r1, #4]
 8005516:	6013      	streq	r3, [r2, #0]
 8005518:	6063      	strne	r3, [r4, #4]
 800551a:	bf18      	it	ne
 800551c:	460c      	movne	r4, r1
 800551e:	e7e9      	b.n	80054f4 <_malloc_r+0x64>
 8005520:	460c      	mov	r4, r1
 8005522:	6849      	ldr	r1, [r1, #4]
 8005524:	e7ca      	b.n	80054bc <_malloc_r+0x2c>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d005      	beq.n	800553c <_malloc_r+0xac>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4630      	mov	r0, r6
 8005534:	f000 f830 	bl	8005598 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d0cd      	beq.n	80054d8 <_malloc_r+0x48>
 800553c:	6025      	str	r5, [r4, #0]
 800553e:	e7d9      	b.n	80054f4 <_malloc_r+0x64>
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	bf00      	nop
 8005544:	20000194 	.word	0x20000194
 8005548:	20000198 	.word	0x20000198

0800554c <_realloc_r>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	4607      	mov	r7, r0
 8005550:	4614      	mov	r4, r2
 8005552:	460e      	mov	r6, r1
 8005554:	b921      	cbnz	r1, 8005560 <_realloc_r+0x14>
 8005556:	4611      	mov	r1, r2
 8005558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800555c:	f7ff bf98 	b.w	8005490 <_malloc_r>
 8005560:	b922      	cbnz	r2, 800556c <_realloc_r+0x20>
 8005562:	f7ff ff49 	bl	80053f8 <_free_r>
 8005566:	4625      	mov	r5, r4
 8005568:	4628      	mov	r0, r5
 800556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800556c:	f000 f826 	bl	80055bc <_malloc_usable_size_r>
 8005570:	4284      	cmp	r4, r0
 8005572:	d90f      	bls.n	8005594 <_realloc_r+0x48>
 8005574:	4621      	mov	r1, r4
 8005576:	4638      	mov	r0, r7
 8005578:	f7ff ff8a 	bl	8005490 <_malloc_r>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d0f2      	beq.n	8005568 <_realloc_r+0x1c>
 8005582:	4631      	mov	r1, r6
 8005584:	4622      	mov	r2, r4
 8005586:	f7ff ff11 	bl	80053ac <memcpy>
 800558a:	4631      	mov	r1, r6
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ff33 	bl	80053f8 <_free_r>
 8005592:	e7e9      	b.n	8005568 <_realloc_r+0x1c>
 8005594:	4635      	mov	r5, r6
 8005596:	e7e7      	b.n	8005568 <_realloc_r+0x1c>

08005598 <_sbrk_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	2300      	movs	r3, #0
 800559c:	4c05      	ldr	r4, [pc, #20]	; (80055b4 <_sbrk_r+0x1c>)
 800559e:	4605      	mov	r5, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	f001 faf0 	bl	8006b88 <_sbrk>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_sbrk_r+0x1a>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_sbrk_r+0x1a>
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200003f8 	.word	0x200003f8

080055b8 <__malloc_lock>:
 80055b8:	4770      	bx	lr

080055ba <__malloc_unlock>:
 80055ba:	4770      	bx	lr

080055bc <_malloc_usable_size_r>:
 80055bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f1a0 0004 	sub.w	r0, r0, #4
 80055c6:	bfbc      	itt	lt
 80055c8:	580b      	ldrlt	r3, [r1, r0]
 80055ca:	18c0      	addlt	r0, r0, r3
 80055cc:	4770      	bx	lr
	...

080055d0 <atan>:
 80055d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	4bba      	ldr	r3, [pc, #744]	; (80058c0 <atan+0x2f0>)
 80055d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80055da:	429e      	cmp	r6, r3
 80055dc:	4604      	mov	r4, r0
 80055de:	460d      	mov	r5, r1
 80055e0:	468b      	mov	fp, r1
 80055e2:	dd17      	ble.n	8005614 <atan+0x44>
 80055e4:	4ab7      	ldr	r2, [pc, #732]	; (80058c4 <atan+0x2f4>)
 80055e6:	4296      	cmp	r6, r2
 80055e8:	dc01      	bgt.n	80055ee <atan+0x1e>
 80055ea:	d109      	bne.n	8005600 <atan+0x30>
 80055ec:	b140      	cbz	r0, 8005600 <atan+0x30>
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	4620      	mov	r0, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	f7fa fdb1 	bl	800015c <__adddf3>
 80055fa:	4604      	mov	r4, r0
 80055fc:	460d      	mov	r5, r1
 80055fe:	e005      	b.n	800560c <atan+0x3c>
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	4cb0      	ldr	r4, [pc, #704]	; (80058c8 <atan+0x2f8>)
 8005606:	f300 8129 	bgt.w	800585c <atan+0x28c>
 800560a:	4db0      	ldr	r5, [pc, #704]	; (80058cc <atan+0x2fc>)
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005614:	4bae      	ldr	r3, [pc, #696]	; (80058d0 <atan+0x300>)
 8005616:	429e      	cmp	r6, r3
 8005618:	dc11      	bgt.n	800563e <atan+0x6e>
 800561a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800561e:	429e      	cmp	r6, r3
 8005620:	dc0a      	bgt.n	8005638 <atan+0x68>
 8005622:	a38f      	add	r3, pc, #572	; (adr r3, 8005860 <atan+0x290>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa fd98 	bl	800015c <__adddf3>
 800562c:	2200      	movs	r2, #0
 800562e:	4ba9      	ldr	r3, [pc, #676]	; (80058d4 <atan+0x304>)
 8005630:	f7fb f9d6 	bl	80009e0 <__aeabi_dcmpgt>
 8005634:	2800      	cmp	r0, #0
 8005636:	d1e9      	bne.n	800560c <atan+0x3c>
 8005638:	f04f 3aff 	mov.w	sl, #4294967295
 800563c:	e027      	b.n	800568e <atan+0xbe>
 800563e:	f000 f959 	bl	80058f4 <fabs>
 8005642:	4ba5      	ldr	r3, [pc, #660]	; (80058d8 <atan+0x308>)
 8005644:	4604      	mov	r4, r0
 8005646:	429e      	cmp	r6, r3
 8005648:	460d      	mov	r5, r1
 800564a:	f300 80b8 	bgt.w	80057be <atan+0x1ee>
 800564e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005652:	429e      	cmp	r6, r3
 8005654:	f300 809c 	bgt.w	8005790 <atan+0x1c0>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	f7fa fd7e 	bl	800015c <__adddf3>
 8005660:	2200      	movs	r2, #0
 8005662:	4b9c      	ldr	r3, [pc, #624]	; (80058d4 <atan+0x304>)
 8005664:	f7fa fd78 	bl	8000158 <__aeabi_dsub>
 8005668:	2200      	movs	r2, #0
 800566a:	4606      	mov	r6, r0
 800566c:	460f      	mov	r7, r1
 800566e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f7fa fd71 	bl	800015c <__adddf3>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4630      	mov	r0, r6
 8005680:	4639      	mov	r1, r7
 8005682:	f7fb f847 	bl	8000714 <__aeabi_ddiv>
 8005686:	f04f 0a00 	mov.w	sl, #0
 800568a:	4604      	mov	r4, r0
 800568c:	460d      	mov	r5, r1
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	4620      	mov	r0, r4
 8005694:	4629      	mov	r1, r5
 8005696:	f7fa ff13 	bl	80004c0 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4680      	mov	r8, r0
 80056a0:	4689      	mov	r9, r1
 80056a2:	f7fa ff0d 	bl	80004c0 <__aeabi_dmul>
 80056a6:	a370      	add	r3, pc, #448	; (adr r3, 8005868 <atan+0x298>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	4606      	mov	r6, r0
 80056ae:	460f      	mov	r7, r1
 80056b0:	f7fa ff06 	bl	80004c0 <__aeabi_dmul>
 80056b4:	a36e      	add	r3, pc, #440	; (adr r3, 8005870 <atan+0x2a0>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fd4f 	bl	800015c <__adddf3>
 80056be:	4632      	mov	r2, r6
 80056c0:	463b      	mov	r3, r7
 80056c2:	f7fa fefd 	bl	80004c0 <__aeabi_dmul>
 80056c6:	a36c      	add	r3, pc, #432	; (adr r3, 8005878 <atan+0x2a8>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fd46 	bl	800015c <__adddf3>
 80056d0:	4632      	mov	r2, r6
 80056d2:	463b      	mov	r3, r7
 80056d4:	f7fa fef4 	bl	80004c0 <__aeabi_dmul>
 80056d8:	a369      	add	r3, pc, #420	; (adr r3, 8005880 <atan+0x2b0>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fa fd3d 	bl	800015c <__adddf3>
 80056e2:	4632      	mov	r2, r6
 80056e4:	463b      	mov	r3, r7
 80056e6:	f7fa feeb 	bl	80004c0 <__aeabi_dmul>
 80056ea:	a367      	add	r3, pc, #412	; (adr r3, 8005888 <atan+0x2b8>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa fd34 	bl	800015c <__adddf3>
 80056f4:	4632      	mov	r2, r6
 80056f6:	463b      	mov	r3, r7
 80056f8:	f7fa fee2 	bl	80004c0 <__aeabi_dmul>
 80056fc:	a364      	add	r3, pc, #400	; (adr r3, 8005890 <atan+0x2c0>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f7fa fd2b 	bl	800015c <__adddf3>
 8005706:	4642      	mov	r2, r8
 8005708:	464b      	mov	r3, r9
 800570a:	f7fa fed9 	bl	80004c0 <__aeabi_dmul>
 800570e:	a362      	add	r3, pc, #392	; (adr r3, 8005898 <atan+0x2c8>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	4680      	mov	r8, r0
 8005716:	4689      	mov	r9, r1
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa fed0 	bl	80004c0 <__aeabi_dmul>
 8005720:	a35f      	add	r3, pc, #380	; (adr r3, 80058a0 <atan+0x2d0>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa fd17 	bl	8000158 <__aeabi_dsub>
 800572a:	4632      	mov	r2, r6
 800572c:	463b      	mov	r3, r7
 800572e:	f7fa fec7 	bl	80004c0 <__aeabi_dmul>
 8005732:	a35d      	add	r3, pc, #372	; (adr r3, 80058a8 <atan+0x2d8>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fd0e 	bl	8000158 <__aeabi_dsub>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	f7fa febe 	bl	80004c0 <__aeabi_dmul>
 8005744:	a35a      	add	r3, pc, #360	; (adr r3, 80058b0 <atan+0x2e0>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fd05 	bl	8000158 <__aeabi_dsub>
 800574e:	4632      	mov	r2, r6
 8005750:	463b      	mov	r3, r7
 8005752:	f7fa feb5 	bl	80004c0 <__aeabi_dmul>
 8005756:	a358      	add	r3, pc, #352	; (adr r3, 80058b8 <atan+0x2e8>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa fcfc 	bl	8000158 <__aeabi_dsub>
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	f7fa feac 	bl	80004c0 <__aeabi_dmul>
 8005768:	f1ba 3fff 	cmp.w	sl, #4294967295
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	d14e      	bne.n	8005810 <atan+0x240>
 8005772:	4640      	mov	r0, r8
 8005774:	4649      	mov	r1, r9
 8005776:	f7fa fcf1 	bl	800015c <__adddf3>
 800577a:	4622      	mov	r2, r4
 800577c:	462b      	mov	r3, r5
 800577e:	f7fa fe9f 	bl	80004c0 <__aeabi_dmul>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4620      	mov	r0, r4
 8005788:	4629      	mov	r1, r5
 800578a:	f7fa fce5 	bl	8000158 <__aeabi_dsub>
 800578e:	e734      	b.n	80055fa <atan+0x2a>
 8005790:	2200      	movs	r2, #0
 8005792:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <atan+0x304>)
 8005794:	f7fa fce0 	bl	8000158 <__aeabi_dsub>
 8005798:	2200      	movs	r2, #0
 800579a:	4606      	mov	r6, r0
 800579c:	460f      	mov	r7, r1
 800579e:	4b4d      	ldr	r3, [pc, #308]	; (80058d4 <atan+0x304>)
 80057a0:	4620      	mov	r0, r4
 80057a2:	4629      	mov	r1, r5
 80057a4:	f7fa fcda 	bl	800015c <__adddf3>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7fa ffb0 	bl	8000714 <__aeabi_ddiv>
 80057b4:	f04f 0a01 	mov.w	sl, #1
 80057b8:	4604      	mov	r4, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	e767      	b.n	800568e <atan+0xbe>
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <atan+0x30c>)
 80057c0:	429e      	cmp	r6, r3
 80057c2:	dc1a      	bgt.n	80057fa <atan+0x22a>
 80057c4:	2200      	movs	r2, #0
 80057c6:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <atan+0x310>)
 80057c8:	f7fa fcc6 	bl	8000158 <__aeabi_dsub>
 80057cc:	2200      	movs	r2, #0
 80057ce:	4606      	mov	r6, r0
 80057d0:	460f      	mov	r7, r1
 80057d2:	4b43      	ldr	r3, [pc, #268]	; (80058e0 <atan+0x310>)
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fa fe72 	bl	80004c0 <__aeabi_dmul>
 80057dc:	2200      	movs	r2, #0
 80057de:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <atan+0x304>)
 80057e0:	f7fa fcbc 	bl	800015c <__adddf3>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fa ff92 	bl	8000714 <__aeabi_ddiv>
 80057f0:	f04f 0a02 	mov.w	sl, #2
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	e749      	b.n	800568e <atan+0xbe>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	2000      	movs	r0, #0
 8005800:	4938      	ldr	r1, [pc, #224]	; (80058e4 <atan+0x314>)
 8005802:	f7fa ff87 	bl	8000714 <__aeabi_ddiv>
 8005806:	f04f 0a03 	mov.w	sl, #3
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
 800580e:	e73e      	b.n	800568e <atan+0xbe>
 8005810:	4640      	mov	r0, r8
 8005812:	4649      	mov	r1, r9
 8005814:	f7fa fca2 	bl	800015c <__adddf3>
 8005818:	4622      	mov	r2, r4
 800581a:	462b      	mov	r3, r5
 800581c:	f7fa fe50 	bl	80004c0 <__aeabi_dmul>
 8005820:	4e31      	ldr	r6, [pc, #196]	; (80058e8 <atan+0x318>)
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <atan+0x31c>)
 8005824:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005828:	4456      	add	r6, sl
 800582a:	449a      	add	sl, r3
 800582c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005830:	f7fa fc92 	bl	8000158 <__aeabi_dsub>
 8005834:	4622      	mov	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f7fa fc8e 	bl	8000158 <__aeabi_dsub>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005844:	f7fa fc88 	bl	8000158 <__aeabi_dsub>
 8005848:	f1bb 0f00 	cmp.w	fp, #0
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	f6bf aedc 	bge.w	800560c <atan+0x3c>
 8005854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005858:	461d      	mov	r5, r3
 800585a:	e6d7      	b.n	800560c <atan+0x3c>
 800585c:	4d24      	ldr	r5, [pc, #144]	; (80058f0 <atan+0x320>)
 800585e:	e6d5      	b.n	800560c <atan+0x3c>
 8005860:	8800759c 	.word	0x8800759c
 8005864:	7e37e43c 	.word	0x7e37e43c
 8005868:	e322da11 	.word	0xe322da11
 800586c:	3f90ad3a 	.word	0x3f90ad3a
 8005870:	24760deb 	.word	0x24760deb
 8005874:	3fa97b4b 	.word	0x3fa97b4b
 8005878:	a0d03d51 	.word	0xa0d03d51
 800587c:	3fb10d66 	.word	0x3fb10d66
 8005880:	c54c206e 	.word	0xc54c206e
 8005884:	3fb745cd 	.word	0x3fb745cd
 8005888:	920083ff 	.word	0x920083ff
 800588c:	3fc24924 	.word	0x3fc24924
 8005890:	5555550d 	.word	0x5555550d
 8005894:	3fd55555 	.word	0x3fd55555
 8005898:	2c6a6c2f 	.word	0x2c6a6c2f
 800589c:	bfa2b444 	.word	0xbfa2b444
 80058a0:	52defd9a 	.word	0x52defd9a
 80058a4:	3fadde2d 	.word	0x3fadde2d
 80058a8:	af749a6d 	.word	0xaf749a6d
 80058ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80058b0:	fe231671 	.word	0xfe231671
 80058b4:	3fbc71c6 	.word	0x3fbc71c6
 80058b8:	9998ebc4 	.word	0x9998ebc4
 80058bc:	3fc99999 	.word	0x3fc99999
 80058c0:	440fffff 	.word	0x440fffff
 80058c4:	7ff00000 	.word	0x7ff00000
 80058c8:	54442d18 	.word	0x54442d18
 80058cc:	bff921fb 	.word	0xbff921fb
 80058d0:	3fdbffff 	.word	0x3fdbffff
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	3ff2ffff 	.word	0x3ff2ffff
 80058dc:	40037fff 	.word	0x40037fff
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	bff00000 	.word	0xbff00000
 80058e8:	08006ca0 	.word	0x08006ca0
 80058ec:	08006cc0 	.word	0x08006cc0
 80058f0:	3ff921fb 	.word	0x3ff921fb

080058f4 <fabs>:
 80058f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80058f8:	4770      	bx	lr

080058fa <atan2>:
 80058fa:	f000 b9b9 	b.w	8005c70 <__ieee754_atan2>
	...

08005900 <pow>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	b08f      	sub	sp, #60	; 0x3c
 8005906:	461d      	mov	r5, r3
 8005908:	4680      	mov	r8, r0
 800590a:	4689      	mov	r9, r1
 800590c:	4614      	mov	r4, r2
 800590e:	f000 fa8b 	bl	8005e28 <__ieee754_pow>
 8005912:	4fa5      	ldr	r7, [pc, #660]	; (8005ba8 <pow+0x2a8>)
 8005914:	e9cd 0100 	strd	r0, r1, [sp]
 8005918:	f997 3000 	ldrsb.w	r3, [r7]
 800591c:	463e      	mov	r6, r7
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	3301      	adds	r3, #1
 8005922:	d05f      	beq.n	80059e4 <pow+0xe4>
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	4620      	mov	r0, r4
 800592a:	4629      	mov	r1, r5
 800592c:	f7fb f862 	bl	80009f4 <__aeabi_dcmpun>
 8005930:	4682      	mov	sl, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d156      	bne.n	80059e4 <pow+0xe4>
 8005936:	4642      	mov	r2, r8
 8005938:	464b      	mov	r3, r9
 800593a:	4640      	mov	r0, r8
 800593c:	4649      	mov	r1, r9
 800593e:	f7fb f859 	bl	80009f4 <__aeabi_dcmpun>
 8005942:	9003      	str	r0, [sp, #12]
 8005944:	b1e8      	cbz	r0, 8005982 <pow+0x82>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fb f81f 	bl	8000990 <__aeabi_dcmpeq>
 8005952:	2800      	cmp	r0, #0
 8005954:	d046      	beq.n	80059e4 <pow+0xe4>
 8005956:	2301      	movs	r3, #1
 8005958:	2200      	movs	r2, #0
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	4b93      	ldr	r3, [pc, #588]	; (8005bac <pow+0x2ac>)
 800595e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4b92      	ldr	r3, [pc, #584]	; (8005bb0 <pow+0x2b0>)
 8005966:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800596a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800596e:	9b02      	ldr	r3, [sp, #8]
 8005970:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d031      	beq.n	80059dc <pow+0xdc>
 8005978:	a804      	add	r0, sp, #16
 800597a:	f000 fff9 	bl	8006970 <matherr>
 800597e:	bb38      	cbnz	r0, 80059d0 <pow+0xd0>
 8005980:	e058      	b.n	8005a34 <pow+0x134>
 8005982:	f04f 0a00 	mov.w	sl, #0
 8005986:	f04f 0b00 	mov.w	fp, #0
 800598a:	4652      	mov	r2, sl
 800598c:	465b      	mov	r3, fp
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fffd 	bl	8000990 <__aeabi_dcmpeq>
 8005996:	2800      	cmp	r0, #0
 8005998:	d051      	beq.n	8005a3e <pow+0x13e>
 800599a:	4652      	mov	r2, sl
 800599c:	465b      	mov	r3, fp
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fff5 	bl	8000990 <__aeabi_dcmpeq>
 80059a6:	4606      	mov	r6, r0
 80059a8:	b308      	cbz	r0, 80059ee <pow+0xee>
 80059aa:	2301      	movs	r3, #1
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	4b7f      	ldr	r3, [pc, #508]	; (8005bac <pow+0x2ac>)
 80059b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80059bc:	930c      	str	r3, [sp, #48]	; 0x30
 80059be:	9b02      	ldr	r3, [sp, #8]
 80059c0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0d7      	beq.n	8005978 <pow+0x78>
 80059c8:	2200      	movs	r2, #0
 80059ca:	4b79      	ldr	r3, [pc, #484]	; (8005bb0 <pow+0x2b0>)
 80059cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d2:	b11b      	cbz	r3, 80059dc <pow+0xdc>
 80059d4:	f001 f8d2 	bl	8006b7c <__errno>
 80059d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059da:	6003      	str	r3, [r0, #0]
 80059dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80059e0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80059e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e8:	b00f      	add	sp, #60	; 0x3c
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f000 ffb7 	bl	8006964 <finite>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d0f4      	beq.n	80059e4 <pow+0xe4>
 80059fa:	4652      	mov	r2, sl
 80059fc:	465b      	mov	r3, fp
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7fa ffcf 	bl	80009a4 <__aeabi_dcmplt>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d0ec      	beq.n	80059e4 <pow+0xe4>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	4b67      	ldr	r3, [pc, #412]	; (8005bac <pow+0x2ac>)
 8005a10:	960c      	str	r6, [sp, #48]	; 0x30
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f997 3000 	ldrsb.w	r3, [r7]
 8005a18:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005a1c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a20:	b913      	cbnz	r3, 8005a28 <pow+0x128>
 8005a22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005a26:	e7a7      	b.n	8005978 <pow+0x78>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	4962      	ldr	r1, [pc, #392]	; (8005bb4 <pow+0x2b4>)
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a32:	d1a1      	bne.n	8005978 <pow+0x78>
 8005a34:	f001 f8a2 	bl	8006b7c <__errno>
 8005a38:	2321      	movs	r3, #33	; 0x21
 8005a3a:	6003      	str	r3, [r0, #0]
 8005a3c:	e7c8      	b.n	80059d0 <pow+0xd0>
 8005a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a42:	f000 ff8f 	bl	8006964 <finite>
 8005a46:	9002      	str	r0, [sp, #8]
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d17f      	bne.n	8005b4c <pow+0x24c>
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4649      	mov	r1, r9
 8005a50:	f000 ff88 	bl	8006964 <finite>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d079      	beq.n	8005b4c <pow+0x24c>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f000 ff82 	bl	8006964 <finite>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d073      	beq.n	8005b4c <pow+0x24c>
 8005a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fa ffc2 	bl	80009f4 <__aeabi_dcmpun>
 8005a70:	f997 7000 	ldrsb.w	r7, [r7]
 8005a74:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <pow+0x2ac>)
 8005a76:	b1a0      	cbz	r0, 8005aa2 <pow+0x1a2>
 8005a78:	2201      	movs	r2, #1
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	9b02      	ldr	r3, [sp, #8]
 8005a7e:	9204      	str	r2, [sp, #16]
 8005a80:	930c      	str	r3, [sp, #48]	; 0x30
 8005a82:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005a86:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	d0c9      	beq.n	8005a22 <pow+0x122>
 8005a8e:	4652      	mov	r2, sl
 8005a90:	465b      	mov	r3, fp
 8005a92:	4650      	mov	r0, sl
 8005a94:	4659      	mov	r1, fp
 8005a96:	f7fa fe3d 	bl	8000714 <__aeabi_ddiv>
 8005a9a:	2f02      	cmp	r7, #2
 8005a9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005aa0:	e7c7      	b.n	8005a32 <pow+0x132>
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	9204      	str	r2, [sp, #16]
 8005aa8:	900c      	str	r0, [sp, #48]	; 0x30
 8005aaa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005aae:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005ab2:	bb57      	cbnz	r7, 8005b0a <pow+0x20a>
 8005ab4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005ab8:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <pow+0x2b8>)
 8005aba:	4640      	mov	r0, r8
 8005abc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	f7fa ff6d 	bl	80009a4 <__aeabi_dcmplt>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d064      	beq.n	8005b98 <pow+0x298>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <pow+0x2bc>)
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fcf3 	bl	80004c0 <__aeabi_dmul>
 8005ada:	4604      	mov	r4, r0
 8005adc:	460d      	mov	r5, r1
 8005ade:	f000 ff4f 	bl	8006980 <rint>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa ff51 	bl	8000990 <__aeabi_dcmpeq>
 8005aee:	b920      	cbnz	r0, 8005afa <pow+0x1fa>
 8005af0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005af4:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <pow+0x2c0>)
 8005af6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005afa:	f996 3000 	ldrsb.w	r3, [r6]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d14a      	bne.n	8005b98 <pow+0x298>
 8005b02:	f001 f83b 	bl	8006b7c <__errno>
 8005b06:	2322      	movs	r3, #34	; 0x22
 8005b08:	e797      	b.n	8005a3a <pow+0x13a>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <pow+0x2c4>)
 8005b0e:	4640      	mov	r0, r8
 8005b10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b14:	4649      	mov	r1, r9
 8005b16:	4652      	mov	r2, sl
 8005b18:	465b      	mov	r3, fp
 8005b1a:	f7fa ff43 	bl	80009a4 <__aeabi_dcmplt>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0eb      	beq.n	8005afa <pow+0x1fa>
 8005b22:	2200      	movs	r2, #0
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <pow+0x2bc>)
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa fcc9 	bl	80004c0 <__aeabi_dmul>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	460d      	mov	r5, r1
 8005b32:	f000 ff25 	bl	8006980 <rint>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa ff27 	bl	8000990 <__aeabi_dcmpeq>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d1d9      	bne.n	8005afa <pow+0x1fa>
 8005b46:	2200      	movs	r2, #0
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <pow+0x2b4>)
 8005b4a:	e7d4      	b.n	8005af6 <pow+0x1f6>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b52:	2300      	movs	r3, #0
 8005b54:	f7fa ff1c 	bl	8000990 <__aeabi_dcmpeq>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f43f af43 	beq.w	80059e4 <pow+0xe4>
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f000 feff 	bl	8006964 <finite>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f43f af3c 	beq.w	80059e4 <pow+0xe4>
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f000 fef8 	bl	8006964 <finite>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f43f af35 	beq.w	80059e4 <pow+0xe4>
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <pow+0x2ac>)
 8005b80:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b84:	9305      	str	r3, [sp, #20]
 8005b86:	2300      	movs	r3, #0
 8005b88:	2400      	movs	r4, #0
 8005b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b92:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005b96:	e7b0      	b.n	8005afa <pow+0x1fa>
 8005b98:	a804      	add	r0, sp, #16
 8005b9a:	f000 fee9 	bl	8006970 <matherr>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f47f af16 	bne.w	80059d0 <pow+0xd0>
 8005ba4:	e7ad      	b.n	8005b02 <pow+0x202>
 8005ba6:	bf00      	nop
 8005ba8:	20000108 	.word	0x20000108
 8005bac:	08006ce0 	.word	0x08006ce0
 8005bb0:	3ff00000 	.word	0x3ff00000
 8005bb4:	fff00000 	.word	0xfff00000
 8005bb8:	47efffff 	.word	0x47efffff
 8005bbc:	3fe00000 	.word	0x3fe00000
 8005bc0:	c7efffff 	.word	0xc7efffff
 8005bc4:	7ff00000 	.word	0x7ff00000

08005bc8 <sqrt>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	b08b      	sub	sp, #44	; 0x2c
 8005bce:	4604      	mov	r4, r0
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	f000 fe1b 	bl	800680c <__ieee754_sqrt>
 8005bd6:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <sqrt+0xa0>)
 8005bd8:	4680      	mov	r8, r0
 8005bda:	f993 a000 	ldrsb.w	sl, [r3]
 8005bde:	4689      	mov	r9, r1
 8005be0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005be4:	d02b      	beq.n	8005c3e <sqrt+0x76>
 8005be6:	4622      	mov	r2, r4
 8005be8:	462b      	mov	r3, r5
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa ff01 	bl	80009f4 <__aeabi_dcmpun>
 8005bf2:	4683      	mov	fp, r0
 8005bf4:	bb18      	cbnz	r0, 8005c3e <sqrt+0x76>
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fecf 	bl	80009a4 <__aeabi_dcmplt>
 8005c06:	b1d0      	cbz	r0, 8005c3e <sqrt+0x76>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <sqrt+0xa4>)
 8005c0e:	f8cd b020 	str.w	fp, [sp, #32]
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005c18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c1c:	f1ba 0f00 	cmp.w	sl, #0
 8005c20:	d112      	bne.n	8005c48 <sqrt+0x80>
 8005c22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005c26:	4668      	mov	r0, sp
 8005c28:	f000 fea2 	bl	8006970 <matherr>
 8005c2c:	b1b8      	cbz	r0, 8005c5e <sqrt+0x96>
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	b11b      	cbz	r3, 8005c3a <sqrt+0x72>
 8005c32:	f000 ffa3 	bl	8006b7c <__errno>
 8005c36:	9b08      	ldr	r3, [sp, #32]
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	b00b      	add	sp, #44	; 0x2c
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa fd60 	bl	8000714 <__aeabi_ddiv>
 8005c54:	f1ba 0f02 	cmp.w	sl, #2
 8005c58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c5c:	d1e3      	bne.n	8005c26 <sqrt+0x5e>
 8005c5e:	f000 ff8d 	bl	8006b7c <__errno>
 8005c62:	2321      	movs	r3, #33	; 0x21
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	e7e2      	b.n	8005c2e <sqrt+0x66>
 8005c68:	20000108 	.word	0x20000108
 8005c6c:	08006ce4 	.word	0x08006ce4

08005c70 <__ieee754_atan2>:
 8005c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	4256      	negs	r6, r2
 8005c76:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005c7a:	4316      	orrs	r6, r2
 8005c7c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8005e20 <__ieee754_atan2+0x1b0>
 8005c80:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 8005c84:	454e      	cmp	r6, r9
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4688      	mov	r8, r1
 8005c8c:	d807      	bhi.n	8005c9e <__ieee754_atan2+0x2e>
 8005c8e:	4246      	negs	r6, r0
 8005c90:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005c94:	4306      	orrs	r6, r0
 8005c96:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8005c9a:	454e      	cmp	r6, r9
 8005c9c:	d906      	bls.n	8005cac <__ieee754_atan2+0x3c>
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa fa5b 	bl	800015c <__adddf3>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	e015      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005cac:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8005cb0:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005cb4:	4316      	orrs	r6, r2
 8005cb6:	d103      	bne.n	8005cc0 <__ieee754_atan2+0x50>
 8005cb8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	f7ff bc88 	b.w	80055d0 <atan>
 8005cc0:	179e      	asrs	r6, r3, #30
 8005cc2:	f006 0602 	and.w	r6, r6, #2
 8005cc6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005cca:	ea50 0107 	orrs.w	r1, r0, r7
 8005cce:	d107      	bne.n	8005ce0 <__ieee754_atan2+0x70>
 8005cd0:	2e02      	cmp	r6, #2
 8005cd2:	d030      	beq.n	8005d36 <__ieee754_atan2+0xc6>
 8005cd4:	2e03      	cmp	r6, #3
 8005cd6:	d032      	beq.n	8005d3e <__ieee754_atan2+0xce>
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	ea52 010e 	orrs.w	r1, r2, lr
 8005ce4:	d106      	bne.n	8005cf4 <__ieee754_atan2+0x84>
 8005ce6:	f1b8 0f00 	cmp.w	r8, #0
 8005cea:	da71      	bge.n	8005dd0 <__ieee754_atan2+0x160>
 8005cec:	a53a      	add	r5, pc, #232	; (adr r5, 8005dd8 <__ieee754_atan2+0x168>)
 8005cee:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cf2:	e7f1      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005cf4:	45ce      	cmp	lr, r9
 8005cf6:	d126      	bne.n	8005d46 <__ieee754_atan2+0xd6>
 8005cf8:	4577      	cmp	r7, lr
 8005cfa:	d111      	bne.n	8005d20 <__ieee754_atan2+0xb0>
 8005cfc:	2e02      	cmp	r6, #2
 8005cfe:	d007      	beq.n	8005d10 <__ieee754_atan2+0xa0>
 8005d00:	2e03      	cmp	r6, #3
 8005d02:	d009      	beq.n	8005d18 <__ieee754_atan2+0xa8>
 8005d04:	2e01      	cmp	r6, #1
 8005d06:	d15d      	bne.n	8005dc4 <__ieee754_atan2+0x154>
 8005d08:	a535      	add	r5, pc, #212	; (adr r5, 8005de0 <__ieee754_atan2+0x170>)
 8005d0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d0e:	e7e3      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d10:	a535      	add	r5, pc, #212	; (adr r5, 8005de8 <__ieee754_atan2+0x178>)
 8005d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d16:	e7df      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d18:	a535      	add	r5, pc, #212	; (adr r5, 8005df0 <__ieee754_atan2+0x180>)
 8005d1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d1e:	e7db      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d20:	2e02      	cmp	r6, #2
 8005d22:	d008      	beq.n	8005d36 <__ieee754_atan2+0xc6>
 8005d24:	2e03      	cmp	r6, #3
 8005d26:	d00a      	beq.n	8005d3e <__ieee754_atan2+0xce>
 8005d28:	2e01      	cmp	r6, #1
 8005d2a:	f04f 0400 	mov.w	r4, #0
 8005d2e:	d14d      	bne.n	8005dcc <__ieee754_atan2+0x15c>
 8005d30:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005d34:	e7d0      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d36:	a530      	add	r5, pc, #192	; (adr r5, 8005df8 <__ieee754_atan2+0x188>)
 8005d38:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d3c:	e7cc      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d3e:	a530      	add	r5, pc, #192	; (adr r5, 8005e00 <__ieee754_atan2+0x190>)
 8005d40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d44:	e7c8      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005d46:	454f      	cmp	r7, r9
 8005d48:	d0cd      	beq.n	8005ce6 <__ieee754_atan2+0x76>
 8005d4a:	eba7 070e 	sub.w	r7, r7, lr
 8005d4e:	153f      	asrs	r7, r7, #20
 8005d50:	2f3c      	cmp	r7, #60	; 0x3c
 8005d52:	dc1e      	bgt.n	8005d92 <__ieee754_atan2+0x122>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da01      	bge.n	8005d5c <__ieee754_atan2+0xec>
 8005d58:	373c      	adds	r7, #60	; 0x3c
 8005d5a:	db1e      	blt.n	8005d9a <__ieee754_atan2+0x12a>
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fcd8 	bl	8000714 <__aeabi_ddiv>
 8005d64:	f7ff fdc6 	bl	80058f4 <fabs>
 8005d68:	f7ff fc32 	bl	80055d0 <atan>
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	2e01      	cmp	r6, #1
 8005d72:	d015      	beq.n	8005da0 <__ieee754_atan2+0x130>
 8005d74:	2e02      	cmp	r6, #2
 8005d76:	d016      	beq.n	8005da6 <__ieee754_atan2+0x136>
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	d0ad      	beq.n	8005cd8 <__ieee754_atan2+0x68>
 8005d7c:	a322      	add	r3, pc, #136	; (adr r3, 8005e08 <__ieee754_atan2+0x198>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7fa f9e7 	bl	8000158 <__aeabi_dsub>
 8005d8a:	a31b      	add	r3, pc, #108	; (adr r3, 8005df8 <__ieee754_atan2+0x188>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	e015      	b.n	8005dbe <__ieee754_atan2+0x14e>
 8005d92:	a51f      	add	r5, pc, #124	; (adr r5, 8005e10 <__ieee754_atan2+0x1a0>)
 8005d94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d98:	e7ea      	b.n	8005d70 <__ieee754_atan2+0x100>
 8005d9a:	2400      	movs	r4, #0
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	e7e7      	b.n	8005d70 <__ieee754_atan2+0x100>
 8005da0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005da4:	e798      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005da6:	a318      	add	r3, pc, #96	; (adr r3, 8005e08 <__ieee754_atan2+0x198>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa f9d2 	bl	8000158 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	a10f      	add	r1, pc, #60	; (adr r1, 8005df8 <__ieee754_atan2+0x188>)
 8005dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dbe:	f7fa f9cb 	bl	8000158 <__aeabi_dsub>
 8005dc2:	e770      	b.n	8005ca6 <__ieee754_atan2+0x36>
 8005dc4:	a514      	add	r5, pc, #80	; (adr r5, 8005e18 <__ieee754_atan2+0x1a8>)
 8005dc6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005dca:	e785      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005dcc:	2500      	movs	r5, #0
 8005dce:	e783      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005dd0:	a50f      	add	r5, pc, #60	; (adr r5, 8005e10 <__ieee754_atan2+0x1a0>)
 8005dd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005dd6:	e77f      	b.n	8005cd8 <__ieee754_atan2+0x68>
 8005dd8:	54442d18 	.word	0x54442d18
 8005ddc:	bff921fb 	.word	0xbff921fb
 8005de0:	54442d18 	.word	0x54442d18
 8005de4:	bfe921fb 	.word	0xbfe921fb
 8005de8:	7f3321d2 	.word	0x7f3321d2
 8005dec:	4002d97c 	.word	0x4002d97c
 8005df0:	7f3321d2 	.word	0x7f3321d2
 8005df4:	c002d97c 	.word	0xc002d97c
 8005df8:	54442d18 	.word	0x54442d18
 8005dfc:	400921fb 	.word	0x400921fb
 8005e00:	54442d18 	.word	0x54442d18
 8005e04:	c00921fb 	.word	0xc00921fb
 8005e08:	33145c07 	.word	0x33145c07
 8005e0c:	3ca1a626 	.word	0x3ca1a626
 8005e10:	54442d18 	.word	0x54442d18
 8005e14:	3ff921fb 	.word	0x3ff921fb
 8005e18:	54442d18 	.word	0x54442d18
 8005e1c:	3fe921fb 	.word	0x3fe921fb
 8005e20:	7ff00000 	.word	0x7ff00000
 8005e24:	00000000 	.word	0x00000000

08005e28 <__ieee754_pow>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	b093      	sub	sp, #76	; 0x4c
 8005e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e32:	9e03      	ldr	r6, [sp, #12]
 8005e34:	9a02      	ldr	r2, [sp, #8]
 8005e36:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005e3a:	ea55 0302 	orrs.w	r3, r5, r2
 8005e3e:	4607      	mov	r7, r0
 8005e40:	4688      	mov	r8, r1
 8005e42:	4682      	mov	sl, r0
 8005e44:	4689      	mov	r9, r1
 8005e46:	f000 849e 	beq.w	8006786 <__ieee754_pow+0x95e>
 8005e4a:	4b77      	ldr	r3, [pc, #476]	; (8006028 <__ieee754_pow+0x200>)
 8005e4c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005e50:	429c      	cmp	r4, r3
 8005e52:	dc09      	bgt.n	8005e68 <__ieee754_pow+0x40>
 8005e54:	d103      	bne.n	8005e5e <__ieee754_pow+0x36>
 8005e56:	b938      	cbnz	r0, 8005e68 <__ieee754_pow+0x40>
 8005e58:	42a5      	cmp	r5, r4
 8005e5a:	dc0d      	bgt.n	8005e78 <__ieee754_pow+0x50>
 8005e5c:	e001      	b.n	8005e62 <__ieee754_pow+0x3a>
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	dc02      	bgt.n	8005e68 <__ieee754_pow+0x40>
 8005e62:	429d      	cmp	r5, r3
 8005e64:	d10e      	bne.n	8005e84 <__ieee754_pow+0x5c>
 8005e66:	b16a      	cbz	r2, 8005e84 <__ieee754_pow+0x5c>
 8005e68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e70:	ea54 030a 	orrs.w	r3, r4, sl
 8005e74:	f000 8487 	beq.w	8006786 <__ieee754_pow+0x95e>
 8005e78:	486c      	ldr	r0, [pc, #432]	; (800602c <__ieee754_pow+0x204>)
 8005e7a:	b013      	add	sp, #76	; 0x4c
 8005e7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	f000 bd78 	b.w	8006974 <nan>
 8005e84:	f1b9 0f00 	cmp.w	r9, #0
 8005e88:	da4f      	bge.n	8005f2a <__ieee754_pow+0x102>
 8005e8a:	4b69      	ldr	r3, [pc, #420]	; (8006030 <__ieee754_pow+0x208>)
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	dc4a      	bgt.n	8005f26 <__ieee754_pow+0xfe>
 8005e90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005e94:	429d      	cmp	r5, r3
 8005e96:	dd48      	ble.n	8005f2a <__ieee754_pow+0x102>
 8005e98:	152b      	asrs	r3, r5, #20
 8005e9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e9e:	2b14      	cmp	r3, #20
 8005ea0:	dd24      	ble.n	8005eec <__ieee754_pow+0xc4>
 8005ea2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005ea6:	fa22 f103 	lsr.w	r1, r2, r3
 8005eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d13b      	bne.n	8005f2a <__ieee754_pow+0x102>
 8005eb2:	f001 0101 	and.w	r1, r1, #1
 8005eb6:	f1c1 0302 	rsb	r3, r1, #2
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d156      	bne.n	8005f6e <__ieee754_pow+0x146>
 8005ec0:	4b59      	ldr	r3, [pc, #356]	; (8006028 <__ieee754_pow+0x200>)
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	d122      	bne.n	8005f0c <__ieee754_pow+0xe4>
 8005ec6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005eca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ece:	ea53 030a 	orrs.w	r3, r3, sl
 8005ed2:	f000 8458 	beq.w	8006786 <__ieee754_pow+0x95e>
 8005ed6:	4b57      	ldr	r3, [pc, #348]	; (8006034 <__ieee754_pow+0x20c>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	dd28      	ble.n	8005f2e <__ieee754_pow+0x106>
 8005edc:	2e00      	cmp	r6, #0
 8005ede:	f280 8456 	bge.w	800678e <__ieee754_pow+0x966>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	b013      	add	sp, #76	; 0x4c
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d13c      	bne.n	8005f6a <__ieee754_pow+0x142>
 8005ef0:	f1c3 0314 	rsb	r3, r3, #20
 8005ef4:	fa45 f103 	asr.w	r1, r5, r3
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	429d      	cmp	r5, r3
 8005efe:	f040 844e 	bne.w	800679e <__ieee754_pow+0x976>
 8005f02:	f001 0101 	and.w	r1, r1, #1
 8005f06:	f1c1 0302 	rsb	r3, r1, #2
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	4b4a      	ldr	r3, [pc, #296]	; (8006038 <__ieee754_pow+0x210>)
 8005f0e:	429d      	cmp	r5, r3
 8005f10:	d114      	bne.n	8005f3c <__ieee754_pow+0x114>
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	f280 843f 	bge.w	8006796 <__ieee754_pow+0x96e>
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4643      	mov	r3, r8
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	4946      	ldr	r1, [pc, #280]	; (8006038 <__ieee754_pow+0x210>)
 8005f20:	f7fa fbf8 	bl	8000714 <__aeabi_ddiv>
 8005f24:	e7df      	b.n	8005ee6 <__ieee754_pow+0xbe>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e7c7      	b.n	8005eba <__ieee754_pow+0x92>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e7c5      	b.n	8005eba <__ieee754_pow+0x92>
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	dad7      	bge.n	8005ee2 <__ieee754_pow+0xba>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	9802      	ldr	r0, [sp, #8]
 8005f36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f3a:	e7d4      	b.n	8005ee6 <__ieee754_pow+0xbe>
 8005f3c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005f40:	d106      	bne.n	8005f50 <__ieee754_pow+0x128>
 8005f42:	463a      	mov	r2, r7
 8005f44:	4643      	mov	r3, r8
 8005f46:	4638      	mov	r0, r7
 8005f48:	4641      	mov	r1, r8
 8005f4a:	f7fa fab9 	bl	80004c0 <__aeabi_dmul>
 8005f4e:	e7ca      	b.n	8005ee6 <__ieee754_pow+0xbe>
 8005f50:	4b3a      	ldr	r3, [pc, #232]	; (800603c <__ieee754_pow+0x214>)
 8005f52:	429e      	cmp	r6, r3
 8005f54:	d10b      	bne.n	8005f6e <__ieee754_pow+0x146>
 8005f56:	f1b9 0f00 	cmp.w	r9, #0
 8005f5a:	db08      	blt.n	8005f6e <__ieee754_pow+0x146>
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	4641      	mov	r1, r8
 8005f60:	b013      	add	sp, #76	; 0x4c
 8005f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f66:	f000 bc51 	b.w	800680c <__ieee754_sqrt>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4638      	mov	r0, r7
 8005f70:	4641      	mov	r1, r8
 8005f72:	f7ff fcbf 	bl	80058f4 <fabs>
 8005f76:	f1ba 0f00 	cmp.w	sl, #0
 8005f7a:	d125      	bne.n	8005fc8 <__ieee754_pow+0x1a0>
 8005f7c:	b124      	cbz	r4, 8005f88 <__ieee754_pow+0x160>
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <__ieee754_pow+0x210>)
 8005f80:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d11f      	bne.n	8005fc8 <__ieee754_pow+0x1a0>
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	da05      	bge.n	8005f98 <__ieee754_pow+0x170>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	2000      	movs	r0, #0
 8005f92:	4929      	ldr	r1, [pc, #164]	; (8006038 <__ieee754_pow+0x210>)
 8005f94:	f7fa fbbe 	bl	8000714 <__aeabi_ddiv>
 8005f98:	f1b9 0f00 	cmp.w	r9, #0
 8005f9c:	daa3      	bge.n	8005ee6 <__ieee754_pow+0xbe>
 8005f9e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005fa8:	4323      	orrs	r3, r4
 8005faa:	d106      	bne.n	8005fba <__ieee754_pow+0x192>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	f7fa f8d2 	bl	8000158 <__aeabi_dsub>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e7b2      	b.n	8005f20 <__ieee754_pow+0xf8>
 8005fba:	9b00      	ldr	r3, [sp, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d192      	bne.n	8005ee6 <__ieee754_pow+0xbe>
 8005fc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	e78e      	b.n	8005ee6 <__ieee754_pow+0xbe>
 8005fc8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005fcc:	f109 33ff 	add.w	r3, r9, #4294967295
 8005fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd4:	9b00      	ldr	r3, [sp, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d104      	bne.n	8005fe4 <__ieee754_pow+0x1bc>
 8005fda:	463a      	mov	r2, r7
 8005fdc:	4643      	mov	r3, r8
 8005fde:	4638      	mov	r0, r7
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	e7e5      	b.n	8005fb0 <__ieee754_pow+0x188>
 8005fe4:	4b16      	ldr	r3, [pc, #88]	; (8006040 <__ieee754_pow+0x218>)
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	f340 80fc 	ble.w	80061e4 <__ieee754_pow+0x3bc>
 8005fec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	dd0b      	ble.n	800600c <__ieee754_pow+0x1e4>
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <__ieee754_pow+0x20c>)
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	dc0e      	bgt.n	8006018 <__ieee754_pow+0x1f0>
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	f6bf af71 	bge.w	8005ee2 <__ieee754_pow+0xba>
 8006000:	a307      	add	r3, pc, #28	; (adr r3, 8006020 <__ieee754_pow+0x1f8>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	e79e      	b.n	8005f4a <__ieee754_pow+0x122>
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <__ieee754_pow+0x21c>)
 800600e:	429c      	cmp	r4, r3
 8006010:	ddf3      	ble.n	8005ffa <__ieee754_pow+0x1d2>
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <__ieee754_pow+0x210>)
 8006014:	429c      	cmp	r4, r3
 8006016:	dd17      	ble.n	8006048 <__ieee754_pow+0x220>
 8006018:	2e00      	cmp	r6, #0
 800601a:	dcf1      	bgt.n	8006000 <__ieee754_pow+0x1d8>
 800601c:	e761      	b.n	8005ee2 <__ieee754_pow+0xba>
 800601e:	bf00      	nop
 8006020:	8800759c 	.word	0x8800759c
 8006024:	7e37e43c 	.word	0x7e37e43c
 8006028:	7ff00000 	.word	0x7ff00000
 800602c:	08006c44 	.word	0x08006c44
 8006030:	433fffff 	.word	0x433fffff
 8006034:	3fefffff 	.word	0x3fefffff
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	41e00000 	.word	0x41e00000
 8006044:	3feffffe 	.word	0x3feffffe
 8006048:	2200      	movs	r2, #0
 800604a:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <__ieee754_pow+0x3a8>)
 800604c:	f7fa f884 	bl	8000158 <__aeabi_dsub>
 8006050:	a355      	add	r3, pc, #340	; (adr r3, 80061a8 <__ieee754_pow+0x380>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	4604      	mov	r4, r0
 8006058:	460d      	mov	r5, r1
 800605a:	f7fa fa31 	bl	80004c0 <__aeabi_dmul>
 800605e:	a354      	add	r3, pc, #336	; (adr r3, 80061b0 <__ieee754_pow+0x388>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	4606      	mov	r6, r0
 8006066:	460f      	mov	r7, r1
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa fa28 	bl	80004c0 <__aeabi_dmul>
 8006070:	2200      	movs	r2, #0
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <__ieee754_pow+0x3ac>)
 8006078:	4620      	mov	r0, r4
 800607a:	4629      	mov	r1, r5
 800607c:	f7fa fa20 	bl	80004c0 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	a14c      	add	r1, pc, #304	; (adr r1, 80061b8 <__ieee754_pow+0x390>)
 8006086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800608a:	f7fa f865 	bl	8000158 <__aeabi_dsub>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa fa15 	bl	80004c0 <__aeabi_dmul>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	2000      	movs	r0, #0
 800609c:	494e      	ldr	r1, [pc, #312]	; (80061d8 <__ieee754_pow+0x3b0>)
 800609e:	f7fa f85b 	bl	8000158 <__aeabi_dsub>
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	4680      	mov	r8, r0
 80060a8:	4689      	mov	r9, r1
 80060aa:	4620      	mov	r0, r4
 80060ac:	4629      	mov	r1, r5
 80060ae:	f7fa fa07 	bl	80004c0 <__aeabi_dmul>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f7fa fa01 	bl	80004c0 <__aeabi_dmul>
 80060be:	a340      	add	r3, pc, #256	; (adr r3, 80061c0 <__ieee754_pow+0x398>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f9fc 	bl	80004c0 <__aeabi_dmul>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4650      	mov	r0, sl
 80060ce:	4659      	mov	r1, fp
 80060d0:	f7fa f842 	bl	8000158 <__aeabi_dsub>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa f83c 	bl	800015c <__adddf3>
 80060e4:	2000      	movs	r0, #0
 80060e6:	468b      	mov	fp, r1
 80060e8:	4682      	mov	sl, r0
 80060ea:	4632      	mov	r2, r6
 80060ec:	463b      	mov	r3, r7
 80060ee:	f7fa f833 	bl	8000158 <__aeabi_dsub>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa f82d 	bl	8000158 <__aeabi_dsub>
 80060fe:	9b00      	ldr	r3, [sp, #0]
 8006100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006102:	3b01      	subs	r3, #1
 8006104:	4313      	orrs	r3, r2
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	4c33      	ldreq	r4, [pc, #204]	; (80061dc <__ieee754_pow+0x3b4>)
 800610e:	4c30      	ldrne	r4, [pc, #192]	; (80061d0 <__ieee754_pow+0x3a8>)
 8006110:	4606      	mov	r6, r0
 8006112:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800611a:	2400      	movs	r4, #0
 800611c:	460f      	mov	r7, r1
 800611e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	f7fa f817 	bl	8000158 <__aeabi_dsub>
 800612a:	4652      	mov	r2, sl
 800612c:	465b      	mov	r3, fp
 800612e:	f7fa f9c7 	bl	80004c0 <__aeabi_dmul>
 8006132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006136:	4680      	mov	r8, r0
 8006138:	4689      	mov	r9, r1
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	f7fa f9bf 	bl	80004c0 <__aeabi_dmul>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f7fa f807 	bl	800015c <__adddf3>
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	4680      	mov	r8, r0
 8006154:	4689      	mov	r9, r1
 8006156:	4650      	mov	r0, sl
 8006158:	4659      	mov	r1, fp
 800615a:	f7fa f9b1 	bl	80004c0 <__aeabi_dmul>
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
 8006162:	460b      	mov	r3, r1
 8006164:	4602      	mov	r2, r0
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800616e:	f7f9 fff5 	bl	800015c <__adddf3>
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <__ieee754_pow+0x3b8>)
 8006174:	4682      	mov	sl, r0
 8006176:	4299      	cmp	r1, r3
 8006178:	460f      	mov	r7, r1
 800617a:	460e      	mov	r6, r1
 800617c:	f340 82da 	ble.w	8006734 <__ieee754_pow+0x90c>
 8006180:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006184:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006188:	4303      	orrs	r3, r0
 800618a:	f000 81d5 	beq.w	8006538 <__ieee754_pow+0x710>
 800618e:	a30e      	add	r3, pc, #56	; (adr r3, 80061c8 <__ieee754_pow+0x3a0>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006198:	f7fa f992 	bl	80004c0 <__aeabi_dmul>
 800619c:	a30a      	add	r3, pc, #40	; (adr r3, 80061c8 <__ieee754_pow+0x3a0>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	e6d2      	b.n	8005f4a <__ieee754_pow+0x122>
 80061a4:	f3af 8000 	nop.w
 80061a8:	60000000 	.word	0x60000000
 80061ac:	3ff71547 	.word	0x3ff71547
 80061b0:	f85ddf44 	.word	0xf85ddf44
 80061b4:	3e54ae0b 	.word	0x3e54ae0b
 80061b8:	55555555 	.word	0x55555555
 80061bc:	3fd55555 	.word	0x3fd55555
 80061c0:	652b82fe 	.word	0x652b82fe
 80061c4:	3ff71547 	.word	0x3ff71547
 80061c8:	8800759c 	.word	0x8800759c
 80061cc:	7e37e43c 	.word	0x7e37e43c
 80061d0:	3ff00000 	.word	0x3ff00000
 80061d4:	3fd00000 	.word	0x3fd00000
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	bff00000 	.word	0xbff00000
 80061e0:	408fffff 	.word	0x408fffff
 80061e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	da05      	bge.n	80061fa <__ieee754_pow+0x3d2>
 80061ee:	4bca      	ldr	r3, [pc, #808]	; (8006518 <__ieee754_pow+0x6f0>)
 80061f0:	f7fa f966 	bl	80004c0 <__aeabi_dmul>
 80061f4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80061f8:	460c      	mov	r4, r1
 80061fa:	1523      	asrs	r3, r4, #20
 80061fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006200:	4413      	add	r3, r2
 8006202:	9307      	str	r3, [sp, #28]
 8006204:	4bc5      	ldr	r3, [pc, #788]	; (800651c <__ieee754_pow+0x6f4>)
 8006206:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800620a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800620e:	429c      	cmp	r4, r3
 8006210:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006214:	dd08      	ble.n	8006228 <__ieee754_pow+0x400>
 8006216:	4bc2      	ldr	r3, [pc, #776]	; (8006520 <__ieee754_pow+0x6f8>)
 8006218:	429c      	cmp	r4, r3
 800621a:	f340 8154 	ble.w	80064c6 <__ieee754_pow+0x69e>
 800621e:	9b07      	ldr	r3, [sp, #28]
 8006220:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006224:	3301      	adds	r3, #1
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	2600      	movs	r6, #0
 800622a:	4629      	mov	r1, r5
 800622c:	00f3      	lsls	r3, r6, #3
 800622e:	930d      	str	r3, [sp, #52]	; 0x34
 8006230:	4bbc      	ldr	r3, [pc, #752]	; (8006524 <__ieee754_pow+0x6fc>)
 8006232:	00f2      	lsls	r2, r6, #3
 8006234:	4413      	add	r3, r2
 8006236:	cb18      	ldmia	r3, {r3, r4}
 8006238:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800623c:	461a      	mov	r2, r3
 800623e:	4623      	mov	r3, r4
 8006240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006244:	f7f9 ff88 	bl	8000158 <__aeabi_dsub>
 8006248:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800624c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006250:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006254:	f7f9 ff82 	bl	800015c <__adddf3>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	2000      	movs	r0, #0
 800625e:	49b2      	ldr	r1, [pc, #712]	; (8006528 <__ieee754_pow+0x700>)
 8006260:	f7fa fa58 	bl	8000714 <__aeabi_ddiv>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800626c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006270:	f7fa f926 	bl	80004c0 <__aeabi_dmul>
 8006274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006278:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800627c:	f04f 0a00 	mov.w	sl, #0
 8006280:	2200      	movs	r2, #0
 8006282:	106d      	asrs	r5, r5, #1
 8006284:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006288:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800628c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006290:	4659      	mov	r1, fp
 8006292:	4650      	mov	r0, sl
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	f7fa f912 	bl	80004c0 <__aeabi_dmul>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062a4:	f7f9 ff58 	bl	8000158 <__aeabi_dsub>
 80062a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7f9 ff50 	bl	8000158 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062c0:	f7f9 ff4a 	bl	8000158 <__aeabi_dsub>
 80062c4:	465b      	mov	r3, fp
 80062c6:	4652      	mov	r2, sl
 80062c8:	f7fa f8fa 	bl	80004c0 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4630      	mov	r0, r6
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7f9 ff40 	bl	8000158 <__aeabi_dsub>
 80062d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062dc:	f7fa f8f0 	bl	80004c0 <__aeabi_dmul>
 80062e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fa f8e8 	bl	80004c0 <__aeabi_dmul>
 80062f0:	a377      	add	r3, pc, #476	; (adr r3, 80064d0 <__ieee754_pow+0x6a8>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	f7fa f8e1 	bl	80004c0 <__aeabi_dmul>
 80062fe:	a376      	add	r3, pc, #472	; (adr r3, 80064d8 <__ieee754_pow+0x6b0>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7f9 ff2a 	bl	800015c <__adddf3>
 8006308:	4622      	mov	r2, r4
 800630a:	462b      	mov	r3, r5
 800630c:	f7fa f8d8 	bl	80004c0 <__aeabi_dmul>
 8006310:	a373      	add	r3, pc, #460	; (adr r3, 80064e0 <__ieee754_pow+0x6b8>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f7f9 ff21 	bl	800015c <__adddf3>
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	f7fa f8cf 	bl	80004c0 <__aeabi_dmul>
 8006322:	a371      	add	r3, pc, #452	; (adr r3, 80064e8 <__ieee754_pow+0x6c0>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7f9 ff18 	bl	800015c <__adddf3>
 800632c:	4622      	mov	r2, r4
 800632e:	462b      	mov	r3, r5
 8006330:	f7fa f8c6 	bl	80004c0 <__aeabi_dmul>
 8006334:	a36e      	add	r3, pc, #440	; (adr r3, 80064f0 <__ieee754_pow+0x6c8>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff0f 	bl	800015c <__adddf3>
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	f7fa f8bd 	bl	80004c0 <__aeabi_dmul>
 8006346:	a36c      	add	r3, pc, #432	; (adr r3, 80064f8 <__ieee754_pow+0x6d0>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff06 	bl	800015c <__adddf3>
 8006350:	4622      	mov	r2, r4
 8006352:	4606      	mov	r6, r0
 8006354:	460f      	mov	r7, r1
 8006356:	462b      	mov	r3, r5
 8006358:	4620      	mov	r0, r4
 800635a:	4629      	mov	r1, r5
 800635c:	f7fa f8b0 	bl	80004c0 <__aeabi_dmul>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa f8aa 	bl	80004c0 <__aeabi_dmul>
 800636c:	4604      	mov	r4, r0
 800636e:	460d      	mov	r5, r1
 8006370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006374:	465b      	mov	r3, fp
 8006376:	4652      	mov	r2, sl
 8006378:	f7f9 fef0 	bl	800015c <__adddf3>
 800637c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006380:	f7fa f89e 	bl	80004c0 <__aeabi_dmul>
 8006384:	4622      	mov	r2, r4
 8006386:	462b      	mov	r3, r5
 8006388:	f7f9 fee8 	bl	800015c <__adddf3>
 800638c:	465b      	mov	r3, fp
 800638e:	4606      	mov	r6, r0
 8006390:	460f      	mov	r7, r1
 8006392:	4652      	mov	r2, sl
 8006394:	4659      	mov	r1, fp
 8006396:	4650      	mov	r0, sl
 8006398:	f7fa f892 	bl	80004c0 <__aeabi_dmul>
 800639c:	2200      	movs	r2, #0
 800639e:	4b63      	ldr	r3, [pc, #396]	; (800652c <__ieee754_pow+0x704>)
 80063a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063a4:	f7f9 feda 	bl	800015c <__adddf3>
 80063a8:	4632      	mov	r2, r6
 80063aa:	463b      	mov	r3, r7
 80063ac:	f7f9 fed6 	bl	800015c <__adddf3>
 80063b0:	4650      	mov	r0, sl
 80063b2:	460d      	mov	r5, r1
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4650      	mov	r0, sl
 80063ba:	4659      	mov	r1, fp
 80063bc:	f7fa f880 	bl	80004c0 <__aeabi_dmul>
 80063c0:	2200      	movs	r2, #0
 80063c2:	4680      	mov	r8, r0
 80063c4:	4689      	mov	r9, r1
 80063c6:	4b59      	ldr	r3, [pc, #356]	; (800652c <__ieee754_pow+0x704>)
 80063c8:	4629      	mov	r1, r5
 80063ca:	4650      	mov	r0, sl
 80063cc:	f7f9 fec4 	bl	8000158 <__aeabi_dsub>
 80063d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063d4:	f7f9 fec0 	bl	8000158 <__aeabi_dsub>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7f9 feba 	bl	8000158 <__aeabi_dsub>
 80063e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063e8:	f7fa f86a 	bl	80004c0 <__aeabi_dmul>
 80063ec:	462b      	mov	r3, r5
 80063ee:	4606      	mov	r6, r0
 80063f0:	460f      	mov	r7, r1
 80063f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063f6:	4652      	mov	r2, sl
 80063f8:	f7fa f862 	bl	80004c0 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7f9 feaa 	bl	800015c <__adddf3>
 8006408:	4606      	mov	r6, r0
 800640a:	460f      	mov	r7, r1
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7f9 fea2 	bl	800015c <__adddf3>
 8006418:	a339      	add	r3, pc, #228	; (adr r3, 8006500 <__ieee754_pow+0x6d8>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	4650      	mov	r0, sl
 8006420:	460d      	mov	r5, r1
 8006422:	f7fa f84d 	bl	80004c0 <__aeabi_dmul>
 8006426:	4642      	mov	r2, r8
 8006428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800642c:	464b      	mov	r3, r9
 800642e:	4629      	mov	r1, r5
 8006430:	4650      	mov	r0, sl
 8006432:	f7f9 fe91 	bl	8000158 <__aeabi_dsub>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7f9 fe8b 	bl	8000158 <__aeabi_dsub>
 8006442:	a331      	add	r3, pc, #196	; (adr r3, 8006508 <__ieee754_pow+0x6e0>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7fa f83a 	bl	80004c0 <__aeabi_dmul>
 800644c:	a330      	add	r3, pc, #192	; (adr r3, 8006510 <__ieee754_pow+0x6e8>)
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	4650      	mov	r0, sl
 8006458:	4629      	mov	r1, r5
 800645a:	f7fa f831 	bl	80004c0 <__aeabi_dmul>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7f9 fe79 	bl	800015c <__adddf3>
 800646a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800646c:	4b30      	ldr	r3, [pc, #192]	; (8006530 <__ieee754_pow+0x708>)
 800646e:	4413      	add	r3, r2
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7f9 fe72 	bl	800015c <__adddf3>
 8006478:	4604      	mov	r4, r0
 800647a:	9807      	ldr	r0, [sp, #28]
 800647c:	460d      	mov	r5, r1
 800647e:	f7f9 ffb9 	bl	80003f4 <__aeabi_i2d>
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006488:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <__ieee754_pow+0x70c>)
 800648a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800648e:	4413      	add	r3, r2
 8006490:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006494:	4622      	mov	r2, r4
 8006496:	462b      	mov	r3, r5
 8006498:	f7f9 fe60 	bl	800015c <__adddf3>
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	f7f9 fe5c 	bl	800015c <__adddf3>
 80064a4:	4632      	mov	r2, r6
 80064a6:	463b      	mov	r3, r7
 80064a8:	f7f9 fe58 	bl	800015c <__adddf3>
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	4650      	mov	r0, sl
 80064b2:	468b      	mov	fp, r1
 80064b4:	f7f9 fe50 	bl	8000158 <__aeabi_dsub>
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	f7f9 fe4c 	bl	8000158 <__aeabi_dsub>
 80064c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c4:	e613      	b.n	80060ee <__ieee754_pow+0x2c6>
 80064c6:	2601      	movs	r6, #1
 80064c8:	e6af      	b.n	800622a <__ieee754_pow+0x402>
 80064ca:	bf00      	nop
 80064cc:	f3af 8000 	nop.w
 80064d0:	4a454eef 	.word	0x4a454eef
 80064d4:	3fca7e28 	.word	0x3fca7e28
 80064d8:	93c9db65 	.word	0x93c9db65
 80064dc:	3fcd864a 	.word	0x3fcd864a
 80064e0:	a91d4101 	.word	0xa91d4101
 80064e4:	3fd17460 	.word	0x3fd17460
 80064e8:	518f264d 	.word	0x518f264d
 80064ec:	3fd55555 	.word	0x3fd55555
 80064f0:	db6fabff 	.word	0xdb6fabff
 80064f4:	3fdb6db6 	.word	0x3fdb6db6
 80064f8:	33333303 	.word	0x33333303
 80064fc:	3fe33333 	.word	0x3fe33333
 8006500:	e0000000 	.word	0xe0000000
 8006504:	3feec709 	.word	0x3feec709
 8006508:	dc3a03fd 	.word	0xdc3a03fd
 800650c:	3feec709 	.word	0x3feec709
 8006510:	145b01f5 	.word	0x145b01f5
 8006514:	be3e2fe0 	.word	0xbe3e2fe0
 8006518:	43400000 	.word	0x43400000
 800651c:	0003988e 	.word	0x0003988e
 8006520:	000bb679 	.word	0x000bb679
 8006524:	08006cf0 	.word	0x08006cf0
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	40080000 	.word	0x40080000
 8006530:	08006d10 	.word	0x08006d10
 8006534:	08006d00 	.word	0x08006d00
 8006538:	a39b      	add	r3, pc, #620	; (adr r3, 80067a8 <__ieee754_pow+0x980>)
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7f9 fe0b 	bl	800015c <__adddf3>
 8006546:	4622      	mov	r2, r4
 8006548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800654c:	462b      	mov	r3, r5
 800654e:	4650      	mov	r0, sl
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe01 	bl	8000158 <__aeabi_dsub>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800655e:	f7fa fa3f 	bl	80009e0 <__aeabi_dcmpgt>
 8006562:	2800      	cmp	r0, #0
 8006564:	f47f ae13 	bne.w	800618e <__ieee754_pow+0x366>
 8006568:	4aa3      	ldr	r2, [pc, #652]	; (80067f8 <__ieee754_pow+0x9d0>)
 800656a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800656e:	4293      	cmp	r3, r2
 8006570:	f340 8104 	ble.w	800677c <__ieee754_pow+0x954>
 8006574:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006578:	2000      	movs	r0, #0
 800657a:	151b      	asrs	r3, r3, #20
 800657c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006580:	fa4a f303 	asr.w	r3, sl, r3
 8006584:	4433      	add	r3, r6
 8006586:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800658a:	4f9c      	ldr	r7, [pc, #624]	; (80067fc <__ieee754_pow+0x9d4>)
 800658c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006590:	4117      	asrs	r7, r2
 8006592:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006596:	ea23 0107 	bic.w	r1, r3, r7
 800659a:	f1c2 0214 	rsb	r2, r2, #20
 800659e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80065a2:	fa4a fa02 	asr.w	sl, sl, r2
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	bfb8      	it	lt
 80065b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80065b6:	f7f9 fdcf 	bl	8000158 <__aeabi_dsub>
 80065ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	f7f9 fdc9 	bl	800015c <__adddf3>
 80065ca:	a379      	add	r3, pc, #484	; (adr r3, 80067b0 <__ieee754_pow+0x988>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	2000      	movs	r0, #0
 80065d2:	460d      	mov	r5, r1
 80065d4:	4604      	mov	r4, r0
 80065d6:	f7f9 ff73 	bl	80004c0 <__aeabi_dmul>
 80065da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fdb7 	bl	8000158 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4640      	mov	r0, r8
 80065f0:	4649      	mov	r1, r9
 80065f2:	f7f9 fdb1 	bl	8000158 <__aeabi_dsub>
 80065f6:	a370      	add	r3, pc, #448	; (adr r3, 80067b8 <__ieee754_pow+0x990>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7f9 ff60 	bl	80004c0 <__aeabi_dmul>
 8006600:	a36f      	add	r3, pc, #444	; (adr r3, 80067c0 <__ieee754_pow+0x998>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	4680      	mov	r8, r0
 8006608:	4689      	mov	r9, r1
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 ff57 	bl	80004c0 <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7f9 fd9f 	bl	800015c <__adddf3>
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	f7f9 fd97 	bl	800015c <__adddf3>
 800662e:	4632      	mov	r2, r6
 8006630:	463b      	mov	r3, r7
 8006632:	4680      	mov	r8, r0
 8006634:	4689      	mov	r9, r1
 8006636:	f7f9 fd8f 	bl	8000158 <__aeabi_dsub>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7f9 fd89 	bl	8000158 <__aeabi_dsub>
 8006646:	4642      	mov	r2, r8
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	464b      	mov	r3, r9
 800664e:	4640      	mov	r0, r8
 8006650:	4649      	mov	r1, r9
 8006652:	f7f9 ff35 	bl	80004c0 <__aeabi_dmul>
 8006656:	a35c      	add	r3, pc, #368	; (adr r3, 80067c8 <__ieee754_pow+0x9a0>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
 8006660:	f7f9 ff2e 	bl	80004c0 <__aeabi_dmul>
 8006664:	a35a      	add	r3, pc, #360	; (adr r3, 80067d0 <__ieee754_pow+0x9a8>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 fd75 	bl	8000158 <__aeabi_dsub>
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	f7f9 ff25 	bl	80004c0 <__aeabi_dmul>
 8006676:	a358      	add	r3, pc, #352	; (adr r3, 80067d8 <__ieee754_pow+0x9b0>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 fd6e 	bl	800015c <__adddf3>
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	f7f9 ff1c 	bl	80004c0 <__aeabi_dmul>
 8006688:	a355      	add	r3, pc, #340	; (adr r3, 80067e0 <__ieee754_pow+0x9b8>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fd63 	bl	8000158 <__aeabi_dsub>
 8006692:	4622      	mov	r2, r4
 8006694:	462b      	mov	r3, r5
 8006696:	f7f9 ff13 	bl	80004c0 <__aeabi_dmul>
 800669a:	a353      	add	r3, pc, #332	; (adr r3, 80067e8 <__ieee754_pow+0x9c0>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 fd5c 	bl	800015c <__adddf3>
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	f7f9 ff0a 	bl	80004c0 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7f9 fd50 	bl	8000158 <__aeabi_dsub>
 80066b8:	4604      	mov	r4, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7f9 fefc 	bl	80004c0 <__aeabi_dmul>
 80066c8:	2200      	movs	r2, #0
 80066ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 fd3f 	bl	8000158 <__aeabi_dsub>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e2:	f7fa f817 	bl	8000714 <__aeabi_ddiv>
 80066e6:	4632      	mov	r2, r6
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	463b      	mov	r3, r7
 80066ee:	4640      	mov	r0, r8
 80066f0:	4649      	mov	r1, r9
 80066f2:	f7f9 fee5 	bl	80004c0 <__aeabi_dmul>
 80066f6:	4632      	mov	r2, r6
 80066f8:	463b      	mov	r3, r7
 80066fa:	f7f9 fd2f 	bl	800015c <__adddf3>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f7f9 fd27 	bl	8000158 <__aeabi_dsub>
 800670a:	4642      	mov	r2, r8
 800670c:	464b      	mov	r3, r9
 800670e:	f7f9 fd23 	bl	8000158 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	2000      	movs	r0, #0
 8006718:	4939      	ldr	r1, [pc, #228]	; (8006800 <__ieee754_pow+0x9d8>)
 800671a:	f7f9 fd1d 	bl	8000158 <__aeabi_dsub>
 800671e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006722:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006726:	da2c      	bge.n	8006782 <__ieee754_pow+0x95a>
 8006728:	4652      	mov	r2, sl
 800672a:	f000 f9b1 	bl	8006a90 <scalbn>
 800672e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006732:	e40a      	b.n	8005f4a <__ieee754_pow+0x122>
 8006734:	4b33      	ldr	r3, [pc, #204]	; (8006804 <__ieee754_pow+0x9dc>)
 8006736:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800673a:	429f      	cmp	r7, r3
 800673c:	f77f af14 	ble.w	8006568 <__ieee754_pow+0x740>
 8006740:	4b31      	ldr	r3, [pc, #196]	; (8006808 <__ieee754_pow+0x9e0>)
 8006742:	440b      	add	r3, r1
 8006744:	4303      	orrs	r3, r0
 8006746:	d00b      	beq.n	8006760 <__ieee754_pow+0x938>
 8006748:	a329      	add	r3, pc, #164	; (adr r3, 80067f0 <__ieee754_pow+0x9c8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006752:	f7f9 feb5 	bl	80004c0 <__aeabi_dmul>
 8006756:	a326      	add	r3, pc, #152	; (adr r3, 80067f0 <__ieee754_pow+0x9c8>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7ff bbf5 	b.w	8005f4a <__ieee754_pow+0x122>
 8006760:	4622      	mov	r2, r4
 8006762:	462b      	mov	r3, r5
 8006764:	f7f9 fcf8 	bl	8000158 <__aeabi_dsub>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7fa f922 	bl	80009b8 <__aeabi_dcmple>
 8006774:	2800      	cmp	r0, #0
 8006776:	f43f aef7 	beq.w	8006568 <__ieee754_pow+0x740>
 800677a:	e7e5      	b.n	8006748 <__ieee754_pow+0x920>
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	e71d      	b.n	80065be <__ieee754_pow+0x796>
 8006782:	4621      	mov	r1, r4
 8006784:	e7d3      	b.n	800672e <__ieee754_pow+0x906>
 8006786:	2000      	movs	r0, #0
 8006788:	491d      	ldr	r1, [pc, #116]	; (8006800 <__ieee754_pow+0x9d8>)
 800678a:	f7ff bbac 	b.w	8005ee6 <__ieee754_pow+0xbe>
 800678e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006792:	f7ff bba8 	b.w	8005ee6 <__ieee754_pow+0xbe>
 8006796:	4638      	mov	r0, r7
 8006798:	4641      	mov	r1, r8
 800679a:	f7ff bba4 	b.w	8005ee6 <__ieee754_pow+0xbe>
 800679e:	9200      	str	r2, [sp, #0]
 80067a0:	f7ff bbb4 	b.w	8005f0c <__ieee754_pow+0xe4>
 80067a4:	f3af 8000 	nop.w
 80067a8:	652b82fe 	.word	0x652b82fe
 80067ac:	3c971547 	.word	0x3c971547
 80067b0:	00000000 	.word	0x00000000
 80067b4:	3fe62e43 	.word	0x3fe62e43
 80067b8:	fefa39ef 	.word	0xfefa39ef
 80067bc:	3fe62e42 	.word	0x3fe62e42
 80067c0:	0ca86c39 	.word	0x0ca86c39
 80067c4:	be205c61 	.word	0xbe205c61
 80067c8:	72bea4d0 	.word	0x72bea4d0
 80067cc:	3e663769 	.word	0x3e663769
 80067d0:	c5d26bf1 	.word	0xc5d26bf1
 80067d4:	3ebbbd41 	.word	0x3ebbbd41
 80067d8:	af25de2c 	.word	0xaf25de2c
 80067dc:	3f11566a 	.word	0x3f11566a
 80067e0:	16bebd93 	.word	0x16bebd93
 80067e4:	3f66c16c 	.word	0x3f66c16c
 80067e8:	5555553e 	.word	0x5555553e
 80067ec:	3fc55555 	.word	0x3fc55555
 80067f0:	c2f8f359 	.word	0xc2f8f359
 80067f4:	01a56e1f 	.word	0x01a56e1f
 80067f8:	3fe00000 	.word	0x3fe00000
 80067fc:	000fffff 	.word	0x000fffff
 8006800:	3ff00000 	.word	0x3ff00000
 8006804:	4090cbff 	.word	0x4090cbff
 8006808:	3f6f3400 	.word	0x3f6f3400

0800680c <__ieee754_sqrt>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8006960 <__ieee754_sqrt+0x154>
 8006814:	4606      	mov	r6, r0
 8006816:	ea3e 0e01 	bics.w	lr, lr, r1
 800681a:	460d      	mov	r5, r1
 800681c:	4607      	mov	r7, r0
 800681e:	460a      	mov	r2, r1
 8006820:	460c      	mov	r4, r1
 8006822:	4603      	mov	r3, r0
 8006824:	d10f      	bne.n	8006846 <__ieee754_sqrt+0x3a>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	f7f9 fe49 	bl	80004c0 <__aeabi_dmul>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4630      	mov	r0, r6
 8006834:	4629      	mov	r1, r5
 8006836:	f7f9 fc91 	bl	800015c <__adddf3>
 800683a:	4606      	mov	r6, r0
 800683c:	460d      	mov	r5, r1
 800683e:	4630      	mov	r0, r6
 8006840:	4629      	mov	r1, r5
 8006842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006846:	2900      	cmp	r1, #0
 8006848:	dc0e      	bgt.n	8006868 <__ieee754_sqrt+0x5c>
 800684a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800684e:	ea5e 0707 	orrs.w	r7, lr, r7
 8006852:	d0f4      	beq.n	800683e <__ieee754_sqrt+0x32>
 8006854:	b141      	cbz	r1, 8006868 <__ieee754_sqrt+0x5c>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	f7f9 fc7d 	bl	8000158 <__aeabi_dsub>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	f7f9 ff57 	bl	8000714 <__aeabi_ddiv>
 8006866:	e7e8      	b.n	800683a <__ieee754_sqrt+0x2e>
 8006868:	1512      	asrs	r2, r2, #20
 800686a:	d10c      	bne.n	8006886 <__ieee754_sqrt+0x7a>
 800686c:	2c00      	cmp	r4, #0
 800686e:	d06e      	beq.n	800694e <__ieee754_sqrt+0x142>
 8006870:	2100      	movs	r1, #0
 8006872:	02e6      	lsls	r6, r4, #11
 8006874:	d56f      	bpl.n	8006956 <__ieee754_sqrt+0x14a>
 8006876:	1e48      	subs	r0, r1, #1
 8006878:	1a12      	subs	r2, r2, r0
 800687a:	f1c1 0020 	rsb	r0, r1, #32
 800687e:	fa23 f000 	lsr.w	r0, r3, r0
 8006882:	4304      	orrs	r4, r0
 8006884:	408b      	lsls	r3, r1
 8006886:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800688a:	07d5      	lsls	r5, r2, #31
 800688c:	f04f 0500 	mov.w	r5, #0
 8006890:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006894:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006898:	bf42      	ittt	mi
 800689a:	0064      	lslmi	r4, r4, #1
 800689c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80068a0:	005b      	lslmi	r3, r3, #1
 80068a2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80068a6:	1050      	asrs	r0, r2, #1
 80068a8:	4421      	add	r1, r4
 80068aa:	2216      	movs	r2, #22
 80068ac:	462c      	mov	r4, r5
 80068ae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	19a7      	adds	r7, r4, r6
 80068b6:	428f      	cmp	r7, r1
 80068b8:	bfde      	ittt	le
 80068ba:	1bc9      	suble	r1, r1, r7
 80068bc:	19bc      	addle	r4, r7, r6
 80068be:	19ad      	addle	r5, r5, r6
 80068c0:	0049      	lsls	r1, r1, #1
 80068c2:	3a01      	subs	r2, #1
 80068c4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80068c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068d0:	d1f0      	bne.n	80068b4 <__ieee754_sqrt+0xa8>
 80068d2:	f04f 0e20 	mov.w	lr, #32
 80068d6:	4694      	mov	ip, r2
 80068d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80068dc:	42a1      	cmp	r1, r4
 80068de:	eb06 070c 	add.w	r7, r6, ip
 80068e2:	dc02      	bgt.n	80068ea <__ieee754_sqrt+0xde>
 80068e4:	d112      	bne.n	800690c <__ieee754_sqrt+0x100>
 80068e6:	429f      	cmp	r7, r3
 80068e8:	d810      	bhi.n	800690c <__ieee754_sqrt+0x100>
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	eb07 0c06 	add.w	ip, r7, r6
 80068f0:	da34      	bge.n	800695c <__ieee754_sqrt+0x150>
 80068f2:	f1bc 0f00 	cmp.w	ip, #0
 80068f6:	db31      	blt.n	800695c <__ieee754_sqrt+0x150>
 80068f8:	f104 0801 	add.w	r8, r4, #1
 80068fc:	1b09      	subs	r1, r1, r4
 80068fe:	4644      	mov	r4, r8
 8006900:	429f      	cmp	r7, r3
 8006902:	bf88      	it	hi
 8006904:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006908:	1bdb      	subs	r3, r3, r7
 800690a:	4432      	add	r2, r6
 800690c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006910:	f1be 0e01 	subs.w	lr, lr, #1
 8006914:	4439      	add	r1, r7
 8006916:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800691a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800691e:	d1dd      	bne.n	80068dc <__ieee754_sqrt+0xd0>
 8006920:	430b      	orrs	r3, r1
 8006922:	d006      	beq.n	8006932 <__ieee754_sqrt+0x126>
 8006924:	1c54      	adds	r4, r2, #1
 8006926:	bf0b      	itete	eq
 8006928:	4672      	moveq	r2, lr
 800692a:	3201      	addne	r2, #1
 800692c:	3501      	addeq	r5, #1
 800692e:	f022 0201 	bicne.w	r2, r2, #1
 8006932:	106b      	asrs	r3, r5, #1
 8006934:	0852      	lsrs	r2, r2, #1
 8006936:	07e9      	lsls	r1, r5, #31
 8006938:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800693c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006940:	bf48      	it	mi
 8006942:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006946:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800694a:	4616      	mov	r6, r2
 800694c:	e777      	b.n	800683e <__ieee754_sqrt+0x32>
 800694e:	0adc      	lsrs	r4, r3, #11
 8006950:	3a15      	subs	r2, #21
 8006952:	055b      	lsls	r3, r3, #21
 8006954:	e78a      	b.n	800686c <__ieee754_sqrt+0x60>
 8006956:	0064      	lsls	r4, r4, #1
 8006958:	3101      	adds	r1, #1
 800695a:	e78a      	b.n	8006872 <__ieee754_sqrt+0x66>
 800695c:	46a0      	mov	r8, r4
 800695e:	e7cd      	b.n	80068fc <__ieee754_sqrt+0xf0>
 8006960:	7ff00000 	.word	0x7ff00000

08006964 <finite>:
 8006964:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006968:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800696c:	0fc0      	lsrs	r0, r0, #31
 800696e:	4770      	bx	lr

08006970 <matherr>:
 8006970:	2000      	movs	r0, #0
 8006972:	4770      	bx	lr

08006974 <nan>:
 8006974:	2000      	movs	r0, #0
 8006976:	4901      	ldr	r1, [pc, #4]	; (800697c <nan+0x8>)
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	7ff80000 	.word	0x7ff80000

08006980 <rint>:
 8006980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006982:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8006986:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 800698a:	2f13      	cmp	r7, #19
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4684      	mov	ip, r0
 8006992:	460c      	mov	r4, r1
 8006994:	4605      	mov	r5, r0
 8006996:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800699a:	dc56      	bgt.n	8006a4a <rint+0xca>
 800699c:	2f00      	cmp	r7, #0
 800699e:	da29      	bge.n	80069f4 <rint+0x74>
 80069a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069a4:	4301      	orrs	r1, r0
 80069a6:	d021      	beq.n	80069ec <rint+0x6c>
 80069a8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80069ac:	4305      	orrs	r5, r0
 80069ae:	426b      	negs	r3, r5
 80069b0:	432b      	orrs	r3, r5
 80069b2:	0b1b      	lsrs	r3, r3, #12
 80069b4:	0c64      	lsrs	r4, r4, #17
 80069b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ba:	0464      	lsls	r4, r4, #17
 80069bc:	ea43 0104 	orr.w	r1, r3, r4
 80069c0:	4b31      	ldr	r3, [pc, #196]	; (8006a88 <rint+0x108>)
 80069c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069ca:	4622      	mov	r2, r4
 80069cc:	462b      	mov	r3, r5
 80069ce:	f7f9 fbc5 	bl	800015c <__adddf3>
 80069d2:	e9cd 0100 	strd	r0, r1, [sp]
 80069d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	f7f9 fbbb 	bl	8000158 <__aeabi_dsub>
 80069e2:	4602      	mov	r2, r0
 80069e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069e8:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 80069ec:	4610      	mov	r0, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	b003      	add	sp, #12
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	4925      	ldr	r1, [pc, #148]	; (8006a8c <rint+0x10c>)
 80069f6:	4139      	asrs	r1, r7
 80069f8:	ea03 0001 	and.w	r0, r3, r1
 80069fc:	4310      	orrs	r0, r2
 80069fe:	d0f5      	beq.n	80069ec <rint+0x6c>
 8006a00:	084b      	lsrs	r3, r1, #1
 8006a02:	ea04 0203 	and.w	r2, r4, r3
 8006a06:	ea52 050c 	orrs.w	r5, r2, ip
 8006a0a:	d00a      	beq.n	8006a22 <rint+0xa2>
 8006a0c:	ea24 0303 	bic.w	r3, r4, r3
 8006a10:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8006a14:	2f13      	cmp	r7, #19
 8006a16:	bf0c      	ite	eq
 8006a18:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006a1c:	2500      	movne	r5, #0
 8006a1e:	413c      	asrs	r4, r7
 8006a20:	431c      	orrs	r4, r3
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <rint+0x108>)
 8006a24:	4621      	mov	r1, r4
 8006a26:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	f7f9 fb92 	bl	800015c <__adddf3>
 8006a38:	e9cd 0100 	strd	r0, r1, [sp]
 8006a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a40:	4622      	mov	r2, r4
 8006a42:	462b      	mov	r3, r5
 8006a44:	f7f9 fb88 	bl	8000158 <__aeabi_dsub>
 8006a48:	e006      	b.n	8006a58 <rint+0xd8>
 8006a4a:	2f33      	cmp	r7, #51	; 0x33
 8006a4c:	dd07      	ble.n	8006a5e <rint+0xde>
 8006a4e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006a52:	d1cb      	bne.n	80069ec <rint+0x6c>
 8006a54:	f7f9 fb82 	bl	800015c <__adddf3>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	e7c6      	b.n	80069ec <rint+0x6c>
 8006a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a62:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8006a66:	fa21 f10e 	lsr.w	r1, r1, lr
 8006a6a:	4208      	tst	r0, r1
 8006a6c:	d0be      	beq.n	80069ec <rint+0x6c>
 8006a6e:	084b      	lsrs	r3, r1, #1
 8006a70:	4218      	tst	r0, r3
 8006a72:	bf1f      	itttt	ne
 8006a74:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006a78:	ea20 0303 	bicne.w	r3, r0, r3
 8006a7c:	fa45 fe0e 	asrne.w	lr, r5, lr
 8006a80:	ea4e 0503 	orrne.w	r5, lr, r3
 8006a84:	e7cd      	b.n	8006a22 <rint+0xa2>
 8006a86:	bf00      	nop
 8006a88:	08006d20 	.word	0x08006d20
 8006a8c:	000fffff 	.word	0x000fffff

08006a90 <scalbn>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	4616      	mov	r6, r2
 8006a94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	b98a      	cbnz	r2, 8006ac4 <scalbn+0x34>
 8006aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006aa4:	4303      	orrs	r3, r0
 8006aa6:	d035      	beq.n	8006b14 <scalbn+0x84>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <scalbn+0xd0>)
 8006aac:	f7f9 fd08 	bl	80004c0 <__aeabi_dmul>
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <scalbn+0xd4>)
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4296      	cmp	r6, r2
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	460b      	mov	r3, r1
 8006aba:	da0e      	bge.n	8006ada <scalbn+0x4a>
 8006abc:	a324      	add	r3, pc, #144	; (adr r3, 8006b50 <scalbn+0xc0>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	e01c      	b.n	8006afe <scalbn+0x6e>
 8006ac4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006ac8:	42ba      	cmp	r2, r7
 8006aca:	d109      	bne.n	8006ae0 <scalbn+0x50>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	f7f9 fb44 	bl	800015c <__adddf3>
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	e01c      	b.n	8006b14 <scalbn+0x84>
 8006ada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ade:	3a36      	subs	r2, #54	; 0x36
 8006ae0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ae4:	4432      	add	r2, r6
 8006ae6:	428a      	cmp	r2, r1
 8006ae8:	dd0c      	ble.n	8006b04 <scalbn+0x74>
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	a11a      	add	r1, pc, #104	; (adr r1, 8006b58 <scalbn+0xc8>)
 8006af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af4:	f000 f83a 	bl	8006b6c <copysign>
 8006af8:	a317      	add	r3, pc, #92	; (adr r3, 8006b58 <scalbn+0xc8>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fcdf 	bl	80004c0 <__aeabi_dmul>
 8006b02:	e7e7      	b.n	8006ad4 <scalbn+0x44>
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	dd08      	ble.n	8006b1a <scalbn+0x8a>
 8006b08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b14:	4620      	mov	r0, r4
 8006b16:	4629      	mov	r1, r5
 8006b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b1e:	da0b      	bge.n	8006b38 <scalbn+0xa8>
 8006b20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b24:	429e      	cmp	r6, r3
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	dce0      	bgt.n	8006aee <scalbn+0x5e>
 8006b2c:	a108      	add	r1, pc, #32	; (adr r1, 8006b50 <scalbn+0xc0>)
 8006b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b32:	f000 f81b 	bl	8006b6c <copysign>
 8006b36:	e7c1      	b.n	8006abc <scalbn+0x2c>
 8006b38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b3c:	3236      	adds	r2, #54	; 0x36
 8006b3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <scalbn+0xd8>)
 8006b4e:	e7d6      	b.n	8006afe <scalbn+0x6e>
 8006b50:	c2f8f359 	.word	0xc2f8f359
 8006b54:	01a56e1f 	.word	0x01a56e1f
 8006b58:	8800759c 	.word	0x8800759c
 8006b5c:	7e37e43c 	.word	0x7e37e43c
 8006b60:	43500000 	.word	0x43500000
 8006b64:	ffff3cb0 	.word	0xffff3cb0
 8006b68:	3c900000 	.word	0x3c900000

08006b6c <copysign>:
 8006b6c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b74:	ea42 0103 	orr.w	r1, r2, r3
 8006b78:	4770      	bx	lr
	...

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	200000a4 	.word	0x200000a4

08006b88 <_sbrk>:
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <_sbrk+0x14>)
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	b909      	cbnz	r1, 8006b94 <_sbrk+0xc>
 8006b90:	4903      	ldr	r1, [pc, #12]	; (8006ba0 <_sbrk+0x18>)
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	4402      	add	r2, r0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4770      	bx	lr
 8006b9c:	2000019c 	.word	0x2000019c
 8006ba0:	200003fc 	.word	0x200003fc

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
